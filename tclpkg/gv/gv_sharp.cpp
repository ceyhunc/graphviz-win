/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/***********************************************************************
 *
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 *
 ************************************************************************/

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
#  if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#    define SWIGTEMPLATEDISAMBIGUATOR template
#  else
#    define SWIGTEMPLATEDISAMBIGUATOR 
#  endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__) || defined(__ICC)
#   define SWIGUNUSED __attribute__ ((unused)) 
# else
#   define SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods for Windows DLLs */
#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   define SWIGEXPORT
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL },
};

static void SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if (code >=0 && (size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if (code >=0 && (size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_gv(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_gv(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_gv(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}

/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else



/* some language headers (e.g. php.h, ruby.h) leave these defined */
#undef PACKAGE_STRING
#undef PACKAGE_TARNAME
#undef PACKAGE_VERSION
#undef PACKAGE_NAME

#include "gvc.h"


/** New graphs */
/*** New empty graph */
extern Agraph_t *graph(char *name);
extern Agraph_t *digraph(char *name);
extern Agraph_t *strictgraph(char *name);
extern Agraph_t *strictdigraph(char *name);
/*** New graph from a dot-syntax string or file */
extern Agraph_t *readstring(char *string);
extern Agraph_t *read(char *filename);
extern Agraph_t *read(FILE *f);	
/*** Add new subgraph to existing graph */
extern Agraph_t *graph(Agraph_t *g, char *name);

/** New nodes */
/*** Add new node to existing graph */
extern Agnode_t *node(Agraph_t *g, char *name);

/** New edges */
/*** Add new edge between existing nodes */
extern Agedge_t *edge(Agnode_t *t, Agnode_t *h);
/*** Add a new edge between an existing tail node, and a named head node which will be induced in the graph if it doesn't already exist */
extern Agedge_t *edge(Agnode_t *t, char *hname);
/*** Add a new edge between an existing head node, and a named tail node which will be induced in the graph if it doesn't already exist */
extern Agedge_t *edge(char *tname, Agnode_t *h);
/*** Add a new edge between named tail  and head nodes which will be induced in the graph if they don't already exist */
extern Agedge_t *edge(Agraph_t *g, char *tname, char *hname);

/** Setting attribute values */
/*** Set value of named attribute of graph/node/edge - creating attribute if necessary */
extern char *setv(Agraph_t *g, char *attr, char *val);
extern char *setv(Agnode_t *n, char *attr, char *val);
extern char *setv(Agedge_t *e, char *attr, char *val);

/*** Set value of existing attribute of graph/node/edge (using attribute handle) */
extern char *setv(Agraph_t *g, Agsym_t *a, char *val);
extern char *setv(Agnode_t *n, Agsym_t *a, char *val);
extern char *setv(Agedge_t *e, Agsym_t *a, char *val);

/** Getting attribute values */
/*** Get value of named attribute of graph/node/edge */
extern char *getv(Agraph_t *g, char *attr);
extern char *getv(Agnode_t *n, char *attr);
extern char *getv(Agedge_t *e, char *attr);

/*** Get value of attribute of graph/node/edge (using attribute handle) */
extern char *getv(Agraph_t *g, Agsym_t *a);
extern char *getv(Agnode_t *n, Agsym_t *a);
extern char *getv(Agedge_t *e, Agsym_t *a);

/** Obtain names from handles */
extern char *nameof(Agraph_t *g);
extern char *nameof(Agnode_t *n);
//extern char *nameof(Agedge_t *e);
extern char *nameof(Agsym_t *a);

/** Find handles from names */
extern Agraph_t *findsubg(Agraph_t *g, char *name);
extern Agnode_t *findnode(Agraph_t *g, char *name);
extern Agedge_t *findedge(Agnode_t *t, Agnode_t *h);

/** */
extern Agsym_t *findattr(Agraph_t *g, char *name);
extern Agsym_t *findattr(Agnode_t *n, char *name);
extern Agsym_t *findattr(Agedge_t *e, char *name);

/** Misc graph navigators returning handles */
extern Agnode_t *headof(Agedge_t *e);
extern Agnode_t *tailof(Agedge_t *e);
extern Agraph_t *graphof(Agraph_t *g);
extern Agraph_t *graphof(Agedge_t *e);
extern Agraph_t *graphof(Agnode_t *n);
extern Agraph_t *rootof(Agraph_t *g);

/** Obtain handles of proto node/edge for setting default attribute values */
extern Agnode_t *protonode(Agraph_t *g);
extern Agedge_t *protoedge(Agraph_t *g);

/** Iterators */
/*** Iteration termination tests */
extern bool ok(Agraph_t *g);
extern bool ok(Agnode_t *n);
extern bool ok(Agedge_t *e);
extern bool ok(Agsym_t *a);

/*** Iterate over subgraphs of a graph */
extern Agraph_t *firstsubg(Agraph_t *g);
extern Agraph_t *nextsubg(Agraph_t *g, Agraph_t *sg);

/*** Iterate over supergraphs of a graph (obscure and rarely useful) */
extern Agraph_t *firstsupg(Agraph_t *g);
extern Agraph_t *nextsupg(Agraph_t *g, Agraph_t *sg);

/*** Iterate over edges of a graph */
extern Agedge_t *firstedge(Agraph_t *g);
extern Agedge_t *nextedge(Agraph_t *g, Agedge_t *e);

/*** Iterate over outedges of a graph */
extern Agedge_t *firstout(Agraph_t *g);
extern Agedge_t *nextout(Agraph_t *g, Agedge_t *e);

/*** Iterate over edges of a node */
extern Agedge_t *firstedge(Agnode_t *n);
extern Agedge_t *nextedge(Agnode_t *n, Agedge_t *e);

/*** Iterate over out-edges of a node */
extern Agedge_t *firstout(Agnode_t *n);
extern Agedge_t *nextout(Agnode_t *n, Agedge_t *e);

/*** Iterate over head nodes reachable from out-edges of a node */
extern Agnode_t *firsthead(Agnode_t *n);
extern Agnode_t *nexthead(Agnode_t *n, Agnode_t *h);

/*** Iterate over in-edges of a graph */
extern Agedge_t *firstin(Agraph_t *g);
extern Agedge_t *nextin(Agnode_t *n, Agedge_t *e);

/*** Iterate over in-edges of a node */
extern Agedge_t *firstin(Agnode_t *n);
extern Agedge_t *nextin(Agraph_t *g, Agedge_t *e);

/*** Iterate over tail nodes reachable from in-edges of a node */
extern Agnode_t *firsttail(Agnode_t *n);
extern Agnode_t *nexttail(Agnode_t *n, Agnode_t *t);

/*** Iterate over nodes of a graph */
extern Agnode_t *firstnode(Agraph_t *g);
extern Agnode_t *nextnode(Agraph_t *g, Agnode_t *n);

/*** Iterate over nodes of an edge */
extern Agnode_t *firstnode(Agedge_t *e);
extern Agnode_t *nextnode(Agedge_t *e, Agnode_t *n);

/*** Iterate over attributes of a graph */
extern Agsym_t *firstattr(Agraph_t *g);
extern Agsym_t *nextattr(Agraph_t *g, Agsym_t *a);

/*** Iterate over attributes of an edge */
extern Agsym_t *firstattr(Agedge_t *e);
extern Agsym_t *nextattr(Agedge_t *e, Agsym_t *a);

/*** Iterate over attributes of a node */
extern Agsym_t *firstattr(Agnode_t *n);
extern Agsym_t *nextattr(Agnode_t *n, Agsym_t *a);

/** Remove graph objects */
extern void rm(Agraph_t *g);
extern void rm(Agnode_t *n);
extern void rm(Agedge_t *e);

/** Layout */
/*** Annotate a graph with layout attributes and values using a specific layout engine */
extern void layout(Agraph_t *g, char *engine);

/** Render */
/*** Render a layout into attributes of the graph */
extern void render(Agraph_t *g); 

/*** Render a layout in a specific format */
extern void render(Agraph_t *g, char *format);
extern void render(Agraph_t *g, char *format, char *filename);
extern void render(Agraph_t *g, char *format, FILE *f);
extern void render(Agraph_t *g, char *format, void **data);


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_graph__SWIG_0(char * jarg1) {
    void * jresult ;
    char *arg1 = (char *) 0 ;
    Agraph_t *result;
    
    arg1 = jarg1; 
    result = (Agraph_t *)graph(arg1);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_digraph(char * jarg1) {
    void * jresult ;
    char *arg1 = (char *) 0 ;
    Agraph_t *result;
    
    arg1 = jarg1; 
    result = (Agraph_t *)digraph(arg1);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_strictgraph(char * jarg1) {
    void * jresult ;
    char *arg1 = (char *) 0 ;
    Agraph_t *result;
    
    arg1 = jarg1; 
    result = (Agraph_t *)strictgraph(arg1);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_strictdigraph(char * jarg1) {
    void * jresult ;
    char *arg1 = (char *) 0 ;
    Agraph_t *result;
    
    arg1 = jarg1; 
    result = (Agraph_t *)strictdigraph(arg1);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_readstring(char * jarg1) {
    void * jresult ;
    char *arg1 = (char *) 0 ;
    Agraph_t *result;
    
    arg1 = jarg1; 
    result = (Agraph_t *)readstring(arg1);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_read__SWIG_0(char * jarg1) {
    void * jresult ;
    char *arg1 = (char *) 0 ;
    Agraph_t *result;
    
    arg1 = jarg1; 
    result = (Agraph_t *)read(arg1);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_read__SWIG_1(void * jarg1) {
    void * jresult ;
    FILE *arg1 = (FILE *) 0 ;
    Agraph_t *result;
    
    arg1 = (FILE *)jarg1; 
    result = (Agraph_t *)read(arg1);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_graph__SWIG_1(void * jarg1, char * jarg2) {
    void * jresult ;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    char *arg2 = (char *) 0 ;
    Agraph_t *result;
    
    arg1 = (Agraph_t *)jarg1; 
    arg2 = jarg2; 
    result = (Agraph_t *)graph(arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_node(void * jarg1, char * jarg2) {
    void * jresult ;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    char *arg2 = (char *) 0 ;
    Agnode_t *result;
    
    arg1 = (Agraph_t *)jarg1; 
    arg2 = jarg2; 
    result = (Agnode_t *)node(arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_edge__SWIG_0(void * jarg1, void * jarg2) {
    void * jresult ;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agnode_t *arg2 = (Agnode_t *) 0 ;
    Agedge_t *result;
    
    arg1 = (Agnode_t *)jarg1; 
    arg2 = (Agnode_t *)jarg2; 
    result = (Agedge_t *)edge(arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_edge__SWIG_1(void * jarg1, char * jarg2) {
    void * jresult ;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    char *arg2 = (char *) 0 ;
    Agedge_t *result;
    
    arg1 = (Agnode_t *)jarg1; 
    arg2 = jarg2; 
    result = (Agedge_t *)edge(arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_edge__SWIG_2(char * jarg1, void * jarg2) {
    void * jresult ;
    char *arg1 = (char *) 0 ;
    Agnode_t *arg2 = (Agnode_t *) 0 ;
    Agedge_t *result;
    
    arg1 = jarg1; 
    arg2 = (Agnode_t *)jarg2; 
    result = (Agedge_t *)edge(arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_edge__SWIG_3(void * jarg1, char * jarg2, char * jarg3) {
    void * jresult ;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    Agedge_t *result;
    
    arg1 = (Agraph_t *)jarg1; 
    arg2 = jarg2; 
    arg3 = jarg3; 
    result = (Agedge_t *)edge(arg1,arg2,arg3);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_setv__SWIG_0(void * jarg1, char * jarg2, char * jarg3) {
    char * jresult ;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    char *result;
    
    arg1 = (Agraph_t *)jarg1; 
    arg2 = jarg2; 
    arg3 = jarg3; 
    result = (char *)setv(arg1,arg2,arg3);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_setv__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
    char * jresult ;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    char *result;
    
    arg1 = (Agnode_t *)jarg1; 
    arg2 = jarg2; 
    arg3 = jarg3; 
    result = (char *)setv(arg1,arg2,arg3);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_setv__SWIG_2(void * jarg1, char * jarg2, char * jarg3) {
    char * jresult ;
    Agedge_t *arg1 = (Agedge_t *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    char *result;
    
    arg1 = (Agedge_t *)jarg1; 
    arg2 = jarg2; 
    arg3 = jarg3; 
    result = (char *)setv(arg1,arg2,arg3);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_setv__SWIG_3(void * jarg1, void * jarg2, char * jarg3) {
    char * jresult ;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agsym_t *arg2 = (Agsym_t *) 0 ;
    char *arg3 = (char *) 0 ;
    char *result;
    
    arg1 = (Agraph_t *)jarg1; 
    arg2 = (Agsym_t *)jarg2; 
    arg3 = jarg3; 
    result = (char *)setv(arg1,arg2,arg3);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_setv__SWIG_4(void * jarg1, void * jarg2, char * jarg3) {
    char * jresult ;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agsym_t *arg2 = (Agsym_t *) 0 ;
    char *arg3 = (char *) 0 ;
    char *result;
    
    arg1 = (Agnode_t *)jarg1; 
    arg2 = (Agsym_t *)jarg2; 
    arg3 = jarg3; 
    result = (char *)setv(arg1,arg2,arg3);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_setv__SWIG_5(void * jarg1, void * jarg2, char * jarg3) {
    char * jresult ;
    Agedge_t *arg1 = (Agedge_t *) 0 ;
    Agsym_t *arg2 = (Agsym_t *) 0 ;
    char *arg3 = (char *) 0 ;
    char *result;
    
    arg1 = (Agedge_t *)jarg1; 
    arg2 = (Agsym_t *)jarg2; 
    arg3 = jarg3; 
    result = (char *)setv(arg1,arg2,arg3);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_getv__SWIG_0(void * jarg1, char * jarg2) {
    char * jresult ;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    char *arg2 = (char *) 0 ;
    char *result;
    
    arg1 = (Agraph_t *)jarg1; 
    arg2 = jarg2; 
    result = (char *)getv(arg1,arg2);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_getv__SWIG_1(void * jarg1, char * jarg2) {
    char * jresult ;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    char *arg2 = (char *) 0 ;
    char *result;
    
    arg1 = (Agnode_t *)jarg1; 
    arg2 = jarg2; 
    result = (char *)getv(arg1,arg2);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_getv__SWIG_2(void * jarg1, char * jarg2) {
    char * jresult ;
    Agedge_t *arg1 = (Agedge_t *) 0 ;
    char *arg2 = (char *) 0 ;
    char *result;
    
    arg1 = (Agedge_t *)jarg1; 
    arg2 = jarg2; 
    result = (char *)getv(arg1,arg2);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_getv__SWIG_3(void * jarg1, void * jarg2) {
    char * jresult ;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agsym_t *arg2 = (Agsym_t *) 0 ;
    char *result;
    
    arg1 = (Agraph_t *)jarg1; 
    arg2 = (Agsym_t *)jarg2; 
    result = (char *)getv(arg1,arg2);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_getv__SWIG_4(void * jarg1, void * jarg2) {
    char * jresult ;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agsym_t *arg2 = (Agsym_t *) 0 ;
    char *result;
    
    arg1 = (Agnode_t *)jarg1; 
    arg2 = (Agsym_t *)jarg2; 
    result = (char *)getv(arg1,arg2);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_getv__SWIG_5(void * jarg1, void * jarg2) {
    char * jresult ;
    Agedge_t *arg1 = (Agedge_t *) 0 ;
    Agsym_t *arg2 = (Agsym_t *) 0 ;
    char *result;
    
    arg1 = (Agedge_t *)jarg1; 
    arg2 = (Agsym_t *)jarg2; 
    result = (char *)getv(arg1,arg2);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nameof__SWIG_0(void * jarg1) {
    char * jresult ;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    char *result;
    
    arg1 = (Agraph_t *)jarg1; 
    result = (char *)nameof(arg1);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nameof__SWIG_1(void * jarg1) {
    char * jresult ;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    char *result;
    
    arg1 = (Agnode_t *)jarg1; 
    result = (char *)nameof(arg1);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nameof__SWIG_2(void * jarg1) {
    char * jresult ;
    Agsym_t *arg1 = (Agsym_t *) 0 ;
    char *result;
    
    arg1 = (Agsym_t *)jarg1; 
    result = (char *)nameof(arg1);
    
    jresult = SWIG_csharp_string_callback(result); 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_findsubg(void * jarg1, char * jarg2) {
    void * jresult ;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    char *arg2 = (char *) 0 ;
    Agraph_t *result;
    
    arg1 = (Agraph_t *)jarg1; 
    arg2 = jarg2; 
    result = (Agraph_t *)findsubg(arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_findnode(void * jarg1, char * jarg2) {
    void * jresult ;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    char *arg2 = (char *) 0 ;
    Agnode_t *result;
    
    arg1 = (Agraph_t *)jarg1; 
    arg2 = jarg2; 
    result = (Agnode_t *)findnode(arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_findedge(void * jarg1, void * jarg2) {
    void * jresult ;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agnode_t *arg2 = (Agnode_t *) 0 ;
    Agedge_t *result;
    
    arg1 = (Agnode_t *)jarg1; 
    arg2 = (Agnode_t *)jarg2; 
    result = (Agedge_t *)findedge(arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_findattr__SWIG_0(void * jarg1, char * jarg2) {
    void * jresult ;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    char *arg2 = (char *) 0 ;
    Agsym_t *result;
    
    arg1 = (Agraph_t *)jarg1; 
    arg2 = jarg2; 
    result = (Agsym_t *)findattr(arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_findattr__SWIG_1(void * jarg1, char * jarg2) {
    void * jresult ;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    char *arg2 = (char *) 0 ;
    Agsym_t *result;
    
    arg1 = (Agnode_t *)jarg1; 
    arg2 = jarg2; 
    result = (Agsym_t *)findattr(arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_findattr__SWIG_2(void * jarg1, char * jarg2) {
    void * jresult ;
    Agedge_t *arg1 = (Agedge_t *) 0 ;
    char *arg2 = (char *) 0 ;
    Agsym_t *result;
    
    arg1 = (Agedge_t *)jarg1; 
    arg2 = jarg2; 
    result = (Agsym_t *)findattr(arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_headof(void * jarg1) {
    void * jresult ;
    Agedge_t *arg1 = (Agedge_t *) 0 ;
    Agnode_t *result;
    
    arg1 = (Agedge_t *)jarg1; 
    result = (Agnode_t *)headof(arg1);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_tailof(void * jarg1) {
    void * jresult ;
    Agedge_t *arg1 = (Agedge_t *) 0 ;
    Agnode_t *result;
    
    arg1 = (Agedge_t *)jarg1; 
    result = (Agnode_t *)tailof(arg1);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_graphof__SWIG_0(void * jarg1) {
    void * jresult ;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agraph_t *result;
    
    arg1 = (Agraph_t *)jarg1; 
    result = (Agraph_t *)graphof(arg1);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_graphof__SWIG_1(void * jarg1) {
    void * jresult ;
    Agedge_t *arg1 = (Agedge_t *) 0 ;
    Agraph_t *result;
    
    arg1 = (Agedge_t *)jarg1; 
    result = (Agraph_t *)graphof(arg1);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_graphof__SWIG_2(void * jarg1) {
    void * jresult ;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agraph_t *result;
    
    arg1 = (Agnode_t *)jarg1; 
    result = (Agraph_t *)graphof(arg1);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_rootof(void * jarg1) {
    void * jresult ;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agraph_t *result;
    
    arg1 = (Agraph_t *)jarg1; 
    result = (Agraph_t *)rootof(arg1);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_protonode(void * jarg1) {
    void * jresult ;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agnode_t *result;
    
    arg1 = (Agraph_t *)jarg1; 
    result = (Agnode_t *)protonode(arg1);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_protoedge(void * jarg1) {
    void * jresult ;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agedge_t *result;
    
    arg1 = (Agraph_t *)jarg1; 
    result = (Agedge_t *)protoedge(arg1);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ok__SWIG_0(void * jarg1) {
    unsigned int jresult ;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    bool result;
    
    arg1 = (Agraph_t *)jarg1; 
    result = (bool)ok(arg1);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ok__SWIG_1(void * jarg1) {
    unsigned int jresult ;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    bool result;
    
    arg1 = (Agnode_t *)jarg1; 
    result = (bool)ok(arg1);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ok__SWIG_2(void * jarg1) {
    unsigned int jresult ;
    Agedge_t *arg1 = (Agedge_t *) 0 ;
    bool result;
    
    arg1 = (Agedge_t *)jarg1; 
    result = (bool)ok(arg1);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ok__SWIG_3(void * jarg1) {
    unsigned int jresult ;
    Agsym_t *arg1 = (Agsym_t *) 0 ;
    bool result;
    
    arg1 = (Agsym_t *)jarg1; 
    result = (bool)ok(arg1);
    
    jresult = result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_firstsubg(void * jarg1) {
    void * jresult ;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agraph_t *result;
    
    arg1 = (Agraph_t *)jarg1; 
    result = (Agraph_t *)firstsubg(arg1);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nextsubg(void * jarg1, void * jarg2) {
    void * jresult ;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agraph_t *arg2 = (Agraph_t *) 0 ;
    Agraph_t *result;
    
    arg1 = (Agraph_t *)jarg1; 
    arg2 = (Agraph_t *)jarg2; 
    result = (Agraph_t *)nextsubg(arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_firstsupg(void * jarg1) {
    void * jresult ;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agraph_t *result;
    
    arg1 = (Agraph_t *)jarg1; 
    result = (Agraph_t *)firstsupg(arg1);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nextsupg(void * jarg1, void * jarg2) {
    void * jresult ;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agraph_t *arg2 = (Agraph_t *) 0 ;
    Agraph_t *result;
    
    arg1 = (Agraph_t *)jarg1; 
    arg2 = (Agraph_t *)jarg2; 
    result = (Agraph_t *)nextsupg(arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_firstedge__SWIG_0(void * jarg1) {
    void * jresult ;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agedge_t *result;
    
    arg1 = (Agraph_t *)jarg1; 
    result = (Agedge_t *)firstedge(arg1);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nextedge__SWIG_0(void * jarg1, void * jarg2) {
    void * jresult ;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agedge_t *arg2 = (Agedge_t *) 0 ;
    Agedge_t *result;
    
    arg1 = (Agraph_t *)jarg1; 
    arg2 = (Agedge_t *)jarg2; 
    result = (Agedge_t *)nextedge(arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_firstout__SWIG_0(void * jarg1) {
    void * jresult ;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agedge_t *result;
    
    arg1 = (Agraph_t *)jarg1; 
    result = (Agedge_t *)firstout(arg1);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nextout__SWIG_0(void * jarg1, void * jarg2) {
    void * jresult ;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agedge_t *arg2 = (Agedge_t *) 0 ;
    Agedge_t *result;
    
    arg1 = (Agraph_t *)jarg1; 
    arg2 = (Agedge_t *)jarg2; 
    result = (Agedge_t *)nextout(arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_firstedge__SWIG_1(void * jarg1) {
    void * jresult ;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agedge_t *result;
    
    arg1 = (Agnode_t *)jarg1; 
    result = (Agedge_t *)firstedge(arg1);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nextedge__SWIG_1(void * jarg1, void * jarg2) {
    void * jresult ;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agedge_t *arg2 = (Agedge_t *) 0 ;
    Agedge_t *result;
    
    arg1 = (Agnode_t *)jarg1; 
    arg2 = (Agedge_t *)jarg2; 
    result = (Agedge_t *)nextedge(arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_firstout__SWIG_1(void * jarg1) {
    void * jresult ;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agedge_t *result;
    
    arg1 = (Agnode_t *)jarg1; 
    result = (Agedge_t *)firstout(arg1);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nextout__SWIG_1(void * jarg1, void * jarg2) {
    void * jresult ;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agedge_t *arg2 = (Agedge_t *) 0 ;
    Agedge_t *result;
    
    arg1 = (Agnode_t *)jarg1; 
    arg2 = (Agedge_t *)jarg2; 
    result = (Agedge_t *)nextout(arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_firsthead(void * jarg1) {
    void * jresult ;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agnode_t *result;
    
    arg1 = (Agnode_t *)jarg1; 
    result = (Agnode_t *)firsthead(arg1);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nexthead(void * jarg1, void * jarg2) {
    void * jresult ;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agnode_t *arg2 = (Agnode_t *) 0 ;
    Agnode_t *result;
    
    arg1 = (Agnode_t *)jarg1; 
    arg2 = (Agnode_t *)jarg2; 
    result = (Agnode_t *)nexthead(arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_firstin__SWIG_0(void * jarg1) {
    void * jresult ;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agedge_t *result;
    
    arg1 = (Agraph_t *)jarg1; 
    result = (Agedge_t *)firstin(arg1);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nextin__SWIG_0(void * jarg1, void * jarg2) {
    void * jresult ;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agedge_t *arg2 = (Agedge_t *) 0 ;
    Agedge_t *result;
    
    arg1 = (Agnode_t *)jarg1; 
    arg2 = (Agedge_t *)jarg2; 
    result = (Agedge_t *)nextin(arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_firstin__SWIG_1(void * jarg1) {
    void * jresult ;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agedge_t *result;
    
    arg1 = (Agnode_t *)jarg1; 
    result = (Agedge_t *)firstin(arg1);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nextin__SWIG_1(void * jarg1, void * jarg2) {
    void * jresult ;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agedge_t *arg2 = (Agedge_t *) 0 ;
    Agedge_t *result;
    
    arg1 = (Agraph_t *)jarg1; 
    arg2 = (Agedge_t *)jarg2; 
    result = (Agedge_t *)nextin(arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_firsttail(void * jarg1) {
    void * jresult ;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agnode_t *result;
    
    arg1 = (Agnode_t *)jarg1; 
    result = (Agnode_t *)firsttail(arg1);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nexttail(void * jarg1, void * jarg2) {
    void * jresult ;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agnode_t *arg2 = (Agnode_t *) 0 ;
    Agnode_t *result;
    
    arg1 = (Agnode_t *)jarg1; 
    arg2 = (Agnode_t *)jarg2; 
    result = (Agnode_t *)nexttail(arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_firstnode__SWIG_0(void * jarg1) {
    void * jresult ;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agnode_t *result;
    
    arg1 = (Agraph_t *)jarg1; 
    result = (Agnode_t *)firstnode(arg1);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nextnode__SWIG_0(void * jarg1, void * jarg2) {
    void * jresult ;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agnode_t *arg2 = (Agnode_t *) 0 ;
    Agnode_t *result;
    
    arg1 = (Agraph_t *)jarg1; 
    arg2 = (Agnode_t *)jarg2; 
    result = (Agnode_t *)nextnode(arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_firstnode__SWIG_1(void * jarg1) {
    void * jresult ;
    Agedge_t *arg1 = (Agedge_t *) 0 ;
    Agnode_t *result;
    
    arg1 = (Agedge_t *)jarg1; 
    result = (Agnode_t *)firstnode(arg1);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nextnode__SWIG_1(void * jarg1, void * jarg2) {
    void * jresult ;
    Agedge_t *arg1 = (Agedge_t *) 0 ;
    Agnode_t *arg2 = (Agnode_t *) 0 ;
    Agnode_t *result;
    
    arg1 = (Agedge_t *)jarg1; 
    arg2 = (Agnode_t *)jarg2; 
    result = (Agnode_t *)nextnode(arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_firstattr__SWIG_0(void * jarg1) {
    void * jresult ;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agsym_t *result;
    
    arg1 = (Agraph_t *)jarg1; 
    result = (Agsym_t *)firstattr(arg1);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nextattr__SWIG_0(void * jarg1, void * jarg2) {
    void * jresult ;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agsym_t *arg2 = (Agsym_t *) 0 ;
    Agsym_t *result;
    
    arg1 = (Agraph_t *)jarg1; 
    arg2 = (Agsym_t *)jarg2; 
    result = (Agsym_t *)nextattr(arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_firstattr__SWIG_1(void * jarg1) {
    void * jresult ;
    Agedge_t *arg1 = (Agedge_t *) 0 ;
    Agsym_t *result;
    
    arg1 = (Agedge_t *)jarg1; 
    result = (Agsym_t *)firstattr(arg1);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nextattr__SWIG_1(void * jarg1, void * jarg2) {
    void * jresult ;
    Agedge_t *arg1 = (Agedge_t *) 0 ;
    Agsym_t *arg2 = (Agsym_t *) 0 ;
    Agsym_t *result;
    
    arg1 = (Agedge_t *)jarg1; 
    arg2 = (Agsym_t *)jarg2; 
    result = (Agsym_t *)nextattr(arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_firstattr__SWIG_2(void * jarg1) {
    void * jresult ;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agsym_t *result;
    
    arg1 = (Agnode_t *)jarg1; 
    result = (Agsym_t *)firstattr(arg1);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nextattr__SWIG_2(void * jarg1, void * jarg2) {
    void * jresult ;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agsym_t *arg2 = (Agsym_t *) 0 ;
    Agsym_t *result;
    
    arg1 = (Agnode_t *)jarg1; 
    arg2 = (Agsym_t *)jarg2; 
    result = (Agsym_t *)nextattr(arg1,arg2);
    
    jresult = (void *)result; 
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_rm__SWIG_0(void * jarg1) {
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    
    arg1 = (Agraph_t *)jarg1; 
    rm(arg1);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_rm__SWIG_1(void * jarg1) {
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    
    arg1 = (Agnode_t *)jarg1; 
    rm(arg1);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_rm__SWIG_2(void * jarg1) {
    Agedge_t *arg1 = (Agedge_t *) 0 ;
    
    arg1 = (Agedge_t *)jarg1; 
    rm(arg1);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_layout(void * jarg1, char * jarg2) {
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    char *arg2 = (char *) 0 ;
    
    arg1 = (Agraph_t *)jarg1; 
    arg2 = jarg2; 
    layout(arg1,arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_render__SWIG_0(void * jarg1) {
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    
    arg1 = (Agraph_t *)jarg1; 
    render(arg1);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_render__SWIG_1(void * jarg1, char * jarg2) {
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    char *arg2 = (char *) 0 ;
    
    arg1 = (Agraph_t *)jarg1; 
    arg2 = jarg2; 
    render(arg1,arg2);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_render__SWIG_2(void * jarg1, char * jarg2, char * jarg3) {
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    
    arg1 = (Agraph_t *)jarg1; 
    arg2 = jarg2; 
    arg3 = jarg3; 
    render(arg1,arg2,arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_render__SWIG_3(void * jarg1, char * jarg2, void * jarg3) {
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    char *arg2 = (char *) 0 ;
    FILE *arg3 = (FILE *) 0 ;
    
    arg1 = (Agraph_t *)jarg1; 
    arg2 = jarg2; 
    arg3 = (FILE *)jarg3; 
    render(arg1,arg2,arg3);
    
}


SWIGEXPORT void SWIGSTDCALL CSharp_render__SWIG_4(void * jarg1, char * jarg2, void * jarg3) {
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    char *arg2 = (char *) 0 ;
    void **arg3 = (void **) 0 ;
    
    arg1 = (Agraph_t *)jarg1; 
    arg2 = jarg2; 
    arg3 = (void **)jarg3; 
    render(arg1,arg2,arg3);
    
}


#ifdef __cplusplus
}
#endif

