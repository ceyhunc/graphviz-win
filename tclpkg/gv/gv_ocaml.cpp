/* -*- buffer-read-only: t -*- vi: set ro: */
#define SWIG_MODULE "gv"
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/***********************************************************************
 *
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 *
 ************************************************************************/

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
#  if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#    define SWIGTEMPLATEDISAMBIGUATOR template
#  else
#    define SWIGTEMPLATEDISAMBIGUATOR 
#  endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__) || defined(__ICC)
#   define SWIGUNUSED __attribute__ ((unused)) 
# else
#   define SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods for Windows DLLs */
#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   define SWIGEXPORT
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif



#define SWIGSTATIC static

/***********************************************************************
 * swigrun.swg
 *
 *     This file contains generic CAPI SWIG runtime support for pointer
 *     type checking.
 *
 ************************************************************************/

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "2"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store inforomation on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;


/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (int)(*f1 - *f2);
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}


/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu = 0;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -*-c-*-
 * -----------------------------------------------------------------------
 * ocaml/ocamldec.swg
 * Copyright (C) 2000, 2001 Matthias Koeppe
 *
 * Ocaml runtime code -- declarations
 * ----------------------------------------------------------------------- */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#ifdef __cplusplus
#define SWIGEXT extern "C"
SWIGEXT {
#else
#define SWIGEXT 
#endif
#define value caml_value_t
#define CAML_VALUE caml_value_t
#include <caml/alloc.h>
#include <caml/custom.h>
#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#include <caml/fail.h>
#include <caml/misc.h>

#define caml_array_set swig_caml_array_set

// Adapted from memory.h and mlvalues.h

#define SWIG_CAMLlocal1(x) \
  caml_value_t x = 0; \
  CAMLxparam1 (x)

#define SWIG_CAMLlocal2(x, y) \
  caml_value_t x = 0, y = 0; \
  CAMLxparam2 (x, y)

#define SWIG_CAMLlocal3(x, y, z) \
  caml_value_t x = 0, y = 0, z = 0; \
  CAMLxparam3 (x, y, z)

#define SWIG_CAMLlocal4(x, y, z, t) \
  caml_value_t x = 0, y = 0, z = 0, t = 0; \
  CAMLxparam4 (x, y, z, t)

#define SWIG_CAMLlocal5(x, y, z, t, u) \
  caml_value_t x = 0, y = 0, z = 0, t = 0, u = 0; \
  CAMLxparam5 (x, y, z, t, u)

#define SWIG_CAMLlocalN(x, size) \
  caml_value_t x [(size)] = { 0, /* 0, 0, ... */ }; \
  CAMLxparamN (x, (size))

#define SWIG_Field(x, i) (((caml_value_t *)(x)) [i])           /* Also an l-value. */
#define SWIG_Store_field(block, offset, val) do{ \
  mlsize_t caml__temp_offset = (offset); \
  caml_value_t caml__temp_val = (val); \
  modify (&SWIG_Field ((block), caml__temp_offset), caml__temp_val); \
}while(0)

#define SWIG_Data_custom_val(v) ((void *) &SWIG_Field((v), 1))
#ifdef ARCH_BIG_ENDIAN
#define SWIG_Tag_val(val) (((unsigned char *) (val)) [-1])
                                                 /* Also an l-value. */
#define SWIG_Tag_hp(hp) (((unsigned char *) (hp)) [sizeof(caml_value_t)-1])
                                                 /* Also an l-value. */
#else
#define SWIG_Tag_val(val) (((unsigned char *) (val)) [-sizeof(caml_value_t)])
                                                 /* Also an l-value. */
#define SWIG_Tag_hp(hp) (((unsigned char *) (hp)) [0])
                                                 /* Also an l-value. */
#endif

#ifndef ARCH_ALIGN_INT64
#define SWIG_Int64_val(v) (*((int64 *) SWIG_Data_custom_val(v)))
#else
CAMLextern int64 Int64_val(caml_value_t v);
#define SWIG_Int64_val(v) Int64_val(v)
#endif

#define SWIG_NewPointerObj(p,type,flags) caml_val_ptr(p,type)
#define SWIG_GetModule(clientdata) SWIG_Ocaml_GetModule()
#define SWIG_SetModule(clientdata, pointer) SWIG_Ocaml_SetModule(pointer)

#define SWIG_contract_assert(expr, msg) if(!(expr)) {failwith(msg);} else

    SWIGSTATIC int
    SWIG_GetPtr(void *source, void **result, swig_type_info *type, swig_type_info *result_type);
    
    SWIGSTATIC void *
    SWIG_MustGetPtr (CAML_VALUE v,  swig_type_info *type);
    
    SWIGSTATIC CAML_VALUE _wrap_delete_void( CAML_VALUE );
    
    SWIGSTATIC int enum_to_int( char *name, CAML_VALUE v );
    SWIGSTATIC CAML_VALUE int_to_enum( char *name, int v );

    SWIGSTATIC CAML_VALUE caml_list_nth( CAML_VALUE lst, int n );
    SWIGSTATIC CAML_VALUE caml_list_append( CAML_VALUE lst, CAML_VALUE elt );
    SWIGSTATIC int caml_list_length( CAML_VALUE lst );
    SWIGSTATIC CAML_VALUE caml_array_new( int n );
    SWIGSTATIC void caml_array_set( CAML_VALUE arr, int n, CAML_VALUE item );
    SWIGSTATIC CAML_VALUE caml_array_nth( CAML_VALUE arr, int n );
    SWIGSTATIC int caml_array_length( CAML_VALUE arr );

    SWIGSTATIC CAML_VALUE caml_val_char( char c );
    SWIGSTATIC CAML_VALUE caml_val_uchar( unsigned char c );

    SWIGSTATIC CAML_VALUE caml_val_short( short s );
    SWIGSTATIC CAML_VALUE caml_val_ushort( unsigned short s );
    
    SWIGSTATIC CAML_VALUE caml_val_int( int x );
    SWIGSTATIC CAML_VALUE caml_val_uint( unsigned int x );

    SWIGSTATIC CAML_VALUE caml_val_long( long x );
    SWIGSTATIC CAML_VALUE caml_val_ulong( unsigned long x );

    SWIGSTATIC CAML_VALUE caml_val_float( float f );
    SWIGSTATIC CAML_VALUE caml_val_double( double d );

    SWIGSTATIC CAML_VALUE caml_val_ptr( void *p, swig_type_info *descriptor );

    SWIGSTATIC CAML_VALUE caml_val_string( const char *str );
    SWIGSTATIC CAML_VALUE caml_val_string_len( const char *str, int len );

    SWIGSTATIC long caml_long_val( CAML_VALUE v );
    SWIGSTATIC double caml_double_val( CAML_VALUE v );

    SWIGSTATIC int caml_ptr_val_internal( CAML_VALUE v, void **out,
				      swig_type_info *descriptor );
    SWIGSTATIC void *caml_ptr_val( CAML_VALUE v, swig_type_info *descriptor );

    SWIGSTATIC char *caml_string_val( CAML_VALUE v );
    SWIGSTATIC int caml_string_len( CAML_VALUE v );

#ifdef __cplusplus
}
#endif

/* mzschemedec.swg ends here */

/* -*-c-*- */

/* SWIG pointer structure */

#include <string.h>
#include <assert.h>

#ifdef __cplusplus
extern "C" {
#endif

#define C_bool 0
#define C_char 1
#define C_uchar 2
#define C_short 3
#define C_ushort 4
#define C_int 5
#define C_uint 6
#define C_int32 7
#define C_int64 8
#define C_float 9
#define C_double 10
#define C_ptr 11
#define C_array 12
#define C_list 13
#define C_obj 14
#define C_string 15
#define C_enum 16
#define C_director_core 17


/* Cast a pointer if possible; returns 1 if successful */
    
    SWIGSTATIC int
    SWIG_Cast (void *source, swig_type_info *source_type,
	       void **ptr, swig_type_info *dest_type)
    {
	if( !source ) { // Special case for NULL.  This is a popular question
	    // for other modules on the list, so I want an easy way out...
	    *ptr = 0;
	    return 0;
	}

#ifdef TYPE_CAST_VERBOSE
	fprintf( stderr, "Trying to cast %s to %s\n", 
		 source_type ? source_type->str : "<none>",
		 dest_type ? dest_type->str : "<none>" );
#endif
	if (dest_type != source_type) {
	    /* We have a type mismatch.  Will have to look through our type
	       mapping table to figure out whether or not we can accept this
	       datatype. 
	       --
	       Ignore typechecks for void *.  Allow any conversion. */
	    if( !dest_type || !source_type || 
		!strcmp(dest_type->name,"_p_void") ||
		!strcmp(source_type->name,"_p_void") ) {
		*ptr = source;
		return 0;
	    } else {
		swig_cast_info *tc = 
		    SWIG_TypeCheckStruct(source_type, dest_type );
#ifdef TYPE_CAST_VERBOSE
		fprintf( stderr, "Typecheck -> %s\n",
			 tc ? tc->str : "<none>" );
#endif
		if( tc ) {
		    *ptr = SWIG_TypeCast( tc, source );
		    return 0;
		} else
		    return -1;
	    }
	} else {
	    *ptr = source;
	    return 0;
	}
    }

/* Return 0 if successful. */
    SWIGSTATIC int
    SWIG_GetPtr(void *inptr, void **outptr, 
		swig_type_info *intype, swig_type_info *outtype) {
	if (intype) {
	    return SWIG_Cast(inptr, intype,
			     outptr, outtype) == -1;
	} else {
	    *outptr = inptr;
	    return 0;
	}
    }

    SWIGSTATIC void caml_print_list( CAML_VALUE v );

    SWIGSTATIC void caml_print_val( CAML_VALUE v ) {
	switch( SWIG_Tag_val(v) ) {
	case C_bool:
	    if( Bool_val(SWIG_Field(v,0)) ) fprintf( stderr, "true " );
	    else fprintf( stderr, "false " );
	    break;
	case C_char:
	case C_uchar:
	    fprintf( stderr, "'%c' (\\%03d) ", 
		     (Int_val(SWIG_Field(v,0)) >= ' ' &&
		      Int_val(SWIG_Field(v,0)) < 127) ? Int_val(SWIG_Field(v,0)) : '.',
		     Int_val(SWIG_Field(v,0)) );
	    break;
	case C_short:
	case C_ushort:
	case C_int:
	    fprintf( stderr, "%d ", (int)caml_long_val(v) );
	    break;

	case C_uint:
	case C_int32:
	    fprintf( stderr, "%ud ", (unsigned int)caml_long_val(v) );
	    break;
	case C_int64:
	    fprintf( stderr, "%ld ", caml_long_val(v) );
	    break;
	case C_float:
	case C_double:
	    fprintf( stderr, "%f ", caml_double_val(v) );
	    break;

	case C_ptr:
	{
	    void *vout = 0;
	    swig_type_info *ty = (swig_type_info *)(long)SWIG_Int64_val(SWIG_Field(v,1));
	    caml_ptr_val_internal(v,&vout,0);
	    fprintf( stderr, "PTR(%p,%s) ", 
		     vout,
		     ty ? ty->name : "(null)" );
	}
	break;
	case C_array:
	{
	    unsigned int i;
	    for( i = 0; i < Wosize_val( SWIG_Field(v,0) ); i++ ) 
		caml_print_val( SWIG_Field(SWIG_Field(v,0),i) );
	}
	break;
	case C_list:
	    caml_print_list( SWIG_Field(v,0) );
	    break;
	case C_obj:
	    fprintf( stderr, "OBJ(%p) ", (void *)SWIG_Field(v,0) );
	    break;
	case C_string:
	{
	    void *cout;
	    caml_ptr_val_internal(v,&cout,0);
	    fprintf( stderr, "'%s' ", (char *)cout );
	} 
	break;
	}
    }

    SWIGSTATIC void caml_print_list( CAML_VALUE v ) {
	CAMLparam1(v);
	while( v && Is_block(v) ) {
	    fprintf( stderr, "[ " );
	    caml_print_val( SWIG_Field(v,0) );
	    fprintf( stderr, "]\n" );
	    v = SWIG_Field(v,1);
	}
	CAMLreturn0;
    }

    SWIGSTATIC CAML_VALUE caml_list_nth( CAML_VALUE lst, int n ) {
	CAMLparam1(lst);
	int i = 0;
	while( i < n && lst && Is_block(lst) ) {
	    i++; lst = SWIG_Field(lst,1);
	}
	if( lst == Val_unit ) CAMLreturn(Val_unit);
	else CAMLreturn(SWIG_Field(lst,0));
    }
    
    SWIGSTATIC CAML_VALUE caml_list_append( CAML_VALUE lst, CAML_VALUE elt ) {
	CAMLparam2(lst,elt);
	SWIG_CAMLlocal3(v,vt,lh);
	lh = Val_unit;
	v = Val_unit;

	/* Appending C_void should have no effect */
	if( !Is_block(elt) ) return lst;

	while( lst && Is_block(lst) ) {
	    if( v && v != Val_unit ) {
		vt = alloc_tuple(2);
		SWIG_Store_field(v,1,vt);
		v = vt;
	    } else {
		v = lh = alloc_tuple(2);
	    }
	    SWIG_Store_field(v,0,SWIG_Field(lst,0));
	    lst = SWIG_Field(lst,1);
	}

	if( v && Is_block(v) ) {
	    vt = alloc_tuple(2);
	    SWIG_Store_field(v,1,vt);
	    v = vt;
	} else {
	    v = lh = alloc_tuple(2);
	}
	SWIG_Store_field(v,0,elt);
	SWIG_Store_field(v,1,Val_unit);

	CAMLreturn(lh);
    }

    SWIGSTATIC int caml_list_length( CAML_VALUE lst ) {
	CAMLparam1(lst);
	int i = 0;
	while( lst && Is_block(lst) ) { i++; lst = SWIG_Field(lst,1); }
	CAMLreturn(i);
    }

    SWIGSTATIC void caml_array_set( CAML_VALUE arr, int n, CAML_VALUE item ) {
	CAMLparam2(arr,item);
	SWIG_Store_field(SWIG_Field(arr,0),n,item);
	CAMLreturn0;
    }

    SWIGSTATIC value caml_array_nth( CAML_VALUE arr, int n ) {
	CAMLparam1(arr);
	if( SWIG_Tag_val(arr) == C_array )
	    CAMLreturn(SWIG_Field(SWIG_Field(arr,0),n));
	else if( SWIG_Tag_val(arr) == C_list )
	    CAMLreturn(caml_list_nth(arr,0));
	else
	    failwith("Need array or list");
    }

    SWIGSTATIC int caml_array_len( CAML_VALUE arr ) {
	CAMLparam1(arr);
	if( SWIG_Tag_val(arr) == C_array )
	    CAMLreturn(Wosize_val(SWIG_Field(arr,0)));
	else if( SWIG_Tag_val(arr) == C_list )
	    CAMLreturn(caml_list_length(arr));
	else
	    failwith("Need array or list");
    }

    SWIGSTATIC CAML_VALUE caml_swig_alloc(int x,int y) {
	return caml_alloc(x,y);
    }

    SWIGSTATIC value caml_array_new( int n ) {
	CAMLparam0();
	SWIG_CAMLlocal1(vv);
	vv = caml_swig_alloc(1,C_array);
	SWIG_Store_field(vv,0,alloc_tuple(n));
	CAMLreturn(vv);
    }
    
    SWIGSTATIC CAML_VALUE caml_val_bool( int b ) {
	CAMLparam0();
	SWIG_CAMLlocal1(bv);
	bv = caml_swig_alloc(1,C_bool);
	SWIG_Store_field(bv,0,Val_bool(b));
	CAMLreturn(bv);
    }

    SWIGSTATIC CAML_VALUE caml_val_char( char c ) {
	CAMLparam0();
	SWIG_CAMLlocal1(cv);
	cv = caml_swig_alloc(1,C_char);
	SWIG_Store_field(cv,0,Val_int(c));
	CAMLreturn(cv);
    }

    SWIGSTATIC CAML_VALUE caml_val_uchar( unsigned char uc ) {
	CAMLparam0();
	SWIG_CAMLlocal1(ucv);
	ucv = caml_swig_alloc(1,C_uchar);
	SWIG_Store_field(ucv,0,Val_int(uc));
	CAMLreturn(ucv);
    }

    SWIGSTATIC CAML_VALUE caml_val_short( short s ) {
	CAMLparam0();
	SWIG_CAMLlocal1(sv);
	sv = caml_swig_alloc(1,C_short);
	SWIG_Store_field(sv,0,Val_int(s));
	CAMLreturn(sv);
    }

    SWIGSTATIC CAML_VALUE caml_val_ushort( unsigned short us ) {
	CAMLparam0();
	SWIG_CAMLlocal1(usv);
	usv = caml_swig_alloc(1,C_ushort);
	SWIG_Store_field(usv,0,Val_int(us));
	CAMLreturn(usv);
    }

    SWIGSTATIC CAML_VALUE caml_val_int( int i ) {
	CAMLparam0();
	SWIG_CAMLlocal1(iv);
	iv = caml_swig_alloc(1,C_int);
	SWIG_Store_field(iv,0,Val_int(i));
	CAMLreturn(iv);
    }

    SWIGSTATIC CAML_VALUE caml_val_uint( unsigned int ui ) {
	CAMLparam0();
	SWIG_CAMLlocal1(uiv);
	uiv = caml_swig_alloc(1,C_int);
	SWIG_Store_field(uiv,0,Val_int(ui));
	CAMLreturn(uiv);
    }

    SWIGSTATIC CAML_VALUE caml_val_long( long l ) {
	CAMLparam0();
	SWIG_CAMLlocal1(lv);
	lv = caml_swig_alloc(1,C_int64);
	SWIG_Store_field(lv,0,copy_int64(l));
	CAMLreturn(lv);
    }

    SWIGSTATIC CAML_VALUE caml_val_ulong( unsigned long ul ) {
	CAMLparam0();
	SWIG_CAMLlocal1(ulv);
	ulv = caml_swig_alloc(1,C_int64);
	SWIG_Store_field(ulv,0,copy_int64(ul));
	CAMLreturn(ulv);
    }

    SWIGSTATIC CAML_VALUE caml_val_float( float f ) {
	CAMLparam0();
	SWIG_CAMLlocal1(fv);
	fv = caml_swig_alloc(1,C_float);
	SWIG_Store_field(fv,0,copy_double((double)f));
	CAMLreturn(fv);
    }

    SWIGSTATIC CAML_VALUE caml_val_double( double d ) {
	CAMLparam0();
	SWIG_CAMLlocal1(fv);
	fv = caml_swig_alloc(1,C_double);
	SWIG_Store_field(fv,0,copy_double(d));
	CAMLreturn(fv);
    }

    SWIGSTATIC CAML_VALUE caml_val_ptr( void *p, swig_type_info *info ) {
	CAMLparam0();
	SWIG_CAMLlocal1(vv);
	vv = caml_swig_alloc(2,C_ptr);
	SWIG_Store_field(vv,0,copy_int64((long)p));
	SWIG_Store_field(vv,1,copy_int64((long)info));
	CAMLreturn(vv);
    }

    SWIGSTATIC CAML_VALUE caml_val_string( const char *p ) {
	CAMLparam0();
	SWIG_CAMLlocal1(vv);
	if( !p ) CAMLreturn(caml_val_ptr( (void *)p, 0 ));
	vv = caml_swig_alloc(1,C_string);
	SWIG_Store_field(vv,0,copy_string(p));
	CAMLreturn(vv);
    }

    SWIGSTATIC CAML_VALUE caml_val_string_len( const char *p, int len ) {
	CAMLparam0();
	SWIG_CAMLlocal1(vv);
	if( !p || len < 0 ) CAMLreturn(caml_val_ptr( (void *)p, 0 ));
	vv = caml_swig_alloc(1,C_string);
	SWIG_Store_field(vv,0,alloc_string(len));
	memcpy(String_val(SWIG_Field(vv,0)),p,len);
	CAMLreturn(vv);
    }

    #define caml_val_obj(v, name) caml_val_obj_helper(v, SWIG_TypeQuery((name)), name)
    SWIGSTATIC CAML_VALUE caml_val_obj_helper( void *v, swig_type_info *type, char *name) {
	CAMLparam0();
	CAMLreturn(callback2(*caml_named_value("caml_create_object_fn"),
			     caml_val_ptr(v,type),
			     copy_string(name)));
    }

    SWIGSTATIC long caml_long_val_full( CAML_VALUE v, char *name ) {
	CAMLparam1(v);
	if( !Is_block(v) ) return 0;

	switch( SWIG_Tag_val(v) ) {
	case C_bool:
	case C_char:
	case C_uchar:
	case C_short:
	case C_ushort:
	case C_int:
	    CAMLreturn(Int_val(SWIG_Field(v,0)));
	case C_uint:
	case C_int32:
	    CAMLreturn(Int32_val(SWIG_Field(v,0)));
	case C_int64:
	    CAMLreturn((long)SWIG_Int64_val(SWIG_Field(v,0)));
	case C_float:
	case C_double:
	    CAMLreturn((long)Double_val(SWIG_Field(v,0)));
	case C_string:
	    CAMLreturn((long)String_val(SWIG_Field(v,0)));
	case C_ptr:
	    CAMLreturn((long)SWIG_Int64_val(SWIG_Field(SWIG_Field(v,0),0)));
	case C_enum: {
	    SWIG_CAMLlocal1(ret);
	    CAML_VALUE *enum_to_int = caml_named_value(SWIG_MODULE "_enum_to_int");
	    if( !name ) failwith( "Not an enum conversion" );
	    ret = callback2(*enum_to_int,*caml_named_value(name),v);
	    CAMLreturn(caml_long_val(ret));
	}
	default:
	    failwith("No conversion to int");
	}
    }

    SWIGSTATIC long caml_long_val( CAML_VALUE v ) {
	return caml_long_val_full(v,0);
    }

    SWIGSTATIC double caml_double_val( CAML_VALUE v ) {
	CAMLparam1(v);
	if( !Is_block(v) ) return 0.0;
	switch( SWIG_Tag_val(v) ) {
	case C_bool:
	case C_char:
	case C_uchar:
	case C_short:
	case C_ushort:
	case C_int:
	    CAMLreturn(Int_val(SWIG_Field(v,0)));
	case C_uint:
	case C_int32:
	    CAMLreturn(Int32_val(SWIG_Field(v,0)));
	case C_int64:
	    CAMLreturn(SWIG_Int64_val(SWIG_Field(v,0)));
	case C_float:
	case C_double:
	    CAMLreturn(Double_val(SWIG_Field(v,0)));
	default:
	    fprintf( stderr, "Unknown block tag %d\n", SWIG_Tag_val(v) );
	    failwith("No conversion to double");
	}
    }

    SWIGSTATIC int caml_ptr_val_internal( CAML_VALUE v, void **out, 
					  swig_type_info *descriptor ) {
	CAMLparam1(v);
	void *outptr = NULL;
        swig_type_info *outdescr = NULL;

	if( v == Val_unit ) {
	    *out = 0;
	    CAMLreturn(0);
	}
	if( !Is_block(v) ) return -1;
	switch( SWIG_Tag_val(v) ) {
	case C_int:
	    if( !caml_long_val( v ) ) {
		*out = 0;
		CAMLreturn(0);
	    } else {
		*out = 0;
		CAMLreturn(1);
	    }
	    break;
	case C_obj:
	    CAMLreturn
		(caml_ptr_val_internal
		 (callback(*caml_named_value("caml_obj_ptr"),v),
		  out,descriptor));
	case C_string:
	    outptr = (void *)String_val(SWIG_Field(v,0));
	    break;
	case C_ptr:
	    outptr = (void *)(long)SWIG_Int64_val(SWIG_Field(v,0));
            outdescr = (swig_type_info *)(long)SWIG_Int64_val(SWIG_Field(v,1));
	    break;
	default:
	    *out = 0;
	    CAMLreturn(1);
	    break;
	}
	
	CAMLreturn(SWIG_GetPtr(outptr,out,outdescr,descriptor));
    }

    SWIGSTATIC void *caml_ptr_val( CAML_VALUE v, swig_type_info *descriptor ) {
	CAMLparam0();
#ifdef TYPE_CAST_VERBOSE
	caml_print_val( v );
#endif
	void *out = NULL;
	if( !caml_ptr_val_internal( v, &out, descriptor ) )
	    CAMLreturn(out);
	else
	    failwith( "No appropriate conversion found." );
    }

    SWIGSTATIC char *caml_string_val( CAML_VALUE v ) {
	return (char *)caml_ptr_val( v, 0 );
    }

    SWIGSTATIC int caml_string_len( CAML_VALUE v ) {
	switch( SWIG_Tag_val(v) ) {
	case C_string:
	    return string_length(SWIG_Field(v,0));
	default:
	    return strlen((char *)caml_ptr_val(v,0));
	}
    }

    SWIGSTATIC int caml_bool_check( CAML_VALUE v ) {
	CAMLparam1(v);
	
	if( !Is_block(v) ) return 0;
	
	switch( SWIG_Tag_val(v) ) {
	case C_bool:
	case C_ptr:
	case C_string:
	    CAMLreturn(1);
	default:
	    CAMLreturn(0);
	}
    }

    SWIGSTATIC int caml_int_check( CAML_VALUE v ) {
	CAMLparam1(v);
	
	if( !Is_block(v) ) return 0;
	
	switch( SWIG_Tag_val(v) ) {
	case C_char:
	case C_uchar:
	case C_short:
	case C_ushort:
	case C_int:
	case C_uint:
	case C_int32:
	case C_int64:
	    CAMLreturn(1);

	default:
	    CAMLreturn(0);
	}
    }

    SWIGSTATIC int caml_float_check( CAML_VALUE v ) {
	CAMLparam1(v);
	if( !Is_block(v) ) return 0;

	switch( SWIG_Tag_val(v) ) {
	case C_float:
	case C_double:
	    CAMLreturn(1);

	default:
	    CAMLreturn(0);
	}	
    }

    SWIGSTATIC int caml_ptr_check( CAML_VALUE v ) {
	CAMLparam1(v);
	if( !Is_block(v) ) return 0;

	switch( SWIG_Tag_val(v) ) {
	case C_string:
	case C_ptr:
	case C_int64:
	    CAMLreturn(1);

	default:
	    CAMLreturn(0);
	}	
    }

    static swig_module_info *SWIG_Ocaml_GetModule() {
      CAML_VALUE pointer;

      pointer = callback(*caml_named_value("swig_find_type_info"), caml_val_int(0));
      if (Is_block(pointer) && SWIG_Tag_val(pointer) == C_ptr) {
        return (swig_module_info *)(void *)(long)SWIG_Int64_val(SWIG_Field(pointer,0));
      }
      return 0;
    }

    static void SWIG_Ocaml_SetModule(swig_module_info *pointer) {
      CAML_VALUE mod_pointer;

      mod_pointer = caml_val_ptr(pointer, NULL);
      callback(*caml_named_value("swig_set_type_info"), mod_pointer);
    }

#ifdef __cplusplus
}
#endif
#undef value

/* ocaml keywords */
/* There's no need to use this, because of my rewriting machinery.  C++
 * words never collide with ocaml keywords */
//%include "ocamlkw.swg"


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Agedge_t swig_types[0]
#define SWIGTYPE_p_Agnode_t swig_types[1]
#define SWIGTYPE_p_Agraph_t swig_types[2]
#define SWIGTYPE_p_Agsym_t swig_types[3]
#define SWIGTYPE_p_FILE swig_types[4]
#define SWIGTYPE_p_p_void swig_types[5]
static swig_type_info *swig_types[7];
static swig_module_info swig_module = {swig_types, 6, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */


#define  SWIG_MemoryError    1
#define  SWIG_IOError        2
#define  SWIG_RuntimeError   3
#define  SWIG_IndexError     4
#define  SWIG_TypeError      5
#define  SWIG_DivisionByZero 6
#define  SWIG_OverflowError  7
#define  SWIG_SyntaxError    8
#define  SWIG_ValueError     9
#define  SWIG_SystemError   10
#define  SWIG_UnknownError  99


#define OCAML_MSG_BUF_LEN 1024
SWIGINTERN void SWIG_exception_(int code, const char *msg) {
  char msg_buf[OCAML_MSG_BUF_LEN];
  sprintf( msg_buf, "Exception(%d): %s\n", code, msg );
  failwith( msg_buf );
}
#define SWIG_exception(a,b) SWIG_exception_((a),(b))


#include <stdexcept>



/* some language headers (e.g. php.h, ruby.h) leave these defined */
#undef PACKAGE_STRING
#undef PACKAGE_TARNAME
#undef PACKAGE_VERSION
#undef PACKAGE_NAME

#include "gvc.h"


/** New graphs */
/*** New empty graph */
extern Agraph_t *graph(char *name);
extern Agraph_t *digraph(char *name);
extern Agraph_t *strictgraph(char *name);
extern Agraph_t *strictdigraph(char *name);
/*** New graph from a dot-syntax string or file */
extern Agraph_t *readstring(char *string);
extern Agraph_t *read(char *filename);
extern Agraph_t *read(FILE *f);	
/*** Add new subgraph to existing graph */
extern Agraph_t *graph(Agraph_t *g, char *name);

/** New nodes */
/*** Add new node to existing graph */
extern Agnode_t *node(Agraph_t *g, char *name);

/** New edges */
/*** Add new edge between existing nodes */
extern Agedge_t *edge(Agnode_t *t, Agnode_t *h);
/*** Add a new edge between an existing tail node, and a named head node which will be induced in the graph if it doesn't already exist */
extern Agedge_t *edge(Agnode_t *t, char *hname);
/*** Add a new edge between an existing head node, and a named tail node which will be induced in the graph if it doesn't already exist */
extern Agedge_t *edge(char *tname, Agnode_t *h);
/*** Add a new edge between named tail  and head nodes which will be induced in the graph if they don't already exist */
extern Agedge_t *edge(Agraph_t *g, char *tname, char *hname);

/** Setting attribute values */
/*** Set value of named attribute of graph/node/edge - creating attribute if necessary */
extern char *setv(Agraph_t *g, char *attr, char *val);
extern char *setv(Agnode_t *n, char *attr, char *val);
extern char *setv(Agedge_t *e, char *attr, char *val);

/*** Set value of existing attribute of graph/node/edge (using attribute handle) */
extern char *setv(Agraph_t *g, Agsym_t *a, char *val);
extern char *setv(Agnode_t *n, Agsym_t *a, char *val);
extern char *setv(Agedge_t *e, Agsym_t *a, char *val);

/** Getting attribute values */
/*** Get value of named attribute of graph/node/edge */
extern char *getv(Agraph_t *g, char *attr);
extern char *getv(Agnode_t *n, char *attr);
extern char *getv(Agedge_t *e, char *attr);

/*** Get value of attribute of graph/node/edge (using attribute handle) */
extern char *getv(Agraph_t *g, Agsym_t *a);
extern char *getv(Agnode_t *n, Agsym_t *a);
extern char *getv(Agedge_t *e, Agsym_t *a);

/** Obtain names from handles */
extern char *nameof(Agraph_t *g);
extern char *nameof(Agnode_t *n);
//extern char *nameof(Agedge_t *e);
extern char *nameof(Agsym_t *a);

/** Find handles from names */
extern Agraph_t *findsubg(Agraph_t *g, char *name);
extern Agnode_t *findnode(Agraph_t *g, char *name);
extern Agedge_t *findedge(Agnode_t *t, Agnode_t *h);

/** */
extern Agsym_t *findattr(Agraph_t *g, char *name);
extern Agsym_t *findattr(Agnode_t *n, char *name);
extern Agsym_t *findattr(Agedge_t *e, char *name);

/** Misc graph navigators returning handles */
extern Agnode_t *headof(Agedge_t *e);
extern Agnode_t *tailof(Agedge_t *e);
extern Agraph_t *graphof(Agraph_t *g);
extern Agraph_t *graphof(Agedge_t *e);
extern Agraph_t *graphof(Agnode_t *n);
extern Agraph_t *rootof(Agraph_t *g);

/** Obtain handles of proto node/edge for setting default attribute values */
extern Agnode_t *protonode(Agraph_t *g);
extern Agedge_t *protoedge(Agraph_t *g);

/** Iterators */
/*** Iteration termination tests */
extern bool ok(Agraph_t *g);
extern bool ok(Agnode_t *n);
extern bool ok(Agedge_t *e);
extern bool ok(Agsym_t *a);

/*** Iterate over subgraphs of a graph */
extern Agraph_t *firstsubg(Agraph_t *g);
extern Agraph_t *nextsubg(Agraph_t *g, Agraph_t *sg);

/*** Iterate over supergraphs of a graph (obscure and rarely useful) */
extern Agraph_t *firstsupg(Agraph_t *g);
extern Agraph_t *nextsupg(Agraph_t *g, Agraph_t *sg);

/*** Iterate over edges of a graph */
extern Agedge_t *firstedge(Agraph_t *g);
extern Agedge_t *nextedge(Agraph_t *g, Agedge_t *e);

/*** Iterate over outedges of a graph */
extern Agedge_t *firstout(Agraph_t *g);
extern Agedge_t *nextout(Agraph_t *g, Agedge_t *e);

/*** Iterate over edges of a node */
extern Agedge_t *firstedge(Agnode_t *n);
extern Agedge_t *nextedge(Agnode_t *n, Agedge_t *e);

/*** Iterate over out-edges of a node */
extern Agedge_t *firstout(Agnode_t *n);
extern Agedge_t *nextout(Agnode_t *n, Agedge_t *e);

/*** Iterate over head nodes reachable from out-edges of a node */
extern Agnode_t *firsthead(Agnode_t *n);
extern Agnode_t *nexthead(Agnode_t *n, Agnode_t *h);

/*** Iterate over in-edges of a graph */
extern Agedge_t *firstin(Agraph_t *g);
extern Agedge_t *nextin(Agnode_t *n, Agedge_t *e);

/*** Iterate over in-edges of a node */
extern Agedge_t *firstin(Agnode_t *n);
extern Agedge_t *nextin(Agraph_t *g, Agedge_t *e);

/*** Iterate over tail nodes reachable from in-edges of a node */
extern Agnode_t *firsttail(Agnode_t *n);
extern Agnode_t *nexttail(Agnode_t *n, Agnode_t *t);

/*** Iterate over nodes of a graph */
extern Agnode_t *firstnode(Agraph_t *g);
extern Agnode_t *nextnode(Agraph_t *g, Agnode_t *n);

/*** Iterate over nodes of an edge */
extern Agnode_t *firstnode(Agedge_t *e);
extern Agnode_t *nextnode(Agedge_t *e, Agnode_t *n);

/*** Iterate over attributes of a graph */
extern Agsym_t *firstattr(Agraph_t *g);
extern Agsym_t *nextattr(Agraph_t *g, Agsym_t *a);

/*** Iterate over attributes of an edge */
extern Agsym_t *firstattr(Agedge_t *e);
extern Agsym_t *nextattr(Agedge_t *e, Agsym_t *a);

/*** Iterate over attributes of a node */
extern Agsym_t *firstattr(Agnode_t *n);
extern Agsym_t *nextattr(Agnode_t *n, Agsym_t *a);

/** Remove graph objects */
extern void rm(Agraph_t *g);
extern void rm(Agnode_t *n);
extern void rm(Agedge_t *e);

/** Layout */
/*** Annotate a graph with layout attributes and values using a specific layout engine */
extern void layout(Agraph_t *g, char *engine);

/** Render */
/*** Render a layout into attributes of the graph */
extern void render(Agraph_t *g); 

/*** Render a layout in a specific format */
extern void render(Agraph_t *g, char *format);
extern void render(Agraph_t *g, char *format, char *filename);
extern void render(Agraph_t *g, char *format, FILE *f);
extern void render(Agraph_t *g, char *format, void **data);

SWIGEXT CAML_VALUE _wrap_graph__SWIG_0gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    char *arg1 = (char *) 0 ;
    Agraph_t *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) char * ... */
        arg1 = (char *)caml_string_val(caml_list_nth(args,0));
    }
    result = (Agraph_t *)graph(arg1);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agraph_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agraph_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agraph_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_digraphgv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    char *arg1 = (char *) 0 ;
    Agraph_t *result;
    
    swig_result = Val_unit;
    {
        /* %typemap(in) char * ... */
        arg1 = (char *)caml_string_val(caml_list_nth(args,0));
    }
    result = (Agraph_t *)digraph(arg1);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agraph_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agraph_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agraph_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_strictgraphgv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    char *arg1 = (char *) 0 ;
    Agraph_t *result;
    
    swig_result = Val_unit;
    {
        /* %typemap(in) char * ... */
        arg1 = (char *)caml_string_val(caml_list_nth(args,0));
    }
    result = (Agraph_t *)strictgraph(arg1);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agraph_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agraph_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agraph_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_strictdigraphgv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    char *arg1 = (char *) 0 ;
    Agraph_t *result;
    
    swig_result = Val_unit;
    {
        /* %typemap(in) char * ... */
        arg1 = (char *)caml_string_val(caml_list_nth(args,0));
    }
    result = (Agraph_t *)strictdigraph(arg1);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agraph_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agraph_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agraph_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_readstringgv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    char *arg1 = (char *) 0 ;
    Agraph_t *result;
    
    swig_result = Val_unit;
    {
        /* %typemap(in) char * ... */
        arg1 = (char *)caml_string_val(caml_list_nth(args,0));
    }
    result = (Agraph_t *)readstring(arg1);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agraph_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agraph_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agraph_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_read__SWIG_0gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    char *arg1 = (char *) 0 ;
    Agraph_t *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) char * ... */
        arg1 = (char *)caml_string_val(caml_list_nth(args,0));
    }
    result = (Agraph_t *)read(arg1);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agraph_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agraph_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agraph_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_read__SWIG_1gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    FILE *arg1 = (FILE *) 0 ;
    Agraph_t *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (FILE *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_FILE);
    }
    result = (Agraph_t *)read(arg1);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agraph_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agraph_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agraph_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_readgv(CAML_VALUE args) {
    CAMLparam1(args);
    int i;
    int argc = caml_list_length(args);
    
    int _v = 0;
    CAML_VALUE *argv;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_FILE);
        }
        if (_v) {
            free(argv);
            CAMLreturn(_wrap_read__SWIG_1gv(args));
        }
    }
    if (argc == 1) {
        int _v;
        {
            if( !Is_block(argv[0]) ) _v = 0;
            else {
                switch( SWIG_Tag_val(argv[0]) ) {
                    case C_string: _v = 1; break;
                    case C_ptr: {
                        swig_type_info *typeinfo = 
                        (swig_type_info *)(long)SWIG_Int64_val(SWIG_Field(argv[0],1));
                        _v = SWIG_TypeCheck("char *",typeinfo) ||
                        SWIG_TypeCheck("signed char *",typeinfo) ||
                        SWIG_TypeCheck("unsigned char *",typeinfo) ||
                        SWIG_TypeCheck("const char *",typeinfo) ||
                        SWIG_TypeCheck("const signed char *",typeinfo) ||
                        SWIG_TypeCheck("const unsigned char *",typeinfo) ||
                        SWIG_TypeCheck("std::string",typeinfo);
                    } break;
                    default: _v = 0; break;
                }
            }    
        }
        if (_v) {
            free(argv);
            CAMLreturn(_wrap_read__SWIG_0gv(args));
        }
    }
    
    failwith("No matching function for overloaded 'read'");
}


SWIGEXT CAML_VALUE _wrap_graph__SWIG_1gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    char *arg2 = (char *) 0 ;
    Agraph_t *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agraph_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agraph_t);
    }
    {
        /* %typemap(in) char * ... */
        arg2 = (char *)caml_string_val(caml_list_nth(args,1));
    }
    result = (Agraph_t *)graph(arg1,arg2);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agraph_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agraph_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agraph_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_graphgv(CAML_VALUE args) {
    CAMLparam1(args);
    int i;
    int argc = caml_list_length(args);
    
    int _v = 0;
    CAML_VALUE *argv;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    if (argc == 1) {
        int _v;
        {
            if( !Is_block(argv[0]) ) _v = 0;
            else {
                switch( SWIG_Tag_val(argv[0]) ) {
                    case C_string: _v = 1; break;
                    case C_ptr: {
                        swig_type_info *typeinfo = 
                        (swig_type_info *)(long)SWIG_Int64_val(SWIG_Field(argv[0],1));
                        _v = SWIG_TypeCheck("char *",typeinfo) ||
                        SWIG_TypeCheck("signed char *",typeinfo) ||
                        SWIG_TypeCheck("unsigned char *",typeinfo) ||
                        SWIG_TypeCheck("const char *",typeinfo) ||
                        SWIG_TypeCheck("const signed char *",typeinfo) ||
                        SWIG_TypeCheck("const unsigned char *",typeinfo) ||
                        SWIG_TypeCheck("std::string",typeinfo);
                    } break;
                    default: _v = 0; break;
                }
            }    
        }
        if (_v) {
            free(argv);
            CAMLreturn(_wrap_graph__SWIG_0gv(args));
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agraph_t);
        }
        if (_v) {
            {
                if( !Is_block(argv[1]) ) _v = 0;
                else {
                    switch( SWIG_Tag_val(argv[1]) ) {
                        case C_string: _v = 1; break;
                        case C_ptr: {
                            swig_type_info *typeinfo = 
                            (swig_type_info *)(long)SWIG_Int64_val(SWIG_Field(argv[1],1));
                            _v = SWIG_TypeCheck("char *",typeinfo) ||
                            SWIG_TypeCheck("signed char *",typeinfo) ||
                            SWIG_TypeCheck("unsigned char *",typeinfo) ||
                            SWIG_TypeCheck("const char *",typeinfo) ||
                            SWIG_TypeCheck("const signed char *",typeinfo) ||
                            SWIG_TypeCheck("const unsigned char *",typeinfo) ||
                            SWIG_TypeCheck("std::string",typeinfo);
                        } break;
                        default: _v = 0; break;
                    }
                }    
            }
            if (_v) {
                free(argv);
                CAMLreturn(_wrap_graph__SWIG_1gv(args));
            }
        }
    }
    
    failwith("No matching function for overloaded 'graph'");
}


SWIGEXT CAML_VALUE _wrap_nodegv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    char *arg2 = (char *) 0 ;
    Agnode_t *result;
    
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agraph_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agraph_t);
    }
    {
        /* %typemap(in) char * ... */
        arg2 = (char *)caml_string_val(caml_list_nth(args,1));
    }
    result = (Agnode_t *)node(arg1,arg2);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agnode_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agnode_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agnode_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_edge__SWIG_0gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agnode_t *arg2 = (Agnode_t *) 0 ;
    Agedge_t *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agnode_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agnode_t);
    }
    {
        /* %typemap(in) SWIGTYPE * */
        arg2 = (Agnode_t *)caml_ptr_val(caml_list_nth(args,1),SWIGTYPE_p_Agnode_t);
    }
    result = (Agedge_t *)edge(arg1,arg2);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agedge_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agedge_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agedge_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_edge__SWIG_1gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    char *arg2 = (char *) 0 ;
    Agedge_t *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agnode_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agnode_t);
    }
    {
        /* %typemap(in) char * ... */
        arg2 = (char *)caml_string_val(caml_list_nth(args,1));
    }
    result = (Agedge_t *)edge(arg1,arg2);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agedge_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agedge_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agedge_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_edge__SWIG_2gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    char *arg1 = (char *) 0 ;
    Agnode_t *arg2 = (Agnode_t *) 0 ;
    Agedge_t *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) char * ... */
        arg1 = (char *)caml_string_val(caml_list_nth(args,0));
    }
    {
        /* %typemap(in) SWIGTYPE * */
        arg2 = (Agnode_t *)caml_ptr_val(caml_list_nth(args,1),SWIGTYPE_p_Agnode_t);
    }
    result = (Agedge_t *)edge(arg1,arg2);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agedge_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agedge_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agedge_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_edge__SWIG_3gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    Agedge_t *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agraph_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agraph_t);
    }
    {
        /* %typemap(in) char * ... */
        arg2 = (char *)caml_string_val(caml_list_nth(args,1));
    }
    {
        /* %typemap(in) char * ... */
        arg3 = (char *)caml_string_val(caml_list_nth(args,2));
    }
    result = (Agedge_t *)edge(arg1,arg2,arg3);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agedge_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agedge_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agedge_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_edgegv(CAML_VALUE args) {
    CAMLparam1(args);
    int i;
    int argc = caml_list_length(args);
    
    int _v = 0;
    CAML_VALUE *argv;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agnode_t);
        }
        if (_v) {
            {
                void *ptr;
                _v = !caml_ptr_val_internal(argv[1], &ptr,SWIGTYPE_p_Agnode_t);
            }
            if (_v) {
                free(argv);
                CAMLreturn(_wrap_edge__SWIG_0gv(args));
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agnode_t);
        }
        if (_v) {
            {
                if( !Is_block(argv[1]) ) _v = 0;
                else {
                    switch( SWIG_Tag_val(argv[1]) ) {
                        case C_string: _v = 1; break;
                        case C_ptr: {
                            swig_type_info *typeinfo = 
                            (swig_type_info *)(long)SWIG_Int64_val(SWIG_Field(argv[1],1));
                            _v = SWIG_TypeCheck("char *",typeinfo) ||
                            SWIG_TypeCheck("signed char *",typeinfo) ||
                            SWIG_TypeCheck("unsigned char *",typeinfo) ||
                            SWIG_TypeCheck("const char *",typeinfo) ||
                            SWIG_TypeCheck("const signed char *",typeinfo) ||
                            SWIG_TypeCheck("const unsigned char *",typeinfo) ||
                            SWIG_TypeCheck("std::string",typeinfo);
                        } break;
                        default: _v = 0; break;
                    }
                }    
            }
            if (_v) {
                free(argv);
                CAMLreturn(_wrap_edge__SWIG_1gv(args));
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            if( !Is_block(argv[0]) ) _v = 0;
            else {
                switch( SWIG_Tag_val(argv[0]) ) {
                    case C_string: _v = 1; break;
                    case C_ptr: {
                        swig_type_info *typeinfo = 
                        (swig_type_info *)(long)SWIG_Int64_val(SWIG_Field(argv[0],1));
                        _v = SWIG_TypeCheck("char *",typeinfo) ||
                        SWIG_TypeCheck("signed char *",typeinfo) ||
                        SWIG_TypeCheck("unsigned char *",typeinfo) ||
                        SWIG_TypeCheck("const char *",typeinfo) ||
                        SWIG_TypeCheck("const signed char *",typeinfo) ||
                        SWIG_TypeCheck("const unsigned char *",typeinfo) ||
                        SWIG_TypeCheck("std::string",typeinfo);
                    } break;
                    default: _v = 0; break;
                }
            }    
        }
        if (_v) {
            {
                void *ptr;
                _v = !caml_ptr_val_internal(argv[1], &ptr,SWIGTYPE_p_Agnode_t);
            }
            if (_v) {
                free(argv);
                CAMLreturn(_wrap_edge__SWIG_2gv(args));
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agraph_t);
        }
        if (_v) {
            {
                if( !Is_block(argv[1]) ) _v = 0;
                else {
                    switch( SWIG_Tag_val(argv[1]) ) {
                        case C_string: _v = 1; break;
                        case C_ptr: {
                            swig_type_info *typeinfo = 
                            (swig_type_info *)(long)SWIG_Int64_val(SWIG_Field(argv[1],1));
                            _v = SWIG_TypeCheck("char *",typeinfo) ||
                            SWIG_TypeCheck("signed char *",typeinfo) ||
                            SWIG_TypeCheck("unsigned char *",typeinfo) ||
                            SWIG_TypeCheck("const char *",typeinfo) ||
                            SWIG_TypeCheck("const signed char *",typeinfo) ||
                            SWIG_TypeCheck("const unsigned char *",typeinfo) ||
                            SWIG_TypeCheck("std::string",typeinfo);
                        } break;
                        default: _v = 0; break;
                    }
                }    
            }
            if (_v) {
                {
                    if( !Is_block(argv[2]) ) _v = 0;
                    else {
                        switch( SWIG_Tag_val(argv[2]) ) {
                            case C_string: _v = 1; break;
                            case C_ptr: {
                                swig_type_info *typeinfo = 
                                (swig_type_info *)(long)SWIG_Int64_val(SWIG_Field(argv[2],1));
                                _v = SWIG_TypeCheck("char *",typeinfo) ||
                                SWIG_TypeCheck("signed char *",typeinfo) ||
                                SWIG_TypeCheck("unsigned char *",typeinfo) ||
                                SWIG_TypeCheck("const char *",typeinfo) ||
                                SWIG_TypeCheck("const signed char *",typeinfo) ||
                                SWIG_TypeCheck("const unsigned char *",typeinfo) ||
                                SWIG_TypeCheck("std::string",typeinfo);
                            } break;
                            default: _v = 0; break;
                        }
                    }    
                }
                if (_v) {
                    free(argv);
                    CAMLreturn(_wrap_edge__SWIG_3gv(args));
                }
            }
        }
    }
    
    failwith("No matching function for overloaded 'edge'");
}


SWIGEXT CAML_VALUE _wrap_setv__SWIG_0gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    char *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agraph_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agraph_t);
    }
    {
        /* %typemap(in) char * ... */
        arg2 = (char *)caml_string_val(caml_list_nth(args,1));
    }
    {
        /* %typemap(in) char * ... */
        arg3 = (char *)caml_string_val(caml_list_nth(args,2));
    }
    result = (char *)setv(arg1,arg2,arg3);
    
    {
        rv = caml_val_string((char *)result);
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_setv__SWIG_1gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    char *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agnode_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agnode_t);
    }
    {
        /* %typemap(in) char * ... */
        arg2 = (char *)caml_string_val(caml_list_nth(args,1));
    }
    {
        /* %typemap(in) char * ... */
        arg3 = (char *)caml_string_val(caml_list_nth(args,2));
    }
    result = (char *)setv(arg1,arg2,arg3);
    
    {
        rv = caml_val_string((char *)result);
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_setv__SWIG_2gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agedge_t *arg1 = (Agedge_t *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    char *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agedge_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agedge_t);
    }
    {
        /* %typemap(in) char * ... */
        arg2 = (char *)caml_string_val(caml_list_nth(args,1));
    }
    {
        /* %typemap(in) char * ... */
        arg3 = (char *)caml_string_val(caml_list_nth(args,2));
    }
    result = (char *)setv(arg1,arg2,arg3);
    
    {
        rv = caml_val_string((char *)result);
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_setv__SWIG_3gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agsym_t *arg2 = (Agsym_t *) 0 ;
    char *arg3 = (char *) 0 ;
    char *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agraph_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agraph_t);
    }
    {
        /* %typemap(in) SWIGTYPE * */
        arg2 = (Agsym_t *)caml_ptr_val(caml_list_nth(args,1),SWIGTYPE_p_Agsym_t);
    }
    {
        /* %typemap(in) char * ... */
        arg3 = (char *)caml_string_val(caml_list_nth(args,2));
    }
    result = (char *)setv(arg1,arg2,arg3);
    
    {
        rv = caml_val_string((char *)result);
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_setv__SWIG_4gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agsym_t *arg2 = (Agsym_t *) 0 ;
    char *arg3 = (char *) 0 ;
    char *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agnode_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agnode_t);
    }
    {
        /* %typemap(in) SWIGTYPE * */
        arg2 = (Agsym_t *)caml_ptr_val(caml_list_nth(args,1),SWIGTYPE_p_Agsym_t);
    }
    {
        /* %typemap(in) char * ... */
        arg3 = (char *)caml_string_val(caml_list_nth(args,2));
    }
    result = (char *)setv(arg1,arg2,arg3);
    
    {
        rv = caml_val_string((char *)result);
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_setv__SWIG_5gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agedge_t *arg1 = (Agedge_t *) 0 ;
    Agsym_t *arg2 = (Agsym_t *) 0 ;
    char *arg3 = (char *) 0 ;
    char *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agedge_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agedge_t);
    }
    {
        /* %typemap(in) SWIGTYPE * */
        arg2 = (Agsym_t *)caml_ptr_val(caml_list_nth(args,1),SWIGTYPE_p_Agsym_t);
    }
    {
        /* %typemap(in) char * ... */
        arg3 = (char *)caml_string_val(caml_list_nth(args,2));
    }
    result = (char *)setv(arg1,arg2,arg3);
    
    {
        rv = caml_val_string((char *)result);
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_setvgv(CAML_VALUE args) {
    CAMLparam1(args);
    int i;
    int argc = caml_list_length(args);
    
    int _v = 0;
    CAML_VALUE *argv;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agraph_t);
        }
        if (_v) {
            {
                void *ptr;
                _v = !caml_ptr_val_internal(argv[1], &ptr,SWIGTYPE_p_Agsym_t);
            }
            if (_v) {
                {
                    if( !Is_block(argv[2]) ) _v = 0;
                    else {
                        switch( SWIG_Tag_val(argv[2]) ) {
                            case C_string: _v = 1; break;
                            case C_ptr: {
                                swig_type_info *typeinfo = 
                                (swig_type_info *)(long)SWIG_Int64_val(SWIG_Field(argv[2],1));
                                _v = SWIG_TypeCheck("char *",typeinfo) ||
                                SWIG_TypeCheck("signed char *",typeinfo) ||
                                SWIG_TypeCheck("unsigned char *",typeinfo) ||
                                SWIG_TypeCheck("const char *",typeinfo) ||
                                SWIG_TypeCheck("const signed char *",typeinfo) ||
                                SWIG_TypeCheck("const unsigned char *",typeinfo) ||
                                SWIG_TypeCheck("std::string",typeinfo);
                            } break;
                            default: _v = 0; break;
                        }
                    }    
                }
                if (_v) {
                    free(argv);
                    CAMLreturn(_wrap_setv__SWIG_3gv(args));
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agnode_t);
        }
        if (_v) {
            {
                void *ptr;
                _v = !caml_ptr_val_internal(argv[1], &ptr,SWIGTYPE_p_Agsym_t);
            }
            if (_v) {
                {
                    if( !Is_block(argv[2]) ) _v = 0;
                    else {
                        switch( SWIG_Tag_val(argv[2]) ) {
                            case C_string: _v = 1; break;
                            case C_ptr: {
                                swig_type_info *typeinfo = 
                                (swig_type_info *)(long)SWIG_Int64_val(SWIG_Field(argv[2],1));
                                _v = SWIG_TypeCheck("char *",typeinfo) ||
                                SWIG_TypeCheck("signed char *",typeinfo) ||
                                SWIG_TypeCheck("unsigned char *",typeinfo) ||
                                SWIG_TypeCheck("const char *",typeinfo) ||
                                SWIG_TypeCheck("const signed char *",typeinfo) ||
                                SWIG_TypeCheck("const unsigned char *",typeinfo) ||
                                SWIG_TypeCheck("std::string",typeinfo);
                            } break;
                            default: _v = 0; break;
                        }
                    }    
                }
                if (_v) {
                    free(argv);
                    CAMLreturn(_wrap_setv__SWIG_4gv(args));
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agedge_t);
        }
        if (_v) {
            {
                void *ptr;
                _v = !caml_ptr_val_internal(argv[1], &ptr,SWIGTYPE_p_Agsym_t);
            }
            if (_v) {
                {
                    if( !Is_block(argv[2]) ) _v = 0;
                    else {
                        switch( SWIG_Tag_val(argv[2]) ) {
                            case C_string: _v = 1; break;
                            case C_ptr: {
                                swig_type_info *typeinfo = 
                                (swig_type_info *)(long)SWIG_Int64_val(SWIG_Field(argv[2],1));
                                _v = SWIG_TypeCheck("char *",typeinfo) ||
                                SWIG_TypeCheck("signed char *",typeinfo) ||
                                SWIG_TypeCheck("unsigned char *",typeinfo) ||
                                SWIG_TypeCheck("const char *",typeinfo) ||
                                SWIG_TypeCheck("const signed char *",typeinfo) ||
                                SWIG_TypeCheck("const unsigned char *",typeinfo) ||
                                SWIG_TypeCheck("std::string",typeinfo);
                            } break;
                            default: _v = 0; break;
                        }
                    }    
                }
                if (_v) {
                    free(argv);
                    CAMLreturn(_wrap_setv__SWIG_5gv(args));
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agraph_t);
        }
        if (_v) {
            {
                if( !Is_block(argv[1]) ) _v = 0;
                else {
                    switch( SWIG_Tag_val(argv[1]) ) {
                        case C_string: _v = 1; break;
                        case C_ptr: {
                            swig_type_info *typeinfo = 
                            (swig_type_info *)(long)SWIG_Int64_val(SWIG_Field(argv[1],1));
                            _v = SWIG_TypeCheck("char *",typeinfo) ||
                            SWIG_TypeCheck("signed char *",typeinfo) ||
                            SWIG_TypeCheck("unsigned char *",typeinfo) ||
                            SWIG_TypeCheck("const char *",typeinfo) ||
                            SWIG_TypeCheck("const signed char *",typeinfo) ||
                            SWIG_TypeCheck("const unsigned char *",typeinfo) ||
                            SWIG_TypeCheck("std::string",typeinfo);
                        } break;
                        default: _v = 0; break;
                    }
                }    
            }
            if (_v) {
                {
                    if( !Is_block(argv[2]) ) _v = 0;
                    else {
                        switch( SWIG_Tag_val(argv[2]) ) {
                            case C_string: _v = 1; break;
                            case C_ptr: {
                                swig_type_info *typeinfo = 
                                (swig_type_info *)(long)SWIG_Int64_val(SWIG_Field(argv[2],1));
                                _v = SWIG_TypeCheck("char *",typeinfo) ||
                                SWIG_TypeCheck("signed char *",typeinfo) ||
                                SWIG_TypeCheck("unsigned char *",typeinfo) ||
                                SWIG_TypeCheck("const char *",typeinfo) ||
                                SWIG_TypeCheck("const signed char *",typeinfo) ||
                                SWIG_TypeCheck("const unsigned char *",typeinfo) ||
                                SWIG_TypeCheck("std::string",typeinfo);
                            } break;
                            default: _v = 0; break;
                        }
                    }    
                }
                if (_v) {
                    free(argv);
                    CAMLreturn(_wrap_setv__SWIG_0gv(args));
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agnode_t);
        }
        if (_v) {
            {
                if( !Is_block(argv[1]) ) _v = 0;
                else {
                    switch( SWIG_Tag_val(argv[1]) ) {
                        case C_string: _v = 1; break;
                        case C_ptr: {
                            swig_type_info *typeinfo = 
                            (swig_type_info *)(long)SWIG_Int64_val(SWIG_Field(argv[1],1));
                            _v = SWIG_TypeCheck("char *",typeinfo) ||
                            SWIG_TypeCheck("signed char *",typeinfo) ||
                            SWIG_TypeCheck("unsigned char *",typeinfo) ||
                            SWIG_TypeCheck("const char *",typeinfo) ||
                            SWIG_TypeCheck("const signed char *",typeinfo) ||
                            SWIG_TypeCheck("const unsigned char *",typeinfo) ||
                            SWIG_TypeCheck("std::string",typeinfo);
                        } break;
                        default: _v = 0; break;
                    }
                }    
            }
            if (_v) {
                {
                    if( !Is_block(argv[2]) ) _v = 0;
                    else {
                        switch( SWIG_Tag_val(argv[2]) ) {
                            case C_string: _v = 1; break;
                            case C_ptr: {
                                swig_type_info *typeinfo = 
                                (swig_type_info *)(long)SWIG_Int64_val(SWIG_Field(argv[2],1));
                                _v = SWIG_TypeCheck("char *",typeinfo) ||
                                SWIG_TypeCheck("signed char *",typeinfo) ||
                                SWIG_TypeCheck("unsigned char *",typeinfo) ||
                                SWIG_TypeCheck("const char *",typeinfo) ||
                                SWIG_TypeCheck("const signed char *",typeinfo) ||
                                SWIG_TypeCheck("const unsigned char *",typeinfo) ||
                                SWIG_TypeCheck("std::string",typeinfo);
                            } break;
                            default: _v = 0; break;
                        }
                    }    
                }
                if (_v) {
                    free(argv);
                    CAMLreturn(_wrap_setv__SWIG_1gv(args));
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agedge_t);
        }
        if (_v) {
            {
                if( !Is_block(argv[1]) ) _v = 0;
                else {
                    switch( SWIG_Tag_val(argv[1]) ) {
                        case C_string: _v = 1; break;
                        case C_ptr: {
                            swig_type_info *typeinfo = 
                            (swig_type_info *)(long)SWIG_Int64_val(SWIG_Field(argv[1],1));
                            _v = SWIG_TypeCheck("char *",typeinfo) ||
                            SWIG_TypeCheck("signed char *",typeinfo) ||
                            SWIG_TypeCheck("unsigned char *",typeinfo) ||
                            SWIG_TypeCheck("const char *",typeinfo) ||
                            SWIG_TypeCheck("const signed char *",typeinfo) ||
                            SWIG_TypeCheck("const unsigned char *",typeinfo) ||
                            SWIG_TypeCheck("std::string",typeinfo);
                        } break;
                        default: _v = 0; break;
                    }
                }    
            }
            if (_v) {
                {
                    if( !Is_block(argv[2]) ) _v = 0;
                    else {
                        switch( SWIG_Tag_val(argv[2]) ) {
                            case C_string: _v = 1; break;
                            case C_ptr: {
                                swig_type_info *typeinfo = 
                                (swig_type_info *)(long)SWIG_Int64_val(SWIG_Field(argv[2],1));
                                _v = SWIG_TypeCheck("char *",typeinfo) ||
                                SWIG_TypeCheck("signed char *",typeinfo) ||
                                SWIG_TypeCheck("unsigned char *",typeinfo) ||
                                SWIG_TypeCheck("const char *",typeinfo) ||
                                SWIG_TypeCheck("const signed char *",typeinfo) ||
                                SWIG_TypeCheck("const unsigned char *",typeinfo) ||
                                SWIG_TypeCheck("std::string",typeinfo);
                            } break;
                            default: _v = 0; break;
                        }
                    }    
                }
                if (_v) {
                    free(argv);
                    CAMLreturn(_wrap_setv__SWIG_2gv(args));
                }
            }
        }
    }
    
    failwith("No matching function for overloaded 'setv'");
}


SWIGEXT CAML_VALUE _wrap_getv__SWIG_0gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    char *arg2 = (char *) 0 ;
    char *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agraph_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agraph_t);
    }
    {
        /* %typemap(in) char * ... */
        arg2 = (char *)caml_string_val(caml_list_nth(args,1));
    }
    result = (char *)getv(arg1,arg2);
    
    {
        rv = caml_val_string((char *)result);
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_getv__SWIG_1gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    char *arg2 = (char *) 0 ;
    char *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agnode_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agnode_t);
    }
    {
        /* %typemap(in) char * ... */
        arg2 = (char *)caml_string_val(caml_list_nth(args,1));
    }
    result = (char *)getv(arg1,arg2);
    
    {
        rv = caml_val_string((char *)result);
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_getv__SWIG_2gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agedge_t *arg1 = (Agedge_t *) 0 ;
    char *arg2 = (char *) 0 ;
    char *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agedge_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agedge_t);
    }
    {
        /* %typemap(in) char * ... */
        arg2 = (char *)caml_string_val(caml_list_nth(args,1));
    }
    result = (char *)getv(arg1,arg2);
    
    {
        rv = caml_val_string((char *)result);
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_getv__SWIG_3gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agsym_t *arg2 = (Agsym_t *) 0 ;
    char *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agraph_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agraph_t);
    }
    {
        /* %typemap(in) SWIGTYPE * */
        arg2 = (Agsym_t *)caml_ptr_val(caml_list_nth(args,1),SWIGTYPE_p_Agsym_t);
    }
    result = (char *)getv(arg1,arg2);
    
    {
        rv = caml_val_string((char *)result);
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_getv__SWIG_4gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agsym_t *arg2 = (Agsym_t *) 0 ;
    char *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agnode_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agnode_t);
    }
    {
        /* %typemap(in) SWIGTYPE * */
        arg2 = (Agsym_t *)caml_ptr_val(caml_list_nth(args,1),SWIGTYPE_p_Agsym_t);
    }
    result = (char *)getv(arg1,arg2);
    
    {
        rv = caml_val_string((char *)result);
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_getv__SWIG_5gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agedge_t *arg1 = (Agedge_t *) 0 ;
    Agsym_t *arg2 = (Agsym_t *) 0 ;
    char *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agedge_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agedge_t);
    }
    {
        /* %typemap(in) SWIGTYPE * */
        arg2 = (Agsym_t *)caml_ptr_val(caml_list_nth(args,1),SWIGTYPE_p_Agsym_t);
    }
    result = (char *)getv(arg1,arg2);
    
    {
        rv = caml_val_string((char *)result);
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_getvgv(CAML_VALUE args) {
    CAMLparam1(args);
    int i;
    int argc = caml_list_length(args);
    
    int _v = 0;
    CAML_VALUE *argv;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agraph_t);
        }
        if (_v) {
            {
                void *ptr;
                _v = !caml_ptr_val_internal(argv[1], &ptr,SWIGTYPE_p_Agsym_t);
            }
            if (_v) {
                free(argv);
                CAMLreturn(_wrap_getv__SWIG_3gv(args));
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agnode_t);
        }
        if (_v) {
            {
                void *ptr;
                _v = !caml_ptr_val_internal(argv[1], &ptr,SWIGTYPE_p_Agsym_t);
            }
            if (_v) {
                free(argv);
                CAMLreturn(_wrap_getv__SWIG_4gv(args));
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agedge_t);
        }
        if (_v) {
            {
                void *ptr;
                _v = !caml_ptr_val_internal(argv[1], &ptr,SWIGTYPE_p_Agsym_t);
            }
            if (_v) {
                free(argv);
                CAMLreturn(_wrap_getv__SWIG_5gv(args));
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agraph_t);
        }
        if (_v) {
            {
                if( !Is_block(argv[1]) ) _v = 0;
                else {
                    switch( SWIG_Tag_val(argv[1]) ) {
                        case C_string: _v = 1; break;
                        case C_ptr: {
                            swig_type_info *typeinfo = 
                            (swig_type_info *)(long)SWIG_Int64_val(SWIG_Field(argv[1],1));
                            _v = SWIG_TypeCheck("char *",typeinfo) ||
                            SWIG_TypeCheck("signed char *",typeinfo) ||
                            SWIG_TypeCheck("unsigned char *",typeinfo) ||
                            SWIG_TypeCheck("const char *",typeinfo) ||
                            SWIG_TypeCheck("const signed char *",typeinfo) ||
                            SWIG_TypeCheck("const unsigned char *",typeinfo) ||
                            SWIG_TypeCheck("std::string",typeinfo);
                        } break;
                        default: _v = 0; break;
                    }
                }    
            }
            if (_v) {
                free(argv);
                CAMLreturn(_wrap_getv__SWIG_0gv(args));
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agnode_t);
        }
        if (_v) {
            {
                if( !Is_block(argv[1]) ) _v = 0;
                else {
                    switch( SWIG_Tag_val(argv[1]) ) {
                        case C_string: _v = 1; break;
                        case C_ptr: {
                            swig_type_info *typeinfo = 
                            (swig_type_info *)(long)SWIG_Int64_val(SWIG_Field(argv[1],1));
                            _v = SWIG_TypeCheck("char *",typeinfo) ||
                            SWIG_TypeCheck("signed char *",typeinfo) ||
                            SWIG_TypeCheck("unsigned char *",typeinfo) ||
                            SWIG_TypeCheck("const char *",typeinfo) ||
                            SWIG_TypeCheck("const signed char *",typeinfo) ||
                            SWIG_TypeCheck("const unsigned char *",typeinfo) ||
                            SWIG_TypeCheck("std::string",typeinfo);
                        } break;
                        default: _v = 0; break;
                    }
                }    
            }
            if (_v) {
                free(argv);
                CAMLreturn(_wrap_getv__SWIG_1gv(args));
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agedge_t);
        }
        if (_v) {
            {
                if( !Is_block(argv[1]) ) _v = 0;
                else {
                    switch( SWIG_Tag_val(argv[1]) ) {
                        case C_string: _v = 1; break;
                        case C_ptr: {
                            swig_type_info *typeinfo = 
                            (swig_type_info *)(long)SWIG_Int64_val(SWIG_Field(argv[1],1));
                            _v = SWIG_TypeCheck("char *",typeinfo) ||
                            SWIG_TypeCheck("signed char *",typeinfo) ||
                            SWIG_TypeCheck("unsigned char *",typeinfo) ||
                            SWIG_TypeCheck("const char *",typeinfo) ||
                            SWIG_TypeCheck("const signed char *",typeinfo) ||
                            SWIG_TypeCheck("const unsigned char *",typeinfo) ||
                            SWIG_TypeCheck("std::string",typeinfo);
                        } break;
                        default: _v = 0; break;
                    }
                }    
            }
            if (_v) {
                free(argv);
                CAMLreturn(_wrap_getv__SWIG_2gv(args));
            }
        }
    }
    
    failwith("No matching function for overloaded 'getv'");
}


SWIGEXT CAML_VALUE _wrap_nameof__SWIG_0gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    char *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agraph_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agraph_t);
    }
    result = (char *)nameof(arg1);
    
    {
        rv = caml_val_string((char *)result);
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_nameof__SWIG_1gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    char *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agnode_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agnode_t);
    }
    result = (char *)nameof(arg1);
    
    {
        rv = caml_val_string((char *)result);
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_nameof__SWIG_2gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agsym_t *arg1 = (Agsym_t *) 0 ;
    char *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agsym_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agsym_t);
    }
    result = (char *)nameof(arg1);
    
    {
        rv = caml_val_string((char *)result);
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_nameofgv(CAML_VALUE args) {
    CAMLparam1(args);
    int i;
    int argc = caml_list_length(args);
    
    int _v = 0;
    CAML_VALUE *argv;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agraph_t);
        }
        if (_v) {
            free(argv);
            CAMLreturn(_wrap_nameof__SWIG_0gv(args));
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agnode_t);
        }
        if (_v) {
            free(argv);
            CAMLreturn(_wrap_nameof__SWIG_1gv(args));
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agsym_t);
        }
        if (_v) {
            free(argv);
            CAMLreturn(_wrap_nameof__SWIG_2gv(args));
        }
    }
    
    failwith("No matching function for overloaded 'nameof'");
}


SWIGEXT CAML_VALUE _wrap_findsubggv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    char *arg2 = (char *) 0 ;
    Agraph_t *result;
    
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agraph_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agraph_t);
    }
    {
        /* %typemap(in) char * ... */
        arg2 = (char *)caml_string_val(caml_list_nth(args,1));
    }
    result = (Agraph_t *)findsubg(arg1,arg2);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agraph_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agraph_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agraph_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_findnodegv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    char *arg2 = (char *) 0 ;
    Agnode_t *result;
    
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agraph_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agraph_t);
    }
    {
        /* %typemap(in) char * ... */
        arg2 = (char *)caml_string_val(caml_list_nth(args,1));
    }
    result = (Agnode_t *)findnode(arg1,arg2);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agnode_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agnode_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agnode_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_findedgegv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agnode_t *arg2 = (Agnode_t *) 0 ;
    Agedge_t *result;
    
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agnode_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agnode_t);
    }
    {
        /* %typemap(in) SWIGTYPE * */
        arg2 = (Agnode_t *)caml_ptr_val(caml_list_nth(args,1),SWIGTYPE_p_Agnode_t);
    }
    result = (Agedge_t *)findedge(arg1,arg2);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agedge_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agedge_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agedge_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_findattr__SWIG_0gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    char *arg2 = (char *) 0 ;
    Agsym_t *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agraph_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agraph_t);
    }
    {
        /* %typemap(in) char * ... */
        arg2 = (char *)caml_string_val(caml_list_nth(args,1));
    }
    result = (Agsym_t *)findattr(arg1,arg2);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agsym_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agsym_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agsym_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_findattr__SWIG_1gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    char *arg2 = (char *) 0 ;
    Agsym_t *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agnode_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agnode_t);
    }
    {
        /* %typemap(in) char * ... */
        arg2 = (char *)caml_string_val(caml_list_nth(args,1));
    }
    result = (Agsym_t *)findattr(arg1,arg2);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agsym_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agsym_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agsym_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_findattr__SWIG_2gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agedge_t *arg1 = (Agedge_t *) 0 ;
    char *arg2 = (char *) 0 ;
    Agsym_t *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agedge_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agedge_t);
    }
    {
        /* %typemap(in) char * ... */
        arg2 = (char *)caml_string_val(caml_list_nth(args,1));
    }
    result = (Agsym_t *)findattr(arg1,arg2);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agsym_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agsym_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agsym_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_findattrgv(CAML_VALUE args) {
    CAMLparam1(args);
    int i;
    int argc = caml_list_length(args);
    
    int _v = 0;
    CAML_VALUE *argv;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agraph_t);
        }
        if (_v) {
            {
                if( !Is_block(argv[1]) ) _v = 0;
                else {
                    switch( SWIG_Tag_val(argv[1]) ) {
                        case C_string: _v = 1; break;
                        case C_ptr: {
                            swig_type_info *typeinfo = 
                            (swig_type_info *)(long)SWIG_Int64_val(SWIG_Field(argv[1],1));
                            _v = SWIG_TypeCheck("char *",typeinfo) ||
                            SWIG_TypeCheck("signed char *",typeinfo) ||
                            SWIG_TypeCheck("unsigned char *",typeinfo) ||
                            SWIG_TypeCheck("const char *",typeinfo) ||
                            SWIG_TypeCheck("const signed char *",typeinfo) ||
                            SWIG_TypeCheck("const unsigned char *",typeinfo) ||
                            SWIG_TypeCheck("std::string",typeinfo);
                        } break;
                        default: _v = 0; break;
                    }
                }    
            }
            if (_v) {
                free(argv);
                CAMLreturn(_wrap_findattr__SWIG_0gv(args));
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agnode_t);
        }
        if (_v) {
            {
                if( !Is_block(argv[1]) ) _v = 0;
                else {
                    switch( SWIG_Tag_val(argv[1]) ) {
                        case C_string: _v = 1; break;
                        case C_ptr: {
                            swig_type_info *typeinfo = 
                            (swig_type_info *)(long)SWIG_Int64_val(SWIG_Field(argv[1],1));
                            _v = SWIG_TypeCheck("char *",typeinfo) ||
                            SWIG_TypeCheck("signed char *",typeinfo) ||
                            SWIG_TypeCheck("unsigned char *",typeinfo) ||
                            SWIG_TypeCheck("const char *",typeinfo) ||
                            SWIG_TypeCheck("const signed char *",typeinfo) ||
                            SWIG_TypeCheck("const unsigned char *",typeinfo) ||
                            SWIG_TypeCheck("std::string",typeinfo);
                        } break;
                        default: _v = 0; break;
                    }
                }    
            }
            if (_v) {
                free(argv);
                CAMLreturn(_wrap_findattr__SWIG_1gv(args));
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agedge_t);
        }
        if (_v) {
            {
                if( !Is_block(argv[1]) ) _v = 0;
                else {
                    switch( SWIG_Tag_val(argv[1]) ) {
                        case C_string: _v = 1; break;
                        case C_ptr: {
                            swig_type_info *typeinfo = 
                            (swig_type_info *)(long)SWIG_Int64_val(SWIG_Field(argv[1],1));
                            _v = SWIG_TypeCheck("char *",typeinfo) ||
                            SWIG_TypeCheck("signed char *",typeinfo) ||
                            SWIG_TypeCheck("unsigned char *",typeinfo) ||
                            SWIG_TypeCheck("const char *",typeinfo) ||
                            SWIG_TypeCheck("const signed char *",typeinfo) ||
                            SWIG_TypeCheck("const unsigned char *",typeinfo) ||
                            SWIG_TypeCheck("std::string",typeinfo);
                        } break;
                        default: _v = 0; break;
                    }
                }    
            }
            if (_v) {
                free(argv);
                CAMLreturn(_wrap_findattr__SWIG_2gv(args));
            }
        }
    }
    
    failwith("No matching function for overloaded 'findattr'");
}


SWIGEXT CAML_VALUE _wrap_headofgv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    Agedge_t *arg1 = (Agedge_t *) 0 ;
    Agnode_t *result;
    
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agedge_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agedge_t);
    }
    result = (Agnode_t *)headof(arg1);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agnode_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agnode_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agnode_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_tailofgv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    Agedge_t *arg1 = (Agedge_t *) 0 ;
    Agnode_t *result;
    
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agedge_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agedge_t);
    }
    result = (Agnode_t *)tailof(arg1);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agnode_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agnode_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agnode_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_graphof__SWIG_0gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agraph_t *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agraph_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agraph_t);
    }
    result = (Agraph_t *)graphof(arg1);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agraph_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agraph_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agraph_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_graphof__SWIG_1gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agedge_t *arg1 = (Agedge_t *) 0 ;
    Agraph_t *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agedge_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agedge_t);
    }
    result = (Agraph_t *)graphof(arg1);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agraph_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agraph_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agraph_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_graphof__SWIG_2gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agraph_t *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agnode_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agnode_t);
    }
    result = (Agraph_t *)graphof(arg1);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agraph_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agraph_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agraph_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_graphofgv(CAML_VALUE args) {
    CAMLparam1(args);
    int i;
    int argc = caml_list_length(args);
    
    int _v = 0;
    CAML_VALUE *argv;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agraph_t);
        }
        if (_v) {
            free(argv);
            CAMLreturn(_wrap_graphof__SWIG_0gv(args));
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agedge_t);
        }
        if (_v) {
            free(argv);
            CAMLreturn(_wrap_graphof__SWIG_1gv(args));
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agnode_t);
        }
        if (_v) {
            free(argv);
            CAMLreturn(_wrap_graphof__SWIG_2gv(args));
        }
    }
    
    failwith("No matching function for overloaded 'graphof'");
}


SWIGEXT CAML_VALUE _wrap_rootofgv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agraph_t *result;
    
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agraph_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agraph_t);
    }
    result = (Agraph_t *)rootof(arg1);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agraph_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agraph_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agraph_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_protonodegv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agnode_t *result;
    
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agraph_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agraph_t);
    }
    result = (Agnode_t *)protonode(arg1);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agnode_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agnode_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agnode_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_protoedgegv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agedge_t *result;
    
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agraph_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agraph_t);
    }
    result = (Agedge_t *)protoedge(arg1);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agedge_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agedge_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agedge_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_ok__SWIG_0gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    bool result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agraph_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agraph_t);
    }
    result = (bool)ok(arg1);
    
    {
        rv = caml_val_bool(result);
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_ok__SWIG_1gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    bool result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agnode_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agnode_t);
    }
    result = (bool)ok(arg1);
    
    {
        rv = caml_val_bool(result);
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_ok__SWIG_2gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agedge_t *arg1 = (Agedge_t *) 0 ;
    bool result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agedge_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agedge_t);
    }
    result = (bool)ok(arg1);
    
    {
        rv = caml_val_bool(result);
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_ok__SWIG_3gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agsym_t *arg1 = (Agsym_t *) 0 ;
    bool result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agsym_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agsym_t);
    }
    result = (bool)ok(arg1);
    
    {
        rv = caml_val_bool(result);
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_okgv(CAML_VALUE args) {
    CAMLparam1(args);
    int i;
    int argc = caml_list_length(args);
    
    int _v = 0;
    CAML_VALUE *argv;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agraph_t);
        }
        if (_v) {
            free(argv);
            CAMLreturn(_wrap_ok__SWIG_0gv(args));
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agnode_t);
        }
        if (_v) {
            free(argv);
            CAMLreturn(_wrap_ok__SWIG_1gv(args));
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agedge_t);
        }
        if (_v) {
            free(argv);
            CAMLreturn(_wrap_ok__SWIG_2gv(args));
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agsym_t);
        }
        if (_v) {
            free(argv);
            CAMLreturn(_wrap_ok__SWIG_3gv(args));
        }
    }
    
    failwith("No matching function for overloaded 'ok'");
}


SWIGEXT CAML_VALUE _wrap_firstsubggv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agraph_t *result;
    
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agraph_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agraph_t);
    }
    result = (Agraph_t *)firstsubg(arg1);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agraph_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agraph_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agraph_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_nextsubggv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agraph_t *arg2 = (Agraph_t *) 0 ;
    Agraph_t *result;
    
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agraph_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agraph_t);
    }
    {
        /* %typemap(in) SWIGTYPE * */
        arg2 = (Agraph_t *)caml_ptr_val(caml_list_nth(args,1),SWIGTYPE_p_Agraph_t);
    }
    result = (Agraph_t *)nextsubg(arg1,arg2);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agraph_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agraph_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agraph_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_firstsupggv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agraph_t *result;
    
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agraph_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agraph_t);
    }
    result = (Agraph_t *)firstsupg(arg1);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agraph_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agraph_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agraph_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_nextsupggv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agraph_t *arg2 = (Agraph_t *) 0 ;
    Agraph_t *result;
    
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agraph_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agraph_t);
    }
    {
        /* %typemap(in) SWIGTYPE * */
        arg2 = (Agraph_t *)caml_ptr_val(caml_list_nth(args,1),SWIGTYPE_p_Agraph_t);
    }
    result = (Agraph_t *)nextsupg(arg1,arg2);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agraph_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agraph_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agraph_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_firstedge__SWIG_0gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agedge_t *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agraph_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agraph_t);
    }
    result = (Agedge_t *)firstedge(arg1);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agedge_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agedge_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agedge_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_nextedge__SWIG_0gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agedge_t *arg2 = (Agedge_t *) 0 ;
    Agedge_t *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agraph_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agraph_t);
    }
    {
        /* %typemap(in) SWIGTYPE * */
        arg2 = (Agedge_t *)caml_ptr_val(caml_list_nth(args,1),SWIGTYPE_p_Agedge_t);
    }
    result = (Agedge_t *)nextedge(arg1,arg2);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agedge_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agedge_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agedge_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_firstout__SWIG_0gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agedge_t *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agraph_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agraph_t);
    }
    result = (Agedge_t *)firstout(arg1);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agedge_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agedge_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agedge_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_nextout__SWIG_0gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agedge_t *arg2 = (Agedge_t *) 0 ;
    Agedge_t *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agraph_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agraph_t);
    }
    {
        /* %typemap(in) SWIGTYPE * */
        arg2 = (Agedge_t *)caml_ptr_val(caml_list_nth(args,1),SWIGTYPE_p_Agedge_t);
    }
    result = (Agedge_t *)nextout(arg1,arg2);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agedge_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agedge_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agedge_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_firstedge__SWIG_1gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agedge_t *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agnode_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agnode_t);
    }
    result = (Agedge_t *)firstedge(arg1);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agedge_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agedge_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agedge_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_firstedgegv(CAML_VALUE args) {
    CAMLparam1(args);
    int i;
    int argc = caml_list_length(args);
    
    int _v = 0;
    CAML_VALUE *argv;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agraph_t);
        }
        if (_v) {
            free(argv);
            CAMLreturn(_wrap_firstedge__SWIG_0gv(args));
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agnode_t);
        }
        if (_v) {
            free(argv);
            CAMLreturn(_wrap_firstedge__SWIG_1gv(args));
        }
    }
    
    failwith("No matching function for overloaded 'firstedge'");
}


SWIGEXT CAML_VALUE _wrap_nextedge__SWIG_1gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agedge_t *arg2 = (Agedge_t *) 0 ;
    Agedge_t *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agnode_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agnode_t);
    }
    {
        /* %typemap(in) SWIGTYPE * */
        arg2 = (Agedge_t *)caml_ptr_val(caml_list_nth(args,1),SWIGTYPE_p_Agedge_t);
    }
    result = (Agedge_t *)nextedge(arg1,arg2);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agedge_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agedge_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agedge_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_nextedgegv(CAML_VALUE args) {
    CAMLparam1(args);
    int i;
    int argc = caml_list_length(args);
    
    int _v = 0;
    CAML_VALUE *argv;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agraph_t);
        }
        if (_v) {
            {
                void *ptr;
                _v = !caml_ptr_val_internal(argv[1], &ptr,SWIGTYPE_p_Agedge_t);
            }
            if (_v) {
                free(argv);
                CAMLreturn(_wrap_nextedge__SWIG_0gv(args));
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agnode_t);
        }
        if (_v) {
            {
                void *ptr;
                _v = !caml_ptr_val_internal(argv[1], &ptr,SWIGTYPE_p_Agedge_t);
            }
            if (_v) {
                free(argv);
                CAMLreturn(_wrap_nextedge__SWIG_1gv(args));
            }
        }
    }
    
    failwith("No matching function for overloaded 'nextedge'");
}


SWIGEXT CAML_VALUE _wrap_firstout__SWIG_1gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agedge_t *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agnode_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agnode_t);
    }
    result = (Agedge_t *)firstout(arg1);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agedge_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agedge_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agedge_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_firstoutgv(CAML_VALUE args) {
    CAMLparam1(args);
    int i;
    int argc = caml_list_length(args);
    
    int _v = 0;
    CAML_VALUE *argv;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agraph_t);
        }
        if (_v) {
            free(argv);
            CAMLreturn(_wrap_firstout__SWIG_0gv(args));
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agnode_t);
        }
        if (_v) {
            free(argv);
            CAMLreturn(_wrap_firstout__SWIG_1gv(args));
        }
    }
    
    failwith("No matching function for overloaded 'firstout'");
}


SWIGEXT CAML_VALUE _wrap_nextout__SWIG_1gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agedge_t *arg2 = (Agedge_t *) 0 ;
    Agedge_t *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agnode_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agnode_t);
    }
    {
        /* %typemap(in) SWIGTYPE * */
        arg2 = (Agedge_t *)caml_ptr_val(caml_list_nth(args,1),SWIGTYPE_p_Agedge_t);
    }
    result = (Agedge_t *)nextout(arg1,arg2);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agedge_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agedge_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agedge_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_nextoutgv(CAML_VALUE args) {
    CAMLparam1(args);
    int i;
    int argc = caml_list_length(args);
    
    int _v = 0;
    CAML_VALUE *argv;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agraph_t);
        }
        if (_v) {
            {
                void *ptr;
                _v = !caml_ptr_val_internal(argv[1], &ptr,SWIGTYPE_p_Agedge_t);
            }
            if (_v) {
                free(argv);
                CAMLreturn(_wrap_nextout__SWIG_0gv(args));
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agnode_t);
        }
        if (_v) {
            {
                void *ptr;
                _v = !caml_ptr_val_internal(argv[1], &ptr,SWIGTYPE_p_Agedge_t);
            }
            if (_v) {
                free(argv);
                CAMLreturn(_wrap_nextout__SWIG_1gv(args));
            }
        }
    }
    
    failwith("No matching function for overloaded 'nextout'");
}


SWIGEXT CAML_VALUE _wrap_firstheadgv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agnode_t *result;
    
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agnode_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agnode_t);
    }
    result = (Agnode_t *)firsthead(arg1);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agnode_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agnode_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agnode_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_nextheadgv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agnode_t *arg2 = (Agnode_t *) 0 ;
    Agnode_t *result;
    
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agnode_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agnode_t);
    }
    {
        /* %typemap(in) SWIGTYPE * */
        arg2 = (Agnode_t *)caml_ptr_val(caml_list_nth(args,1),SWIGTYPE_p_Agnode_t);
    }
    result = (Agnode_t *)nexthead(arg1,arg2);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agnode_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agnode_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agnode_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_firstin__SWIG_0gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agedge_t *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agraph_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agraph_t);
    }
    result = (Agedge_t *)firstin(arg1);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agedge_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agedge_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agedge_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_nextin__SWIG_0gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agedge_t *arg2 = (Agedge_t *) 0 ;
    Agedge_t *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agnode_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agnode_t);
    }
    {
        /* %typemap(in) SWIGTYPE * */
        arg2 = (Agedge_t *)caml_ptr_val(caml_list_nth(args,1),SWIGTYPE_p_Agedge_t);
    }
    result = (Agedge_t *)nextin(arg1,arg2);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agedge_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agedge_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agedge_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_firstin__SWIG_1gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agedge_t *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agnode_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agnode_t);
    }
    result = (Agedge_t *)firstin(arg1);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agedge_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agedge_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agedge_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_firstingv(CAML_VALUE args) {
    CAMLparam1(args);
    int i;
    int argc = caml_list_length(args);
    
    int _v = 0;
    CAML_VALUE *argv;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agraph_t);
        }
        if (_v) {
            free(argv);
            CAMLreturn(_wrap_firstin__SWIG_0gv(args));
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agnode_t);
        }
        if (_v) {
            free(argv);
            CAMLreturn(_wrap_firstin__SWIG_1gv(args));
        }
    }
    
    failwith("No matching function for overloaded 'firstin'");
}


SWIGEXT CAML_VALUE _wrap_nextin__SWIG_1gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agedge_t *arg2 = (Agedge_t *) 0 ;
    Agedge_t *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agraph_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agraph_t);
    }
    {
        /* %typemap(in) SWIGTYPE * */
        arg2 = (Agedge_t *)caml_ptr_val(caml_list_nth(args,1),SWIGTYPE_p_Agedge_t);
    }
    result = (Agedge_t *)nextin(arg1,arg2);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agedge_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agedge_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agedge_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_nextingv(CAML_VALUE args) {
    CAMLparam1(args);
    int i;
    int argc = caml_list_length(args);
    
    int _v = 0;
    CAML_VALUE *argv;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agnode_t);
        }
        if (_v) {
            {
                void *ptr;
                _v = !caml_ptr_val_internal(argv[1], &ptr,SWIGTYPE_p_Agedge_t);
            }
            if (_v) {
                free(argv);
                CAMLreturn(_wrap_nextin__SWIG_0gv(args));
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agraph_t);
        }
        if (_v) {
            {
                void *ptr;
                _v = !caml_ptr_val_internal(argv[1], &ptr,SWIGTYPE_p_Agedge_t);
            }
            if (_v) {
                free(argv);
                CAMLreturn(_wrap_nextin__SWIG_1gv(args));
            }
        }
    }
    
    failwith("No matching function for overloaded 'nextin'");
}


SWIGEXT CAML_VALUE _wrap_firsttailgv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agnode_t *result;
    
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agnode_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agnode_t);
    }
    result = (Agnode_t *)firsttail(arg1);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agnode_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agnode_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agnode_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_nexttailgv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agnode_t *arg2 = (Agnode_t *) 0 ;
    Agnode_t *result;
    
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agnode_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agnode_t);
    }
    {
        /* %typemap(in) SWIGTYPE * */
        arg2 = (Agnode_t *)caml_ptr_val(caml_list_nth(args,1),SWIGTYPE_p_Agnode_t);
    }
    result = (Agnode_t *)nexttail(arg1,arg2);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agnode_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agnode_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agnode_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_firstnode__SWIG_0gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agnode_t *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agraph_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agraph_t);
    }
    result = (Agnode_t *)firstnode(arg1);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agnode_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agnode_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agnode_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_nextnode__SWIG_0gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agnode_t *arg2 = (Agnode_t *) 0 ;
    Agnode_t *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agraph_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agraph_t);
    }
    {
        /* %typemap(in) SWIGTYPE * */
        arg2 = (Agnode_t *)caml_ptr_val(caml_list_nth(args,1),SWIGTYPE_p_Agnode_t);
    }
    result = (Agnode_t *)nextnode(arg1,arg2);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agnode_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agnode_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agnode_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_firstnode__SWIG_1gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agedge_t *arg1 = (Agedge_t *) 0 ;
    Agnode_t *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agedge_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agedge_t);
    }
    result = (Agnode_t *)firstnode(arg1);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agnode_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agnode_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agnode_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_firstnodegv(CAML_VALUE args) {
    CAMLparam1(args);
    int i;
    int argc = caml_list_length(args);
    
    int _v = 0;
    CAML_VALUE *argv;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agraph_t);
        }
        if (_v) {
            free(argv);
            CAMLreturn(_wrap_firstnode__SWIG_0gv(args));
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agedge_t);
        }
        if (_v) {
            free(argv);
            CAMLreturn(_wrap_firstnode__SWIG_1gv(args));
        }
    }
    
    failwith("No matching function for overloaded 'firstnode'");
}


SWIGEXT CAML_VALUE _wrap_nextnode__SWIG_1gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agedge_t *arg1 = (Agedge_t *) 0 ;
    Agnode_t *arg2 = (Agnode_t *) 0 ;
    Agnode_t *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agedge_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agedge_t);
    }
    {
        /* %typemap(in) SWIGTYPE * */
        arg2 = (Agnode_t *)caml_ptr_val(caml_list_nth(args,1),SWIGTYPE_p_Agnode_t);
    }
    result = (Agnode_t *)nextnode(arg1,arg2);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agnode_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agnode_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agnode_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_nextnodegv(CAML_VALUE args) {
    CAMLparam1(args);
    int i;
    int argc = caml_list_length(args);
    
    int _v = 0;
    CAML_VALUE *argv;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agraph_t);
        }
        if (_v) {
            {
                void *ptr;
                _v = !caml_ptr_val_internal(argv[1], &ptr,SWIGTYPE_p_Agnode_t);
            }
            if (_v) {
                free(argv);
                CAMLreturn(_wrap_nextnode__SWIG_0gv(args));
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agedge_t);
        }
        if (_v) {
            {
                void *ptr;
                _v = !caml_ptr_val_internal(argv[1], &ptr,SWIGTYPE_p_Agnode_t);
            }
            if (_v) {
                free(argv);
                CAMLreturn(_wrap_nextnode__SWIG_1gv(args));
            }
        }
    }
    
    failwith("No matching function for overloaded 'nextnode'");
}


SWIGEXT CAML_VALUE _wrap_firstattr__SWIG_0gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agsym_t *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agraph_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agraph_t);
    }
    result = (Agsym_t *)firstattr(arg1);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agsym_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agsym_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agsym_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_nextattr__SWIG_0gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agsym_t *arg2 = (Agsym_t *) 0 ;
    Agsym_t *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agraph_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agraph_t);
    }
    {
        /* %typemap(in) SWIGTYPE * */
        arg2 = (Agsym_t *)caml_ptr_val(caml_list_nth(args,1),SWIGTYPE_p_Agsym_t);
    }
    result = (Agsym_t *)nextattr(arg1,arg2);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agsym_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agsym_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agsym_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_firstattr__SWIG_1gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agedge_t *arg1 = (Agedge_t *) 0 ;
    Agsym_t *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agedge_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agedge_t);
    }
    result = (Agsym_t *)firstattr(arg1);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agsym_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agsym_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agsym_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_nextattr__SWIG_1gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agedge_t *arg1 = (Agedge_t *) 0 ;
    Agsym_t *arg2 = (Agsym_t *) 0 ;
    Agsym_t *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agedge_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agedge_t);
    }
    {
        /* %typemap(in) SWIGTYPE * */
        arg2 = (Agsym_t *)caml_ptr_val(caml_list_nth(args,1),SWIGTYPE_p_Agsym_t);
    }
    result = (Agsym_t *)nextattr(arg1,arg2);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agsym_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agsym_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agsym_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_firstattr__SWIG_2gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agsym_t *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agnode_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agnode_t);
    }
    result = (Agsym_t *)firstattr(arg1);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agsym_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agsym_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agsym_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_firstattrgv(CAML_VALUE args) {
    CAMLparam1(args);
    int i;
    int argc = caml_list_length(args);
    
    int _v = 0;
    CAML_VALUE *argv;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agraph_t);
        }
        if (_v) {
            free(argv);
            CAMLreturn(_wrap_firstattr__SWIG_0gv(args));
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agedge_t);
        }
        if (_v) {
            free(argv);
            CAMLreturn(_wrap_firstattr__SWIG_1gv(args));
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agnode_t);
        }
        if (_v) {
            free(argv);
            CAMLreturn(_wrap_firstattr__SWIG_2gv(args));
        }
    }
    
    failwith("No matching function for overloaded 'firstattr'");
}


SWIGEXT CAML_VALUE _wrap_nextattr__SWIG_2gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agsym_t *arg2 = (Agsym_t *) 0 ;
    Agsym_t *result;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agnode_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agnode_t);
    }
    {
        /* %typemap(in) SWIGTYPE * */
        arg2 = (Agsym_t *)caml_ptr_val(caml_list_nth(args,1),SWIGTYPE_p_Agsym_t);
    }
    result = (Agsym_t *)nextattr(arg1,arg2);
    
    {
        /* %typemap(directorin) SWIGTYPE *, SWIGTYPE (CLASS::*) */
        CAML_VALUE *fromval = caml_named_value("create_Agsym_t_from_ptr");
        if( fromval ) {
            rv = callback(*fromval,caml_val_ptr((void *)result,SWIGTYPE_p_Agsym_t));
        } else {
            rv = caml_val_ptr ((void *)result,SWIGTYPE_p_Agsym_t);
        }
    }
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_nextattrgv(CAML_VALUE args) {
    CAMLparam1(args);
    int i;
    int argc = caml_list_length(args);
    
    int _v = 0;
    CAML_VALUE *argv;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agraph_t);
        }
        if (_v) {
            {
                void *ptr;
                _v = !caml_ptr_val_internal(argv[1], &ptr,SWIGTYPE_p_Agsym_t);
            }
            if (_v) {
                free(argv);
                CAMLreturn(_wrap_nextattr__SWIG_0gv(args));
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agedge_t);
        }
        if (_v) {
            {
                void *ptr;
                _v = !caml_ptr_val_internal(argv[1], &ptr,SWIGTYPE_p_Agsym_t);
            }
            if (_v) {
                free(argv);
                CAMLreturn(_wrap_nextattr__SWIG_1gv(args));
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agnode_t);
        }
        if (_v) {
            {
                void *ptr;
                _v = !caml_ptr_val_internal(argv[1], &ptr,SWIGTYPE_p_Agsym_t);
            }
            if (_v) {
                free(argv);
                CAMLreturn(_wrap_nextattr__SWIG_2gv(args));
            }
        }
    }
    
    failwith("No matching function for overloaded 'nextattr'");
}


SWIGEXT CAML_VALUE _wrap_rm__SWIG_0gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agraph_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agraph_t);
    }
    rm(arg1);
    
    rv = Val_unit;
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_rm__SWIG_1gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agnode_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agnode_t);
    }
    rm(arg1);
    
    rv = Val_unit;
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_rm__SWIG_2gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agedge_t *arg1 = (Agedge_t *) 0 ;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agedge_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agedge_t);
    }
    rm(arg1);
    
    rv = Val_unit;
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_rmgv(CAML_VALUE args) {
    CAMLparam1(args);
    int i;
    int argc = caml_list_length(args);
    
    int _v = 0;
    CAML_VALUE *argv;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agraph_t);
        }
        if (_v) {
            free(argv);
            CAMLreturn(_wrap_rm__SWIG_0gv(args));
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agnode_t);
        }
        if (_v) {
            free(argv);
            CAMLreturn(_wrap_rm__SWIG_1gv(args));
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agedge_t);
        }
        if (_v) {
            free(argv);
            CAMLreturn(_wrap_rm__SWIG_2gv(args));
        }
    }
    
    failwith("No matching function for overloaded 'rm'");
}


SWIGEXT CAML_VALUE _wrap_layoutgv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    char *arg2 = (char *) 0 ;
    
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agraph_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agraph_t);
    }
    {
        /* %typemap(in) char * ... */
        arg2 = (char *)caml_string_val(caml_list_nth(args,1));
    }
    layout(arg1,arg2);
    
    rv = Val_unit;
    swig_result = caml_list_append(swig_result,rv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_render__SWIG_0gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agraph_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agraph_t);
    }
    render(arg1);
    
    rv = Val_unit;
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_render__SWIG_1gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    char *arg2 = (char *) 0 ;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agraph_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agraph_t);
    }
    {
        /* %typemap(in) char * ... */
        arg2 = (char *)caml_string_val(caml_list_nth(args,1));
    }
    render(arg1,arg2);
    
    rv = Val_unit;
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_render__SWIG_2gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agraph_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agraph_t);
    }
    {
        /* %typemap(in) char * ... */
        arg2 = (char *)caml_string_val(caml_list_nth(args,1));
    }
    {
        /* %typemap(in) char * ... */
        arg3 = (char *)caml_string_val(caml_list_nth(args,2));
    }
    render(arg1,arg2,arg3);
    
    rv = Val_unit;
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_render__SWIG_3gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    char *arg2 = (char *) 0 ;
    FILE *arg3 = (FILE *) 0 ;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agraph_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agraph_t);
    }
    {
        /* %typemap(in) char * ... */
        arg2 = (char *)caml_string_val(caml_list_nth(args,1));
    }
    {
        /* %typemap(in) SWIGTYPE * */
        arg3 = (FILE *)caml_ptr_val(caml_list_nth(args,2),SWIGTYPE_p_FILE);
    }
    render(arg1,arg2,arg3);
    
    rv = Val_unit;
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_render__SWIG_4gv (CAML_VALUE args)
{
    CAMLparam1(args);
    SWIG_CAMLlocal2(swig_result,rv);
    int _v = 0;
    int i;
    int argc = caml_list_length(args);
    CAML_VALUE *argv;
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    char *arg2 = (char *) 0 ;
    void **arg3 = (void **) 0 ;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    swig_result = Val_unit;
    {
        /* %typemap(in) SWIGTYPE * */
        arg1 = (Agraph_t *)caml_ptr_val(caml_list_nth(args,0),SWIGTYPE_p_Agraph_t);
    }
    {
        /* %typemap(in) char * ... */
        arg2 = (char *)caml_string_val(caml_list_nth(args,1));
    }
    {
        /* %typemap(in) SWIGTYPE * */
        arg3 = (void **)caml_ptr_val(caml_list_nth(args,2),SWIGTYPE_p_p_void);
    }
    render(arg1,arg2,arg3);
    
    rv = Val_unit;
    swig_result = caml_list_append(swig_result,rv);
    free(argv);
    CAMLreturn(swig_result);
}


SWIGEXT CAML_VALUE _wrap_rendergv(CAML_VALUE args) {
    CAMLparam1(args);
    int i;
    int argc = caml_list_length(args);
    
    int _v = 0;
    CAML_VALUE *argv;
    
    argv = (CAML_VALUE *)malloc( argc * sizeof( CAML_VALUE ) );
    for( i = 0; i < argc; i++ ) {
        argv[i] = caml_list_nth(args,i);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agraph_t);
        }
        if (_v) {
            free(argv);
            CAMLreturn(_wrap_render__SWIG_0gv(args));
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agraph_t);
        }
        if (_v) {
            {
                if( !Is_block(argv[1]) ) _v = 0;
                else {
                    switch( SWIG_Tag_val(argv[1]) ) {
                        case C_string: _v = 1; break;
                        case C_ptr: {
                            swig_type_info *typeinfo = 
                            (swig_type_info *)(long)SWIG_Int64_val(SWIG_Field(argv[1],1));
                            _v = SWIG_TypeCheck("char *",typeinfo) ||
                            SWIG_TypeCheck("signed char *",typeinfo) ||
                            SWIG_TypeCheck("unsigned char *",typeinfo) ||
                            SWIG_TypeCheck("const char *",typeinfo) ||
                            SWIG_TypeCheck("const signed char *",typeinfo) ||
                            SWIG_TypeCheck("const unsigned char *",typeinfo) ||
                            SWIG_TypeCheck("std::string",typeinfo);
                        } break;
                        default: _v = 0; break;
                    }
                }    
            }
            if (_v) {
                free(argv);
                CAMLreturn(_wrap_render__SWIG_1gv(args));
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agraph_t);
        }
        if (_v) {
            {
                if( !Is_block(argv[1]) ) _v = 0;
                else {
                    switch( SWIG_Tag_val(argv[1]) ) {
                        case C_string: _v = 1; break;
                        case C_ptr: {
                            swig_type_info *typeinfo = 
                            (swig_type_info *)(long)SWIG_Int64_val(SWIG_Field(argv[1],1));
                            _v = SWIG_TypeCheck("char *",typeinfo) ||
                            SWIG_TypeCheck("signed char *",typeinfo) ||
                            SWIG_TypeCheck("unsigned char *",typeinfo) ||
                            SWIG_TypeCheck("const char *",typeinfo) ||
                            SWIG_TypeCheck("const signed char *",typeinfo) ||
                            SWIG_TypeCheck("const unsigned char *",typeinfo) ||
                            SWIG_TypeCheck("std::string",typeinfo);
                        } break;
                        default: _v = 0; break;
                    }
                }    
            }
            if (_v) {
                {
                    void *ptr;
                    _v = !caml_ptr_val_internal(argv[2], &ptr,SWIGTYPE_p_FILE);
                }
                if (_v) {
                    free(argv);
                    CAMLreturn(_wrap_render__SWIG_3gv(args));
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agraph_t);
        }
        if (_v) {
            {
                if( !Is_block(argv[1]) ) _v = 0;
                else {
                    switch( SWIG_Tag_val(argv[1]) ) {
                        case C_string: _v = 1; break;
                        case C_ptr: {
                            swig_type_info *typeinfo = 
                            (swig_type_info *)(long)SWIG_Int64_val(SWIG_Field(argv[1],1));
                            _v = SWIG_TypeCheck("char *",typeinfo) ||
                            SWIG_TypeCheck("signed char *",typeinfo) ||
                            SWIG_TypeCheck("unsigned char *",typeinfo) ||
                            SWIG_TypeCheck("const char *",typeinfo) ||
                            SWIG_TypeCheck("const signed char *",typeinfo) ||
                            SWIG_TypeCheck("const unsigned char *",typeinfo) ||
                            SWIG_TypeCheck("std::string",typeinfo);
                        } break;
                        default: _v = 0; break;
                    }
                }    
            }
            if (_v) {
                {
                    void *ptr;
                    _v = !caml_ptr_val_internal(argv[2], &ptr,SWIGTYPE_p_p_void);
                }
                if (_v) {
                    free(argv);
                    CAMLreturn(_wrap_render__SWIG_4gv(args));
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            _v = !caml_ptr_val_internal(argv[0], &ptr,SWIGTYPE_p_Agraph_t);
        }
        if (_v) {
            {
                if( !Is_block(argv[1]) ) _v = 0;
                else {
                    switch( SWIG_Tag_val(argv[1]) ) {
                        case C_string: _v = 1; break;
                        case C_ptr: {
                            swig_type_info *typeinfo = 
                            (swig_type_info *)(long)SWIG_Int64_val(SWIG_Field(argv[1],1));
                            _v = SWIG_TypeCheck("char *",typeinfo) ||
                            SWIG_TypeCheck("signed char *",typeinfo) ||
                            SWIG_TypeCheck("unsigned char *",typeinfo) ||
                            SWIG_TypeCheck("const char *",typeinfo) ||
                            SWIG_TypeCheck("const signed char *",typeinfo) ||
                            SWIG_TypeCheck("const unsigned char *",typeinfo) ||
                            SWIG_TypeCheck("std::string",typeinfo);
                        } break;
                        default: _v = 0; break;
                    }
                }    
            }
            if (_v) {
                {
                    if( !Is_block(argv[2]) ) _v = 0;
                    else {
                        switch( SWIG_Tag_val(argv[2]) ) {
                            case C_string: _v = 1; break;
                            case C_ptr: {
                                swig_type_info *typeinfo = 
                                (swig_type_info *)(long)SWIG_Int64_val(SWIG_Field(argv[2],1));
                                _v = SWIG_TypeCheck("char *",typeinfo) ||
                                SWIG_TypeCheck("signed char *",typeinfo) ||
                                SWIG_TypeCheck("unsigned char *",typeinfo) ||
                                SWIG_TypeCheck("const char *",typeinfo) ||
                                SWIG_TypeCheck("const signed char *",typeinfo) ||
                                SWIG_TypeCheck("const unsigned char *",typeinfo) ||
                                SWIG_TypeCheck("std::string",typeinfo);
                            } break;
                            default: _v = 0; break;
                        }
                    }    
                }
                if (_v) {
                    free(argv);
                    CAMLreturn(_wrap_render__SWIG_2gv(args));
                }
            }
        }
    }
    
    failwith("No matching function for overloaded 'render'");
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_Agedge_t = {"_p_Agedge_t", "Agedge_t *", 0, 0, 0};
static swig_type_info _swigt__p_Agnode_t = {"_p_Agnode_t", "Agnode_t *", 0, 0, 0};
static swig_type_info _swigt__p_Agraph_t = {"_p_Agraph_t", "Agraph_t *", 0, 0, 0};
static swig_type_info _swigt__p_Agsym_t = {"_p_Agsym_t", "Agsym_t *", 0, 0, 0};
static swig_type_info _swigt__p_FILE = {"_p_FILE", "FILE *", 0, 0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "void **", 0, 0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Agedge_t,
  &_swigt__p_Agnode_t,
  &_swigt__p_Agraph_t,
  &_swigt__p_Agsym_t,
  &_swigt__p_FILE,
  &_swigt__p_p_void,
};

static swig_cast_info _swigc__p_Agedge_t[] = {  {&_swigt__p_Agedge_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Agnode_t[] = {  {&_swigt__p_Agnode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Agraph_t[] = {  {&_swigt__p_Agraph_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Agsym_t[] = {  {&_swigt__p_Agsym_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FILE[] = {  {&_swigt__p_FILE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Agedge_t,
  _swigc__p_Agnode_t,
  _swigc__p_Agraph_t,
  _swigc__p_Agsym_t,
  _swigc__p_FILE,
  _swigc__p_p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

#define SWIG_init f_gv_init
/*************************************************************************
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.

 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop though that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.

 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
**/

#ifdef __cplusplus
extern "C" {
#endif
    
    SWIGRUNTIME void
    SWIG_InitializeModule(void *clientdata) {
        swig_type_info *type, *ret;
        swig_cast_info *cast;
        size_t i;
        swig_module_info *module_head;
        static int init_run = 0;
        
        clientdata = clientdata;
        
        if (init_run) return;
        init_run = 1;
        
        /* Initialize the swig_module */
        swig_module.type_initial = swig_type_initial;
        swig_module.cast_initial = swig_cast_initial;
        
        /* Try and load any already created modules */
        module_head = SWIG_GetModule(clientdata);
        if (module_head) {
            swig_module.next = module_head->next;
            module_head->next = &swig_module;
        } else {
            /* This is the first module loaded */
            swig_module.next = &swig_module;
            SWIG_SetModule(clientdata, &swig_module);
        }
        
        /* Now work on filling in swig_module.types */
        for (i = 0; i < swig_module.size; ++i) {
            type = 0;
            
            /* if there is another module already loaded */
            if (swig_module.next != &swig_module) {
                type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
            }
            if (type) {
                /* Overwrite clientdata field */
                if (swig_module.type_initial[i]->clientdata) type->clientdata = swig_module.type_initial[i]->clientdata;
            } else {
                type = swig_module.type_initial[i];
            }
            
            /* Insert casting types */
            cast = swig_module.cast_initial[i];
            while (cast->type) {
                /* Don't need to add information already in the list */
                ret = 0;
                if (swig_module.next != &swig_module) {
                    ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
                }
                if (ret && type == swig_module.type_initial[i]) {
                    cast->type = ret;
                    ret = 0;
                }
                
                if (!ret) {
                    if (type->cast) {
                        type->cast->prev = cast;
                        cast->next = type->cast;
                    }
                    type->cast = cast;
                }
                
                cast++;
            }
            
            /* Set entry in modules->types array equal to the type */
            swig_module.types[i] = type;
        }
        swig_module.types[i] = 0;
    }
    
    /* This function will propagate the clientdata field of type to
    * any new swig_type_info structures that have been added into the list
    * of equivalent types.  It is like calling
    * SWIG_TypeClientData(type, clientdata) a second time.
    */
    SWIGRUNTIME void
    SWIG_PropagateClientData(void) {
        size_t i;
        swig_cast_info *equiv;
        static int init_run = 0;
        
        if (init_run) return;
        init_run = 1;
        
        for (i = 0; i < swig_module.size; i++) {
            if (swig_module.types[i]->clientdata) {
                equiv = swig_module.types[i]->cast;
                while (equiv) {
                    if (!equiv->converter) {
                        if (equiv->type && !equiv->type->clientdata)
                        SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
                    }
                    equiv = equiv->next;
                }
            }
        }
    }
    
#ifdef __cplusplus
}
#endif

SWIGEXT void SWIG_init() {
    SWIG_InitializeModule(0);
    
}

