/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/***********************************************************************
 *
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 *
 ************************************************************************/

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
#  if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#    define SWIGTEMPLATEDISAMBIGUATOR template
#  else
#    define SWIGTEMPLATEDISAMBIGUATOR 
#  endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__) || defined(__ICC)
#   define SWIGUNUSED __attribute__ ((unused)) 
# else
#   define SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods for Windows DLLs */
#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   define SWIGEXPORT
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif


/***********************************************************************
 * swigrun.swg
 *
 *     This file contains generic CAPI SWIG runtime support for pointer
 *     type checking.
 *
 ************************************************************************/

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "2"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store inforomation on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;


/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (int)(*f1 - *f2);
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}


/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu = 0;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*
 * php4.swg
 *
 * PHP4 runtime library
 *
 */

#ifdef __cplusplus
extern "C" {
#endif
#include "zend.h"
#include "zend_API.h"
#include "php.h"

/* These TSRMLS_ stuff should already be defined now, but with older php under
   redhat are not... */
#ifndef TSRMLS_D
#define TSRMLS_D
#endif
#ifndef TSRMLS_DC
#define TSRMLS_DC
#endif
#ifndef TSRMLS_C
#define TSRMLS_C
#endif
#ifndef TSRMLS_CC
#define TSRMLS_CC
#endif

#ifdef __cplusplus
}
#endif

/* But in fact SWIG_ConvertPtr is the native interface for getting typed
   pointer values out of zvals.  We need the TSRMLS_ macros for when we
   make PHP type calls later as we handle php resources */
#define SWIG_ConvertPtr(obj,pp,type,flags) SWIG_ZTS_ConvertPtr(obj,pp,type,flags TSRMLS_CC)

/* Flags for SWIG_ConvertPtr */
#define SWIG_POINTER_DISOWN  0x1

#define SWIG_fail goto fail

static char *default_error_msg = "Unknown error occurred";
static int default_error_code = E_ERROR;

#define SWIG_PHP_Arg_Error_Msg(argnum,extramsg) "Error in argument " #argnum " "#extramsg

#define SWIG_PHP_Error(code,msg) ErrorCode() = code; ErrorMsg() = msg; SWIG_fail;

#define SWIG_contract_assert(expr,msg) \
  if (!(expr) ) { zend_printf("Contract Assert Failed %s\n",msg ); } else

/* Standard SWIG API */
#define SWIG_GetModule(clientdata) SWIG_Php4_GetModule()
#define SWIG_SetModule(clientdata, pointer) SWIG_Php4_SetModule(pointer)

/* used to wrap returned objects in so we know whether they are newobject
   and need freeing, or not */
typedef struct _swig_object_wrapper {
  void * ptr;
  int newobject;
} swig_object_wrapper;

/* empty zend destructor for types without one */
static ZEND_RSRC_DTOR_FUNC(SWIG_landfill) {};

#define SWIG_SetPointerZval(a,b,c,d) SWIG_ZTS_SetPointerZval(a,b,c,d, SWIG_module_entry TSRMLS_CC)

static void
SWIG_ZTS_SetPointerZval(zval *z, void *ptr, swig_type_info *type, int newobject, zend_module_entry* module_entry TSRMLS_DC) {
  swig_object_wrapper *value=NULL;
  /*
   * First test for Null pointers.  Return those as PHP native NULL
   */
  if (!ptr ) {
    ZVAL_NULL(z);
    return;
  }
  if (type->clientdata) {
    if (! (*(int *)(type->clientdata)))
      zend_error(E_ERROR, "Type: %s failed to register with zend",type->name);
    value=(swig_object_wrapper *)emalloc(sizeof(swig_object_wrapper));
    value->ptr=ptr;
    value->newobject=newobject;
    ZEND_REGISTER_RESOURCE(z, value, *(int *)(type->clientdata));
    return;
  } else { /* have to deal with old fashioned string pointer?
              but this should not get this far */
    zend_error(E_ERROR, "Type: %s not registered with zend",type->name);
  }
}

/* This is a new pointer conversion routine
   Taking the native pointer p (which would have been converted from the old
   string pointer) and it's php type id, and it's type name (which also would
   have come from the old string pointer) it converts it to ptr calling 
   appropriate casting functions according to ty
   Sadly PHP has no API to find a type name from a type id, only from an instance
   of a resource of the type id, so we have to pass type_name as well.
   The two functions which might call this are:
   SWIG_ZTS_ConvertResourcePtr which gets the type name from the resource
   and the registered zend destructors for which we have one per type each
   with the type name hard wired in. */
static int
SWIG_ZTS_ConvertResourceData(void * p, int type, const char *type_name, void **ptr, swig_type_info *ty TSRMLS_DC) {
  swig_cast_info *tc;

  if (ty) {
    if (! type_name) {  
      /* can't convert p to ptr type ty if we don't know what type p is */
      return -1;
    } else {
      /* convert and cast p from type_name to ptr as ty
         Need to sort out const-ness, can SWIG_TypeCast really not take a const? */
      tc = SWIG_TypeCheck((char *)type_name,ty);
      if (!tc) return -1;
      *ptr = SWIG_TypeCast(tc, (void*)p);
    }
  } else {
    /* They don't care about the target type, so just pass on the pointer! */
    *ptr = (void *) p;
  }
  return 0;
}

/* This function fills ptr with a pointer of type ty by extracting the pointer
   and type info from the resource in z.  z must be a resource
   It uses SWIG_ZTS_ConvertResourceData to do the real work. */
static int
SWIG_ZTS_ConvertResourcePtr(zval *z, void **ptr, swig_type_info *ty, int flags TSRMLS_DC) {
  swig_object_wrapper *value;
  void *p;
  int type;
  char *type_name;

  value = (swig_object_wrapper *) zend_list_find(z->value.lval,&type);
  if ( flags && SWIG_POINTER_DISOWN ) {
    value->newobject = 0;
  }
  p = value->ptr;
  if (type==-1) return -1;

  type_name=zend_rsrc_list_get_rsrc_type(z->value.lval TSRMLS_CC);

  return SWIG_ZTS_ConvertResourceData(p,type,type_name,ptr,ty TSRMLS_CC);
}

/* We allow passing of a STRING or RESOURCE pointing to the object
   or an OBJECT whose _cPtr is a string or resource pointing to the object
   STRING pointers are very depracated */
static int
SWIG_ZTS_ConvertPtr(zval *z, void **ptr, swig_type_info *ty, int flags TSRMLS_DC) {
   char *c;
   zval *val;
   
   if(z == NULL) {
	*ptr = 0;
	return 0;
   }

   if (z->type==IS_OBJECT) {
     zval ** _cPtr;
     if (zend_hash_find(HASH_OF(z),"_cPtr",sizeof("_cPtr"),(void**)&_cPtr)==SUCCESS) {
       /* Don't co-erce to string if it isn't */
       if ((*_cPtr)->type==IS_STRING) c = Z_STRVAL_PP(_cPtr);
       else if ((*_cPtr)->type==IS_RESOURCE) {
         return SWIG_ZTS_ConvertResourcePtr(*_cPtr,ptr,ty, flags TSRMLS_CC);
       } else goto type_error; /* _cPtr was not string or resource property */
     } else goto type_error; /* can't find property _cPtr */
   } else if (z->type==IS_RESOURCE) {
     return SWIG_ZTS_ConvertResourcePtr(z,ptr,ty, flags TSRMLS_CC);
   } if (z->type==IS_NULL ) {
     *ptr = 0;
     return 0;
   } else goto type_error;

type_error:

    return -1;
}

static char const_name[] = "swig_runtime_data_type_pointer";
static swig_module_info *SWIG_Php4_GetModule() {
  zval *pointer;
  swig_module_info *ret = 0;

  MAKE_STD_ZVAL(pointer);

  if (zend_get_constant(const_name, sizeof(const_name), pointer)) {
    if (pointer->type == IS_LONG) {
      ret = (swig_module_info *) pointer->value.lval;
    }
  } 
  return 0;
}

static void SWIG_Php4_SetModule(swig_module_info *pointer) {
  REGISTER_MAIN_LONG_CONSTANT(const_name, (long) pointer, 0);
}


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Agedge_t swig_types[0]
#define SWIGTYPE_p_Agnode_t swig_types[1]
#define SWIGTYPE_p_Agraph_t swig_types[2]
#define SWIGTYPE_p_Agsym_t swig_types[3]
#define SWIGTYPE_p_FILE swig_types[4]
#define SWIGTYPE_p_p_void swig_types[5]
#define SWIGTYPE_p_void swig_types[6]
static swig_type_info *swig_types[8];
static swig_module_info swig_module = {swig_types, 7, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

/* header section */
/*
  +----------------------------------------------------------------------+
  | PHP version 4.0                                                      |
  +----------------------------------------------------------------------+
  | Copyright (c) 1997, 1998, 1999, 2000, 2001 The PHP Group             |
  +----------------------------------------------------------------------+
  | This source file is subject to version 2.02 of the PHP license,      |
  | that is bundled with this package in the file LICENSE, and is        |
  | available at through the world-wide-web at                           |
  | http://www.php.net/license/2_02.txt.                                 |
  | If you did not receive a copy of the PHP license and are unable to   |
  | obtain it through the world-wide-web, please send a note to          |
  | license@php.net so we can mail you a copy immediately.               |
  +----------------------------------------------------------------------+
  | Authors:                                                             |
  |                                                                      |
  +----------------------------------------------------------------------+
 */
ZEND_BEGIN_MODULE_GLOBALS(gv)
char *error_msg;
int error_code;
ZEND_END_MODULE_GLOBALS(gv)
ZEND_DECLARE_MODULE_GLOBALS(gv)
#ifdef ZTS
#define ErrorMsg() TSRMG(gv_globals_id, zend_gv_globals *, error_msg );
#define ErrorCode() TSRMG(gv_globals_id, zend_gv_globals *, error_code );
#else
#define ErrorMsg() (gv_globals.error_msg)
#define ErrorCode() (gv_globals.error_code)
#endif

static void gv_init_globals(zend_gv_globals *gv_globals ) {
  gv_globals->error_msg = default_error_msg;
  gv_globals->error_code = default_error_code;
}
static void gv_destroy_globals(zend_gv_globals *gv_globals) { }

void SWIG_ResetError() {
  ErrorMsg() = default_error_msg;
  ErrorCode() = default_error_code;
}
#define SWIG_name  "gv"
#ifdef __cplusplus
extern "C" {
#endif
#include "php.h"
#include "php_ini.h"
#include "ext/standard/info.h"
#include "php_gv.h"
#ifdef __cplusplus
}
#endif



/* some language headers (e.g. php.h, ruby.h) leave these defined */
#undef PACKAGE_STRING
#undef PACKAGE_TARNAME
#undef PACKAGE_VERSION
#undef PACKAGE_NAME

#include "gvc.h"


/** New graphs */
/*** New empty graph */
extern Agraph_t *graph(char *name);
extern Agraph_t *digraph(char *name);
extern Agraph_t *strictgraph(char *name);
extern Agraph_t *strictdigraph(char *name);
/*** New graph from a dot-syntax string or file */
extern Agraph_t *readstring(char *string);
extern Agraph_t *read(char *filename);
extern Agraph_t *read(FILE *f);	
/*** Add new subgraph to existing graph */
extern Agraph_t *graph(Agraph_t *g, char *name);

/** New nodes */
/*** Add new node to existing graph */
extern Agnode_t *node(Agraph_t *g, char *name);

/** New edges */
/*** Add new edge between existing nodes */
extern Agedge_t *edge(Agnode_t *t, Agnode_t *h);
/*** Add a new edge between an existing tail node, and a named head node which will be induced in the graph if it doesn't already exist */
extern Agedge_t *edge(Agnode_t *t, char *hname);
/*** Add a new edge between an existing head node, and a named tail node which will be induced in the graph if it doesn't already exist */
extern Agedge_t *edge(char *tname, Agnode_t *h);
/*** Add a new edge between named tail  and head nodes which will be induced in the graph if they don't already exist */
extern Agedge_t *edge(Agraph_t *g, char *tname, char *hname);

/** Setting attribute values */
/*** Set value of named attribute of graph/node/edge - creating attribute if necessary */
extern char *setv(Agraph_t *g, char *attr, char *val);
extern char *setv(Agnode_t *n, char *attr, char *val);
extern char *setv(Agedge_t *e, char *attr, char *val);

/*** Set value of existing attribute of graph/node/edge (using attribute handle) */
extern char *setv(Agraph_t *g, Agsym_t *a, char *val);
extern char *setv(Agnode_t *n, Agsym_t *a, char *val);
extern char *setv(Agedge_t *e, Agsym_t *a, char *val);

/** Getting attribute values */
/*** Get value of named attribute of graph/node/edge */
extern char *getv(Agraph_t *g, char *attr);
extern char *getv(Agnode_t *n, char *attr);
extern char *getv(Agedge_t *e, char *attr);

/*** Get value of attribute of graph/node/edge (using attribute handle) */
extern char *getv(Agraph_t *g, Agsym_t *a);
extern char *getv(Agnode_t *n, Agsym_t *a);
extern char *getv(Agedge_t *e, Agsym_t *a);

/** Obtain names from handles */
extern char *nameof(Agraph_t *g);
extern char *nameof(Agnode_t *n);
//extern char *nameof(Agedge_t *e);
extern char *nameof(Agsym_t *a);

/** Find handles from names */
extern Agraph_t *findsubg(Agraph_t *g, char *name);
extern Agnode_t *findnode(Agraph_t *g, char *name);
extern Agedge_t *findedge(Agnode_t *t, Agnode_t *h);

/** */
extern Agsym_t *findattr(Agraph_t *g, char *name);
extern Agsym_t *findattr(Agnode_t *n, char *name);
extern Agsym_t *findattr(Agedge_t *e, char *name);

/** Misc graph navigators returning handles */
extern Agnode_t *headof(Agedge_t *e);
extern Agnode_t *tailof(Agedge_t *e);
extern Agraph_t *graphof(Agraph_t *g);
extern Agraph_t *graphof(Agedge_t *e);
extern Agraph_t *graphof(Agnode_t *n);
extern Agraph_t *rootof(Agraph_t *g);

/** Obtain handles of proto node/edge for setting default attribute values */
extern Agnode_t *protonode(Agraph_t *g);
extern Agedge_t *protoedge(Agraph_t *g);

/** Iterators */
/*** Iteration termination tests */
extern bool ok(Agraph_t *g);
extern bool ok(Agnode_t *n);
extern bool ok(Agedge_t *e);
extern bool ok(Agsym_t *a);

/*** Iterate over subgraphs of a graph */
extern Agraph_t *firstsubg(Agraph_t *g);
extern Agraph_t *nextsubg(Agraph_t *g, Agraph_t *sg);

/*** Iterate over supergraphs of a graph (obscure and rarely useful) */
extern Agraph_t *firstsupg(Agraph_t *g);
extern Agraph_t *nextsupg(Agraph_t *g, Agraph_t *sg);

/*** Iterate over edges of a graph */
extern Agedge_t *firstedge(Agraph_t *g);
extern Agedge_t *nextedge(Agraph_t *g, Agedge_t *e);

/*** Iterate over outedges of a graph */
extern Agedge_t *firstout(Agraph_t *g);
extern Agedge_t *nextout(Agraph_t *g, Agedge_t *e);

/*** Iterate over edges of a node */
extern Agedge_t *firstedge(Agnode_t *n);
extern Agedge_t *nextedge(Agnode_t *n, Agedge_t *e);

/*** Iterate over out-edges of a node */
extern Agedge_t *firstout(Agnode_t *n);
extern Agedge_t *nextout(Agnode_t *n, Agedge_t *e);

/*** Iterate over head nodes reachable from out-edges of a node */
extern Agnode_t *firsthead(Agnode_t *n);
extern Agnode_t *nexthead(Agnode_t *n, Agnode_t *h);

/*** Iterate over in-edges of a graph */
extern Agedge_t *firstin(Agraph_t *g);
extern Agedge_t *nextin(Agnode_t *n, Agedge_t *e);

/*** Iterate over in-edges of a node */
extern Agedge_t *firstin(Agnode_t *n);
extern Agedge_t *nextin(Agraph_t *g, Agedge_t *e);

/*** Iterate over tail nodes reachable from in-edges of a node */
extern Agnode_t *firsttail(Agnode_t *n);
extern Agnode_t *nexttail(Agnode_t *n, Agnode_t *t);

/*** Iterate over nodes of a graph */
extern Agnode_t *firstnode(Agraph_t *g);
extern Agnode_t *nextnode(Agraph_t *g, Agnode_t *n);

/*** Iterate over nodes of an edge */
extern Agnode_t *firstnode(Agedge_t *e);
extern Agnode_t *nextnode(Agedge_t *e, Agnode_t *n);

/*** Iterate over attributes of a graph */
extern Agsym_t *firstattr(Agraph_t *g);
extern Agsym_t *nextattr(Agraph_t *g, Agsym_t *a);

/*** Iterate over attributes of an edge */
extern Agsym_t *firstattr(Agedge_t *e);
extern Agsym_t *nextattr(Agedge_t *e, Agsym_t *a);

/*** Iterate over attributes of a node */
extern Agsym_t *firstattr(Agnode_t *n);
extern Agsym_t *nextattr(Agnode_t *n, Agsym_t *a);

/** Remove graph objects */
extern void rm(Agraph_t *g);
extern void rm(Agnode_t *n);
extern void rm(Agedge_t *e);

/** Layout */
/*** Annotate a graph with layout attributes and values using a specific layout engine */
extern void layout(Agraph_t *g, char *engine);

/** Render */
/*** Render a layout into attributes of the graph */
extern void render(Agraph_t *g); 

/*** Render a layout in a specific format */
extern void render(Agraph_t *g, char *format);
extern void render(Agraph_t *g, char *format, char *filename);
extern void render(Agraph_t *g, char *format, FILE *f);
extern void render(Agraph_t *g, char *format, void **data);

/* class entry subsection */


/* entry subsection */
/* Every non-class user visible function must have an entry here */
function_entry gv_functions[] = {
  ZEND_NAMED_FE(digraph,_wrap_digraph, NULL)
  ZEND_NAMED_FE(strictgraph,_wrap_strictgraph, NULL)
  ZEND_NAMED_FE(strictdigraph,_wrap_strictdigraph, NULL)
  ZEND_NAMED_FE(readstring,_wrap_readstring, NULL)
  ZEND_NAMED_FE(read,_wrap_read, NULL)
  ZEND_NAMED_FE(graph,_wrap_graph, NULL)
  ZEND_NAMED_FE(node,_wrap_node, NULL)
  ZEND_NAMED_FE(edge,_wrap_edge, NULL)
  ZEND_NAMED_FE(setv,_wrap_setv, NULL)
  ZEND_NAMED_FE(getv,_wrap_getv, NULL)
  ZEND_NAMED_FE(nameof,_wrap_nameof, NULL)
  ZEND_NAMED_FE(findsubg,_wrap_findsubg, NULL)
  ZEND_NAMED_FE(findnode,_wrap_findnode, NULL)
  ZEND_NAMED_FE(findedge,_wrap_findedge, NULL)
  ZEND_NAMED_FE(findattr,_wrap_findattr, NULL)
  ZEND_NAMED_FE(headof,_wrap_headof, NULL)
  ZEND_NAMED_FE(tailof,_wrap_tailof, NULL)
  ZEND_NAMED_FE(graphof,_wrap_graphof, NULL)
  ZEND_NAMED_FE(rootof,_wrap_rootof, NULL)
  ZEND_NAMED_FE(protonode,_wrap_protonode, NULL)
  ZEND_NAMED_FE(protoedge,_wrap_protoedge, NULL)
  ZEND_NAMED_FE(ok,_wrap_ok, NULL)
  ZEND_NAMED_FE(firstsubg,_wrap_firstsubg, NULL)
  ZEND_NAMED_FE(nextsubg,_wrap_nextsubg, NULL)
  ZEND_NAMED_FE(firstsupg,_wrap_firstsupg, NULL)
  ZEND_NAMED_FE(nextsupg,_wrap_nextsupg, NULL)
  ZEND_NAMED_FE(firstedge,_wrap_firstedge, NULL)
  ZEND_NAMED_FE(nextedge,_wrap_nextedge, NULL)
  ZEND_NAMED_FE(firstout,_wrap_firstout, NULL)
  ZEND_NAMED_FE(nextout,_wrap_nextout, NULL)
  ZEND_NAMED_FE(firsthead,_wrap_firsthead, NULL)
  ZEND_NAMED_FE(nexthead,_wrap_nexthead, NULL)
  ZEND_NAMED_FE(firstin,_wrap_firstin, NULL)
  ZEND_NAMED_FE(nextin,_wrap_nextin, NULL)
  ZEND_NAMED_FE(firsttail,_wrap_firsttail, NULL)
  ZEND_NAMED_FE(nexttail,_wrap_nexttail, NULL)
  ZEND_NAMED_FE(firstnode,_wrap_firstnode, NULL)
  ZEND_NAMED_FE(nextnode,_wrap_nextnode, NULL)
  ZEND_NAMED_FE(firstattr,_wrap_firstattr, NULL)
  ZEND_NAMED_FE(nextattr,_wrap_nextattr, NULL)
  ZEND_NAMED_FE(rm,_wrap_rm, NULL)
  ZEND_NAMED_FE(layout,_wrap_layout, NULL)
  ZEND_NAMED_FE(render,_wrap_render, NULL)
 {NULL, NULL, NULL}
};

zend_module_entry gv_module_entry = {
#if ZEND_MODULE_API_NO > 20010900
    STANDARD_MODULE_HEADER,
#endif
    "gv",
    gv_functions,
    PHP_MINIT(gv),
    PHP_MSHUTDOWN(gv),
    PHP_RINIT(gv),
    PHP_RSHUTDOWN(gv),
    PHP_MINFO(gv),
#if ZEND_MODULE_API_NO > 20010900
    NO_VERSION_YET,
#endif
    STANDARD_MODULE_PROPERTIES
};
zend_module_entry* SWIG_module_entry = &gv_module_entry;


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_Agedge_t = {"_p_Agedge_t", "Agedge_t *", 0, 0, 0};
static swig_type_info _swigt__p_Agnode_t = {"_p_Agnode_t", "Agnode_t *", 0, 0, 0};
static swig_type_info _swigt__p_Agraph_t = {"_p_Agraph_t", "Agraph_t *", 0, 0, 0};
static swig_type_info _swigt__p_Agsym_t = {"_p_Agsym_t", "Agsym_t *", 0, 0, 0};
static swig_type_info _swigt__p_FILE = {"_p_FILE", "FILE *", 0, 0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "void **", 0, 0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Agedge_t,
  &_swigt__p_Agnode_t,
  &_swigt__p_Agraph_t,
  &_swigt__p_Agsym_t,
  &_swigt__p_FILE,
  &_swigt__p_p_void,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_Agedge_t[] = {  {&_swigt__p_Agedge_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Agnode_t[] = {  {&_swigt__p_Agnode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Agraph_t[] = {  {&_swigt__p_Agraph_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Agsym_t[] = {  {&_swigt__p_Agsym_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FILE[] = {  {&_swigt__p_FILE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Agedge_t,
  _swigc__p_Agnode_t,
  _swigc__p_Agraph_t,
  _swigc__p_Agsym_t,
  _swigc__p_FILE,
  _swigc__p_p_void,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* end header section */
/* vdecl subsection */
static int le_swig__p_FILE=0; /* handle for  */
static int le_swig__p_Agedge_t=0; /* handle for  */
static int le_swig__p_Agsym_t=0; /* handle for  */
static int le_swig__p_Agraph_t=0; /* handle for  */
static int le_swig__p_Agnode_t=0; /* handle for  */
static int le_swig__p_p_void=0; /* handle for  */
static int le_swig__p_void=0; /* handle for  */
/* end vdecl subsection */
/* wrapper section */
ZEND_NAMED_FUNCTION(_wrap_graph__SWIG_0) {
    char *arg1 = (char *) 0 ;
    Agraph_t *result;
    zval **args[1];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 1) || (zend_get_parameters_array_ex(1, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /*@/home/ellson/FIX/Linux.i686/share/swig/1.3.26/php4/utils.i,23,CONVERT_STRING_IN@*/
        convert_to_string_ex(args[0]);
        arg1 = (char *) Z_STRVAL_PP(args[0]);
        /*@@*/;
    }
    result = (Agraph_t *)graph(arg1);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agraph_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_digraph) {
    char *arg1 = (char *) 0 ;
    Agraph_t *result;
    zval **args[1];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 1) || (zend_get_parameters_array_ex(1, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /*@/home/ellson/FIX/Linux.i686/share/swig/1.3.26/php4/utils.i,23,CONVERT_STRING_IN@*/
        convert_to_string_ex(args[0]);
        arg1 = (char *) Z_STRVAL_PP(args[0]);
        /*@@*/;
    }
    result = (Agraph_t *)digraph(arg1);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agraph_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_strictgraph) {
    char *arg1 = (char *) 0 ;
    Agraph_t *result;
    zval **args[1];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 1) || (zend_get_parameters_array_ex(1, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /*@/home/ellson/FIX/Linux.i686/share/swig/1.3.26/php4/utils.i,23,CONVERT_STRING_IN@*/
        convert_to_string_ex(args[0]);
        arg1 = (char *) Z_STRVAL_PP(args[0]);
        /*@@*/;
    }
    result = (Agraph_t *)strictgraph(arg1);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agraph_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_strictdigraph) {
    char *arg1 = (char *) 0 ;
    Agraph_t *result;
    zval **args[1];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 1) || (zend_get_parameters_array_ex(1, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /*@/home/ellson/FIX/Linux.i686/share/swig/1.3.26/php4/utils.i,23,CONVERT_STRING_IN@*/
        convert_to_string_ex(args[0]);
        arg1 = (char *) Z_STRVAL_PP(args[0]);
        /*@@*/;
    }
    result = (Agraph_t *)strictdigraph(arg1);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agraph_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_readstring) {
    char *arg1 = (char *) 0 ;
    Agraph_t *result;
    zval **args[1];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 1) || (zend_get_parameters_array_ex(1, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /*@/home/ellson/FIX/Linux.i686/share/swig/1.3.26/php4/utils.i,23,CONVERT_STRING_IN@*/
        convert_to_string_ex(args[0]);
        arg1 = (char *) Z_STRVAL_PP(args[0]);
        /*@@*/;
    }
    result = (Agraph_t *)readstring(arg1);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agraph_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_read__SWIG_0) {
    char *arg1 = (char *) 0 ;
    Agraph_t *result;
    zval **args[1];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 1) || (zend_get_parameters_array_ex(1, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /*@/home/ellson/FIX/Linux.i686/share/swig/1.3.26/php4/utils.i,23,CONVERT_STRING_IN@*/
        convert_to_string_ex(args[0]);
        arg1 = (char *) Z_STRVAL_PP(args[0]);
        /*@@*/;
    }
    result = (Agraph_t *)read(arg1);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agraph_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_read__SWIG_1) {
    FILE *arg1 = (FILE *) 0 ;
    Agraph_t *result;
    zval **args[1];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 1) || (zend_get_parameters_array_ex(1, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_FILE, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of read. Expected SWIGTYPE_p_FILE");
        }
    }
    result = (Agraph_t *)read(arg1);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agraph_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_read) {
    int argc;
    zval **argv[1];
    int ii;
    
    argc = ZEND_NUM_ARGS();
    zend_get_parameters_array_ex(argc,argv);
    if (argc == 1) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_FILE, 0) < 0)? 0:1;
        }
        if (_v) {
            return _wrap_read__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
        }
    }
    if (argc == 1) {
        int _v;
        _v = (Z_TYPE_PP(argv[0]) == IS_LONG ||
        Z_TYPE_PP(argv[0]) == IS_DOUBLE ||
        Z_TYPE_PP(argv[0]) == IS_STRING) ? 1 : 0; 
        if (_v) {
            return _wrap_read__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
        }
    }
    
    /*No matching function for overloaded 'read'*/
    
}


ZEND_NAMED_FUNCTION(_wrap_graph__SWIG_1) {
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    char *arg2 = (char *) 0 ;
    Agraph_t *result;
    zval **args[2];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 2) || (zend_get_parameters_array_ex(2, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agraph_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of graph. Expected SWIGTYPE_p_Agraph_t");
        }
    }
    {
        /*@/home/ellson/FIX/Linux.i686/share/swig/1.3.26/php4/utils.i,23,CONVERT_STRING_IN@*/
        convert_to_string_ex(args[1]);
        arg2 = (char *) Z_STRVAL_PP(args[1]);
        /*@@*/;
    }
    result = (Agraph_t *)graph(arg1,arg2);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agraph_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_graph) {
    int argc;
    zval **argv[2];
    int ii;
    
    argc = ZEND_NUM_ARGS();
    zend_get_parameters_array_ex(argc,argv);
    if (argc == 1) {
        int _v;
        _v = (Z_TYPE_PP(argv[0]) == IS_LONG ||
        Z_TYPE_PP(argv[0]) == IS_DOUBLE ||
        Z_TYPE_PP(argv[0]) == IS_STRING) ? 1 : 0; 
        if (_v) {
            return _wrap_graph__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
        }
    }
    if (argc == 2) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agraph_t, 0) < 0)? 0:1;
        }
        if (_v) {
            _v = (Z_TYPE_PP(argv[1]) == IS_LONG ||
            Z_TYPE_PP(argv[1]) == IS_DOUBLE ||
            Z_TYPE_PP(argv[1]) == IS_STRING) ? 1 : 0; 
            if (_v) {
                return _wrap_graph__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
            }
        }
    }
    
    /*No matching function for overloaded 'graph'*/
    
}


ZEND_NAMED_FUNCTION(_wrap_node) {
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    char *arg2 = (char *) 0 ;
    Agnode_t *result;
    zval **args[2];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 2) || (zend_get_parameters_array_ex(2, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agraph_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of node. Expected SWIGTYPE_p_Agraph_t");
        }
    }
    {
        /*@/home/ellson/FIX/Linux.i686/share/swig/1.3.26/php4/utils.i,23,CONVERT_STRING_IN@*/
        convert_to_string_ex(args[1]);
        arg2 = (char *) Z_STRVAL_PP(args[1]);
        /*@@*/;
    }
    result = (Agnode_t *)node(arg1,arg2);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agnode_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_edge__SWIG_0) {
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agnode_t *arg2 = (Agnode_t *) 0 ;
    Agedge_t *result;
    zval **args[2];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 2) || (zend_get_parameters_array_ex(2, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agnode_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of edge. Expected SWIGTYPE_p_Agnode_t");
        }
    }
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_Agnode_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of edge. Expected SWIGTYPE_p_Agnode_t");
        }
    }
    result = (Agedge_t *)edge(arg1,arg2);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agedge_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_edge__SWIG_1) {
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    char *arg2 = (char *) 0 ;
    Agedge_t *result;
    zval **args[2];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 2) || (zend_get_parameters_array_ex(2, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agnode_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of edge. Expected SWIGTYPE_p_Agnode_t");
        }
    }
    {
        /*@/home/ellson/FIX/Linux.i686/share/swig/1.3.26/php4/utils.i,23,CONVERT_STRING_IN@*/
        convert_to_string_ex(args[1]);
        arg2 = (char *) Z_STRVAL_PP(args[1]);
        /*@@*/;
    }
    result = (Agedge_t *)edge(arg1,arg2);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agedge_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_edge__SWIG_2) {
    char *arg1 = (char *) 0 ;
    Agnode_t *arg2 = (Agnode_t *) 0 ;
    Agedge_t *result;
    zval **args[2];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 2) || (zend_get_parameters_array_ex(2, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /*@/home/ellson/FIX/Linux.i686/share/swig/1.3.26/php4/utils.i,23,CONVERT_STRING_IN@*/
        convert_to_string_ex(args[0]);
        arg1 = (char *) Z_STRVAL_PP(args[0]);
        /*@@*/;
    }
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_Agnode_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of edge. Expected SWIGTYPE_p_Agnode_t");
        }
    }
    result = (Agedge_t *)edge(arg1,arg2);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agedge_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_edge__SWIG_3) {
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    Agedge_t *result;
    zval **args[3];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 3) || (zend_get_parameters_array_ex(3, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agraph_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of edge. Expected SWIGTYPE_p_Agraph_t");
        }
    }
    {
        /*@/home/ellson/FIX/Linux.i686/share/swig/1.3.26/php4/utils.i,23,CONVERT_STRING_IN@*/
        convert_to_string_ex(args[1]);
        arg2 = (char *) Z_STRVAL_PP(args[1]);
        /*@@*/;
    }
    {
        /*@/home/ellson/FIX/Linux.i686/share/swig/1.3.26/php4/utils.i,23,CONVERT_STRING_IN@*/
        convert_to_string_ex(args[2]);
        arg3 = (char *) Z_STRVAL_PP(args[2]);
        /*@@*/;
    }
    result = (Agedge_t *)edge(arg1,arg2,arg3);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agedge_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_edge) {
    int argc;
    zval **argv[3];
    int ii;
    
    argc = ZEND_NUM_ARGS();
    zend_get_parameters_array_ex(argc,argv);
    if (argc == 2) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agnode_t, 0) < 0)? 0:1;
        }
        if (_v) {
            {
                /* typecheck SWIGTYPE * */
                void *tmp;
                _v = (SWIG_ConvertPtr( *argv[1], (void**)&tmp, SWIGTYPE_p_Agnode_t, 0) < 0)? 0:1;
            }
            if (_v) {
                return _wrap_edge__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agnode_t, 0) < 0)? 0:1;
        }
        if (_v) {
            _v = (Z_TYPE_PP(argv[1]) == IS_LONG ||
            Z_TYPE_PP(argv[1]) == IS_DOUBLE ||
            Z_TYPE_PP(argv[1]) == IS_STRING) ? 1 : 0; 
            if (_v) {
                return _wrap_edge__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
            }
        }
    }
    if (argc == 2) {
        int _v;
        _v = (Z_TYPE_PP(argv[0]) == IS_LONG ||
        Z_TYPE_PP(argv[0]) == IS_DOUBLE ||
        Z_TYPE_PP(argv[0]) == IS_STRING) ? 1 : 0; 
        if (_v) {
            {
                /* typecheck SWIGTYPE * */
                void *tmp;
                _v = (SWIG_ConvertPtr( *argv[1], (void**)&tmp, SWIGTYPE_p_Agnode_t, 0) < 0)? 0:1;
            }
            if (_v) {
                return _wrap_edge__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agraph_t, 0) < 0)? 0:1;
        }
        if (_v) {
            _v = (Z_TYPE_PP(argv[1]) == IS_LONG ||
            Z_TYPE_PP(argv[1]) == IS_DOUBLE ||
            Z_TYPE_PP(argv[1]) == IS_STRING) ? 1 : 0; 
            if (_v) {
                _v = (Z_TYPE_PP(argv[2]) == IS_LONG ||
                Z_TYPE_PP(argv[2]) == IS_DOUBLE ||
                Z_TYPE_PP(argv[2]) == IS_STRING) ? 1 : 0; 
                if (_v) {
                    return _wrap_edge__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU);
                }
            }
        }
    }
    
    /*No matching function for overloaded 'edge'*/
    
}


ZEND_NAMED_FUNCTION(_wrap_setv__SWIG_0) {
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    char *result;
    zval **args[3];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 3) || (zend_get_parameters_array_ex(3, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agraph_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of setv. Expected SWIGTYPE_p_Agraph_t");
        }
    }
    {
        /*@/home/ellson/FIX/Linux.i686/share/swig/1.3.26/php4/utils.i,23,CONVERT_STRING_IN@*/
        convert_to_string_ex(args[1]);
        arg2 = (char *) Z_STRVAL_PP(args[1]);
        /*@@*/;
    }
    {
        /*@/home/ellson/FIX/Linux.i686/share/swig/1.3.26/php4/utils.i,23,CONVERT_STRING_IN@*/
        convert_to_string_ex(args[2]);
        arg3 = (char *) Z_STRVAL_PP(args[2]);
        /*@@*/;
    }
    result = (char *)setv(arg1,arg2,arg3);
    
    {
        if(!result) {
            ZVAL_NULL(return_value);
        } else {
            ZVAL_STRING(return_value,result, 1);
        }
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_setv__SWIG_1) {
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    char *result;
    zval **args[3];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 3) || (zend_get_parameters_array_ex(3, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agnode_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of setv. Expected SWIGTYPE_p_Agnode_t");
        }
    }
    {
        /*@/home/ellson/FIX/Linux.i686/share/swig/1.3.26/php4/utils.i,23,CONVERT_STRING_IN@*/
        convert_to_string_ex(args[1]);
        arg2 = (char *) Z_STRVAL_PP(args[1]);
        /*@@*/;
    }
    {
        /*@/home/ellson/FIX/Linux.i686/share/swig/1.3.26/php4/utils.i,23,CONVERT_STRING_IN@*/
        convert_to_string_ex(args[2]);
        arg3 = (char *) Z_STRVAL_PP(args[2]);
        /*@@*/;
    }
    result = (char *)setv(arg1,arg2,arg3);
    
    {
        if(!result) {
            ZVAL_NULL(return_value);
        } else {
            ZVAL_STRING(return_value,result, 1);
        }
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_setv__SWIG_2) {
    Agedge_t *arg1 = (Agedge_t *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    char *result;
    zval **args[3];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 3) || (zend_get_parameters_array_ex(3, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agedge_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of setv. Expected SWIGTYPE_p_Agedge_t");
        }
    }
    {
        /*@/home/ellson/FIX/Linux.i686/share/swig/1.3.26/php4/utils.i,23,CONVERT_STRING_IN@*/
        convert_to_string_ex(args[1]);
        arg2 = (char *) Z_STRVAL_PP(args[1]);
        /*@@*/;
    }
    {
        /*@/home/ellson/FIX/Linux.i686/share/swig/1.3.26/php4/utils.i,23,CONVERT_STRING_IN@*/
        convert_to_string_ex(args[2]);
        arg3 = (char *) Z_STRVAL_PP(args[2]);
        /*@@*/;
    }
    result = (char *)setv(arg1,arg2,arg3);
    
    {
        if(!result) {
            ZVAL_NULL(return_value);
        } else {
            ZVAL_STRING(return_value,result, 1);
        }
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_setv__SWIG_3) {
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agsym_t *arg2 = (Agsym_t *) 0 ;
    char *arg3 = (char *) 0 ;
    char *result;
    zval **args[3];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 3) || (zend_get_parameters_array_ex(3, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agraph_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of setv. Expected SWIGTYPE_p_Agraph_t");
        }
    }
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_Agsym_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of setv. Expected SWIGTYPE_p_Agsym_t");
        }
    }
    {
        /*@/home/ellson/FIX/Linux.i686/share/swig/1.3.26/php4/utils.i,23,CONVERT_STRING_IN@*/
        convert_to_string_ex(args[2]);
        arg3 = (char *) Z_STRVAL_PP(args[2]);
        /*@@*/;
    }
    result = (char *)setv(arg1,arg2,arg3);
    
    {
        if(!result) {
            ZVAL_NULL(return_value);
        } else {
            ZVAL_STRING(return_value,result, 1);
        }
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_setv__SWIG_4) {
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agsym_t *arg2 = (Agsym_t *) 0 ;
    char *arg3 = (char *) 0 ;
    char *result;
    zval **args[3];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 3) || (zend_get_parameters_array_ex(3, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agnode_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of setv. Expected SWIGTYPE_p_Agnode_t");
        }
    }
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_Agsym_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of setv. Expected SWIGTYPE_p_Agsym_t");
        }
    }
    {
        /*@/home/ellson/FIX/Linux.i686/share/swig/1.3.26/php4/utils.i,23,CONVERT_STRING_IN@*/
        convert_to_string_ex(args[2]);
        arg3 = (char *) Z_STRVAL_PP(args[2]);
        /*@@*/;
    }
    result = (char *)setv(arg1,arg2,arg3);
    
    {
        if(!result) {
            ZVAL_NULL(return_value);
        } else {
            ZVAL_STRING(return_value,result, 1);
        }
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_setv__SWIG_5) {
    Agedge_t *arg1 = (Agedge_t *) 0 ;
    Agsym_t *arg2 = (Agsym_t *) 0 ;
    char *arg3 = (char *) 0 ;
    char *result;
    zval **args[3];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 3) || (zend_get_parameters_array_ex(3, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agedge_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of setv. Expected SWIGTYPE_p_Agedge_t");
        }
    }
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_Agsym_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of setv. Expected SWIGTYPE_p_Agsym_t");
        }
    }
    {
        /*@/home/ellson/FIX/Linux.i686/share/swig/1.3.26/php4/utils.i,23,CONVERT_STRING_IN@*/
        convert_to_string_ex(args[2]);
        arg3 = (char *) Z_STRVAL_PP(args[2]);
        /*@@*/;
    }
    result = (char *)setv(arg1,arg2,arg3);
    
    {
        if(!result) {
            ZVAL_NULL(return_value);
        } else {
            ZVAL_STRING(return_value,result, 1);
        }
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_setv) {
    int argc;
    zval **argv[3];
    int ii;
    
    argc = ZEND_NUM_ARGS();
    zend_get_parameters_array_ex(argc,argv);
    if (argc == 3) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agraph_t, 0) < 0)? 0:1;
        }
        if (_v) {
            {
                /* typecheck SWIGTYPE * */
                void *tmp;
                _v = (SWIG_ConvertPtr( *argv[1], (void**)&tmp, SWIGTYPE_p_Agsym_t, 0) < 0)? 0:1;
            }
            if (_v) {
                _v = (Z_TYPE_PP(argv[2]) == IS_LONG ||
                Z_TYPE_PP(argv[2]) == IS_DOUBLE ||
                Z_TYPE_PP(argv[2]) == IS_STRING) ? 1 : 0; 
                if (_v) {
                    return _wrap_setv__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agnode_t, 0) < 0)? 0:1;
        }
        if (_v) {
            {
                /* typecheck SWIGTYPE * */
                void *tmp;
                _v = (SWIG_ConvertPtr( *argv[1], (void**)&tmp, SWIGTYPE_p_Agsym_t, 0) < 0)? 0:1;
            }
            if (_v) {
                _v = (Z_TYPE_PP(argv[2]) == IS_LONG ||
                Z_TYPE_PP(argv[2]) == IS_DOUBLE ||
                Z_TYPE_PP(argv[2]) == IS_STRING) ? 1 : 0; 
                if (_v) {
                    return _wrap_setv__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agedge_t, 0) < 0)? 0:1;
        }
        if (_v) {
            {
                /* typecheck SWIGTYPE * */
                void *tmp;
                _v = (SWIG_ConvertPtr( *argv[1], (void**)&tmp, SWIGTYPE_p_Agsym_t, 0) < 0)? 0:1;
            }
            if (_v) {
                _v = (Z_TYPE_PP(argv[2]) == IS_LONG ||
                Z_TYPE_PP(argv[2]) == IS_DOUBLE ||
                Z_TYPE_PP(argv[2]) == IS_STRING) ? 1 : 0; 
                if (_v) {
                    return _wrap_setv__SWIG_5(INTERNAL_FUNCTION_PARAM_PASSTHRU);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agraph_t, 0) < 0)? 0:1;
        }
        if (_v) {
            _v = (Z_TYPE_PP(argv[1]) == IS_LONG ||
            Z_TYPE_PP(argv[1]) == IS_DOUBLE ||
            Z_TYPE_PP(argv[1]) == IS_STRING) ? 1 : 0; 
            if (_v) {
                _v = (Z_TYPE_PP(argv[2]) == IS_LONG ||
                Z_TYPE_PP(argv[2]) == IS_DOUBLE ||
                Z_TYPE_PP(argv[2]) == IS_STRING) ? 1 : 0; 
                if (_v) {
                    return _wrap_setv__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agnode_t, 0) < 0)? 0:1;
        }
        if (_v) {
            _v = (Z_TYPE_PP(argv[1]) == IS_LONG ||
            Z_TYPE_PP(argv[1]) == IS_DOUBLE ||
            Z_TYPE_PP(argv[1]) == IS_STRING) ? 1 : 0; 
            if (_v) {
                _v = (Z_TYPE_PP(argv[2]) == IS_LONG ||
                Z_TYPE_PP(argv[2]) == IS_DOUBLE ||
                Z_TYPE_PP(argv[2]) == IS_STRING) ? 1 : 0; 
                if (_v) {
                    return _wrap_setv__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agedge_t, 0) < 0)? 0:1;
        }
        if (_v) {
            _v = (Z_TYPE_PP(argv[1]) == IS_LONG ||
            Z_TYPE_PP(argv[1]) == IS_DOUBLE ||
            Z_TYPE_PP(argv[1]) == IS_STRING) ? 1 : 0; 
            if (_v) {
                _v = (Z_TYPE_PP(argv[2]) == IS_LONG ||
                Z_TYPE_PP(argv[2]) == IS_DOUBLE ||
                Z_TYPE_PP(argv[2]) == IS_STRING) ? 1 : 0; 
                if (_v) {
                    return _wrap_setv__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU);
                }
            }
        }
    }
    
    /*No matching function for overloaded 'setv'*/
    
}


ZEND_NAMED_FUNCTION(_wrap_getv__SWIG_0) {
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    char *arg2 = (char *) 0 ;
    char *result;
    zval **args[2];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 2) || (zend_get_parameters_array_ex(2, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agraph_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of getv. Expected SWIGTYPE_p_Agraph_t");
        }
    }
    {
        /*@/home/ellson/FIX/Linux.i686/share/swig/1.3.26/php4/utils.i,23,CONVERT_STRING_IN@*/
        convert_to_string_ex(args[1]);
        arg2 = (char *) Z_STRVAL_PP(args[1]);
        /*@@*/;
    }
    result = (char *)getv(arg1,arg2);
    
    {
        if(!result) {
            ZVAL_NULL(return_value);
        } else {
            ZVAL_STRING(return_value,result, 1);
        }
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_getv__SWIG_1) {
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    char *arg2 = (char *) 0 ;
    char *result;
    zval **args[2];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 2) || (zend_get_parameters_array_ex(2, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agnode_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of getv. Expected SWIGTYPE_p_Agnode_t");
        }
    }
    {
        /*@/home/ellson/FIX/Linux.i686/share/swig/1.3.26/php4/utils.i,23,CONVERT_STRING_IN@*/
        convert_to_string_ex(args[1]);
        arg2 = (char *) Z_STRVAL_PP(args[1]);
        /*@@*/;
    }
    result = (char *)getv(arg1,arg2);
    
    {
        if(!result) {
            ZVAL_NULL(return_value);
        } else {
            ZVAL_STRING(return_value,result, 1);
        }
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_getv__SWIG_2) {
    Agedge_t *arg1 = (Agedge_t *) 0 ;
    char *arg2 = (char *) 0 ;
    char *result;
    zval **args[2];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 2) || (zend_get_parameters_array_ex(2, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agedge_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of getv. Expected SWIGTYPE_p_Agedge_t");
        }
    }
    {
        /*@/home/ellson/FIX/Linux.i686/share/swig/1.3.26/php4/utils.i,23,CONVERT_STRING_IN@*/
        convert_to_string_ex(args[1]);
        arg2 = (char *) Z_STRVAL_PP(args[1]);
        /*@@*/;
    }
    result = (char *)getv(arg1,arg2);
    
    {
        if(!result) {
            ZVAL_NULL(return_value);
        } else {
            ZVAL_STRING(return_value,result, 1);
        }
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_getv__SWIG_3) {
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agsym_t *arg2 = (Agsym_t *) 0 ;
    char *result;
    zval **args[2];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 2) || (zend_get_parameters_array_ex(2, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agraph_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of getv. Expected SWIGTYPE_p_Agraph_t");
        }
    }
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_Agsym_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of getv. Expected SWIGTYPE_p_Agsym_t");
        }
    }
    result = (char *)getv(arg1,arg2);
    
    {
        if(!result) {
            ZVAL_NULL(return_value);
        } else {
            ZVAL_STRING(return_value,result, 1);
        }
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_getv__SWIG_4) {
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agsym_t *arg2 = (Agsym_t *) 0 ;
    char *result;
    zval **args[2];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 2) || (zend_get_parameters_array_ex(2, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agnode_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of getv. Expected SWIGTYPE_p_Agnode_t");
        }
    }
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_Agsym_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of getv. Expected SWIGTYPE_p_Agsym_t");
        }
    }
    result = (char *)getv(arg1,arg2);
    
    {
        if(!result) {
            ZVAL_NULL(return_value);
        } else {
            ZVAL_STRING(return_value,result, 1);
        }
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_getv__SWIG_5) {
    Agedge_t *arg1 = (Agedge_t *) 0 ;
    Agsym_t *arg2 = (Agsym_t *) 0 ;
    char *result;
    zval **args[2];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 2) || (zend_get_parameters_array_ex(2, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agedge_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of getv. Expected SWIGTYPE_p_Agedge_t");
        }
    }
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_Agsym_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of getv. Expected SWIGTYPE_p_Agsym_t");
        }
    }
    result = (char *)getv(arg1,arg2);
    
    {
        if(!result) {
            ZVAL_NULL(return_value);
        } else {
            ZVAL_STRING(return_value,result, 1);
        }
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_getv) {
    int argc;
    zval **argv[2];
    int ii;
    
    argc = ZEND_NUM_ARGS();
    zend_get_parameters_array_ex(argc,argv);
    if (argc == 2) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agraph_t, 0) < 0)? 0:1;
        }
        if (_v) {
            {
                /* typecheck SWIGTYPE * */
                void *tmp;
                _v = (SWIG_ConvertPtr( *argv[1], (void**)&tmp, SWIGTYPE_p_Agsym_t, 0) < 0)? 0:1;
            }
            if (_v) {
                return _wrap_getv__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agnode_t, 0) < 0)? 0:1;
        }
        if (_v) {
            {
                /* typecheck SWIGTYPE * */
                void *tmp;
                _v = (SWIG_ConvertPtr( *argv[1], (void**)&tmp, SWIGTYPE_p_Agsym_t, 0) < 0)? 0:1;
            }
            if (_v) {
                return _wrap_getv__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agedge_t, 0) < 0)? 0:1;
        }
        if (_v) {
            {
                /* typecheck SWIGTYPE * */
                void *tmp;
                _v = (SWIG_ConvertPtr( *argv[1], (void**)&tmp, SWIGTYPE_p_Agsym_t, 0) < 0)? 0:1;
            }
            if (_v) {
                return _wrap_getv__SWIG_5(INTERNAL_FUNCTION_PARAM_PASSTHRU);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agraph_t, 0) < 0)? 0:1;
        }
        if (_v) {
            _v = (Z_TYPE_PP(argv[1]) == IS_LONG ||
            Z_TYPE_PP(argv[1]) == IS_DOUBLE ||
            Z_TYPE_PP(argv[1]) == IS_STRING) ? 1 : 0; 
            if (_v) {
                return _wrap_getv__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agnode_t, 0) < 0)? 0:1;
        }
        if (_v) {
            _v = (Z_TYPE_PP(argv[1]) == IS_LONG ||
            Z_TYPE_PP(argv[1]) == IS_DOUBLE ||
            Z_TYPE_PP(argv[1]) == IS_STRING) ? 1 : 0; 
            if (_v) {
                return _wrap_getv__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agedge_t, 0) < 0)? 0:1;
        }
        if (_v) {
            _v = (Z_TYPE_PP(argv[1]) == IS_LONG ||
            Z_TYPE_PP(argv[1]) == IS_DOUBLE ||
            Z_TYPE_PP(argv[1]) == IS_STRING) ? 1 : 0; 
            if (_v) {
                return _wrap_getv__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU);
            }
        }
    }
    
    /*No matching function for overloaded 'getv'*/
    
}


ZEND_NAMED_FUNCTION(_wrap_nameof__SWIG_0) {
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    char *result;
    zval **args[1];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 1) || (zend_get_parameters_array_ex(1, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agraph_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nameof. Expected SWIGTYPE_p_Agraph_t");
        }
    }
    result = (char *)nameof(arg1);
    
    {
        if(!result) {
            ZVAL_NULL(return_value);
        } else {
            ZVAL_STRING(return_value,result, 1);
        }
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_nameof__SWIG_1) {
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    char *result;
    zval **args[1];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 1) || (zend_get_parameters_array_ex(1, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agnode_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nameof. Expected SWIGTYPE_p_Agnode_t");
        }
    }
    result = (char *)nameof(arg1);
    
    {
        if(!result) {
            ZVAL_NULL(return_value);
        } else {
            ZVAL_STRING(return_value,result, 1);
        }
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_nameof__SWIG_2) {
    Agsym_t *arg1 = (Agsym_t *) 0 ;
    char *result;
    zval **args[1];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 1) || (zend_get_parameters_array_ex(1, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agsym_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nameof. Expected SWIGTYPE_p_Agsym_t");
        }
    }
    result = (char *)nameof(arg1);
    
    {
        if(!result) {
            ZVAL_NULL(return_value);
        } else {
            ZVAL_STRING(return_value,result, 1);
        }
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_nameof) {
    int argc;
    zval **argv[1];
    int ii;
    
    argc = ZEND_NUM_ARGS();
    zend_get_parameters_array_ex(argc,argv);
    if (argc == 1) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agraph_t, 0) < 0)? 0:1;
        }
        if (_v) {
            return _wrap_nameof__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
        }
    }
    if (argc == 1) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agnode_t, 0) < 0)? 0:1;
        }
        if (_v) {
            return _wrap_nameof__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
        }
    }
    if (argc == 1) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agsym_t, 0) < 0)? 0:1;
        }
        if (_v) {
            return _wrap_nameof__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU);
        }
    }
    
    /*No matching function for overloaded 'nameof'*/
    
}


ZEND_NAMED_FUNCTION(_wrap_findsubg) {
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    char *arg2 = (char *) 0 ;
    Agraph_t *result;
    zval **args[2];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 2) || (zend_get_parameters_array_ex(2, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agraph_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of findsubg. Expected SWIGTYPE_p_Agraph_t");
        }
    }
    {
        /*@/home/ellson/FIX/Linux.i686/share/swig/1.3.26/php4/utils.i,23,CONVERT_STRING_IN@*/
        convert_to_string_ex(args[1]);
        arg2 = (char *) Z_STRVAL_PP(args[1]);
        /*@@*/;
    }
    result = (Agraph_t *)findsubg(arg1,arg2);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agraph_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_findnode) {
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    char *arg2 = (char *) 0 ;
    Agnode_t *result;
    zval **args[2];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 2) || (zend_get_parameters_array_ex(2, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agraph_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of findnode. Expected SWIGTYPE_p_Agraph_t");
        }
    }
    {
        /*@/home/ellson/FIX/Linux.i686/share/swig/1.3.26/php4/utils.i,23,CONVERT_STRING_IN@*/
        convert_to_string_ex(args[1]);
        arg2 = (char *) Z_STRVAL_PP(args[1]);
        /*@@*/;
    }
    result = (Agnode_t *)findnode(arg1,arg2);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agnode_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_findedge) {
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agnode_t *arg2 = (Agnode_t *) 0 ;
    Agedge_t *result;
    zval **args[2];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 2) || (zend_get_parameters_array_ex(2, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agnode_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of findedge. Expected SWIGTYPE_p_Agnode_t");
        }
    }
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_Agnode_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of findedge. Expected SWIGTYPE_p_Agnode_t");
        }
    }
    result = (Agedge_t *)findedge(arg1,arg2);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agedge_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_findattr__SWIG_0) {
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    char *arg2 = (char *) 0 ;
    Agsym_t *result;
    zval **args[2];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 2) || (zend_get_parameters_array_ex(2, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agraph_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of findattr. Expected SWIGTYPE_p_Agraph_t");
        }
    }
    {
        /*@/home/ellson/FIX/Linux.i686/share/swig/1.3.26/php4/utils.i,23,CONVERT_STRING_IN@*/
        convert_to_string_ex(args[1]);
        arg2 = (char *) Z_STRVAL_PP(args[1]);
        /*@@*/;
    }
    result = (Agsym_t *)findattr(arg1,arg2);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agsym_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_findattr__SWIG_1) {
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    char *arg2 = (char *) 0 ;
    Agsym_t *result;
    zval **args[2];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 2) || (zend_get_parameters_array_ex(2, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agnode_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of findattr. Expected SWIGTYPE_p_Agnode_t");
        }
    }
    {
        /*@/home/ellson/FIX/Linux.i686/share/swig/1.3.26/php4/utils.i,23,CONVERT_STRING_IN@*/
        convert_to_string_ex(args[1]);
        arg2 = (char *) Z_STRVAL_PP(args[1]);
        /*@@*/;
    }
    result = (Agsym_t *)findattr(arg1,arg2);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agsym_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_findattr__SWIG_2) {
    Agedge_t *arg1 = (Agedge_t *) 0 ;
    char *arg2 = (char *) 0 ;
    Agsym_t *result;
    zval **args[2];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 2) || (zend_get_parameters_array_ex(2, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agedge_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of findattr. Expected SWIGTYPE_p_Agedge_t");
        }
    }
    {
        /*@/home/ellson/FIX/Linux.i686/share/swig/1.3.26/php4/utils.i,23,CONVERT_STRING_IN@*/
        convert_to_string_ex(args[1]);
        arg2 = (char *) Z_STRVAL_PP(args[1]);
        /*@@*/;
    }
    result = (Agsym_t *)findattr(arg1,arg2);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agsym_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_findattr) {
    int argc;
    zval **argv[2];
    int ii;
    
    argc = ZEND_NUM_ARGS();
    zend_get_parameters_array_ex(argc,argv);
    if (argc == 2) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agraph_t, 0) < 0)? 0:1;
        }
        if (_v) {
            _v = (Z_TYPE_PP(argv[1]) == IS_LONG ||
            Z_TYPE_PP(argv[1]) == IS_DOUBLE ||
            Z_TYPE_PP(argv[1]) == IS_STRING) ? 1 : 0; 
            if (_v) {
                return _wrap_findattr__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agnode_t, 0) < 0)? 0:1;
        }
        if (_v) {
            _v = (Z_TYPE_PP(argv[1]) == IS_LONG ||
            Z_TYPE_PP(argv[1]) == IS_DOUBLE ||
            Z_TYPE_PP(argv[1]) == IS_STRING) ? 1 : 0; 
            if (_v) {
                return _wrap_findattr__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agedge_t, 0) < 0)? 0:1;
        }
        if (_v) {
            _v = (Z_TYPE_PP(argv[1]) == IS_LONG ||
            Z_TYPE_PP(argv[1]) == IS_DOUBLE ||
            Z_TYPE_PP(argv[1]) == IS_STRING) ? 1 : 0; 
            if (_v) {
                return _wrap_findattr__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU);
            }
        }
    }
    
    /*No matching function for overloaded 'findattr'*/
    
}


ZEND_NAMED_FUNCTION(_wrap_headof) {
    Agedge_t *arg1 = (Agedge_t *) 0 ;
    Agnode_t *result;
    zval **args[1];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 1) || (zend_get_parameters_array_ex(1, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agedge_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of headof. Expected SWIGTYPE_p_Agedge_t");
        }
    }
    result = (Agnode_t *)headof(arg1);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agnode_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_tailof) {
    Agedge_t *arg1 = (Agedge_t *) 0 ;
    Agnode_t *result;
    zval **args[1];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 1) || (zend_get_parameters_array_ex(1, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agedge_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of tailof. Expected SWIGTYPE_p_Agedge_t");
        }
    }
    result = (Agnode_t *)tailof(arg1);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agnode_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_graphof__SWIG_0) {
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agraph_t *result;
    zval **args[1];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 1) || (zend_get_parameters_array_ex(1, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agraph_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of graphof. Expected SWIGTYPE_p_Agraph_t");
        }
    }
    result = (Agraph_t *)graphof(arg1);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agraph_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_graphof__SWIG_1) {
    Agedge_t *arg1 = (Agedge_t *) 0 ;
    Agraph_t *result;
    zval **args[1];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 1) || (zend_get_parameters_array_ex(1, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agedge_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of graphof. Expected SWIGTYPE_p_Agedge_t");
        }
    }
    result = (Agraph_t *)graphof(arg1);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agraph_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_graphof__SWIG_2) {
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agraph_t *result;
    zval **args[1];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 1) || (zend_get_parameters_array_ex(1, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agnode_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of graphof. Expected SWIGTYPE_p_Agnode_t");
        }
    }
    result = (Agraph_t *)graphof(arg1);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agraph_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_graphof) {
    int argc;
    zval **argv[1];
    int ii;
    
    argc = ZEND_NUM_ARGS();
    zend_get_parameters_array_ex(argc,argv);
    if (argc == 1) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agraph_t, 0) < 0)? 0:1;
        }
        if (_v) {
            return _wrap_graphof__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
        }
    }
    if (argc == 1) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agedge_t, 0) < 0)? 0:1;
        }
        if (_v) {
            return _wrap_graphof__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
        }
    }
    if (argc == 1) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agnode_t, 0) < 0)? 0:1;
        }
        if (_v) {
            return _wrap_graphof__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU);
        }
    }
    
    /*No matching function for overloaded 'graphof'*/
    
}


ZEND_NAMED_FUNCTION(_wrap_rootof) {
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agraph_t *result;
    zval **args[1];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 1) || (zend_get_parameters_array_ex(1, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agraph_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of rootof. Expected SWIGTYPE_p_Agraph_t");
        }
    }
    result = (Agraph_t *)rootof(arg1);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agraph_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_protonode) {
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agnode_t *result;
    zval **args[1];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 1) || (zend_get_parameters_array_ex(1, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agraph_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of protonode. Expected SWIGTYPE_p_Agraph_t");
        }
    }
    result = (Agnode_t *)protonode(arg1);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agnode_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_protoedge) {
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agedge_t *result;
    zval **args[1];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 1) || (zend_get_parameters_array_ex(1, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agraph_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of protoedge. Expected SWIGTYPE_p_Agraph_t");
        }
    }
    result = (Agedge_t *)protoedge(arg1);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agedge_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ok__SWIG_0) {
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    bool result;
    zval **args[1];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 1) || (zend_get_parameters_array_ex(1, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agraph_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ok. Expected SWIGTYPE_p_Agraph_t");
        }
    }
    result = (bool)ok(arg1);
    
    {
        ZVAL_BOOL(return_value,(result)?1:0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ok__SWIG_1) {
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    bool result;
    zval **args[1];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 1) || (zend_get_parameters_array_ex(1, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agnode_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ok. Expected SWIGTYPE_p_Agnode_t");
        }
    }
    result = (bool)ok(arg1);
    
    {
        ZVAL_BOOL(return_value,(result)?1:0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ok__SWIG_2) {
    Agedge_t *arg1 = (Agedge_t *) 0 ;
    bool result;
    zval **args[1];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 1) || (zend_get_parameters_array_ex(1, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agedge_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ok. Expected SWIGTYPE_p_Agedge_t");
        }
    }
    result = (bool)ok(arg1);
    
    {
        ZVAL_BOOL(return_value,(result)?1:0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ok__SWIG_3) {
    Agsym_t *arg1 = (Agsym_t *) 0 ;
    bool result;
    zval **args[1];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 1) || (zend_get_parameters_array_ex(1, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agsym_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ok. Expected SWIGTYPE_p_Agsym_t");
        }
    }
    result = (bool)ok(arg1);
    
    {
        ZVAL_BOOL(return_value,(result)?1:0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_ok) {
    int argc;
    zval **argv[1];
    int ii;
    
    argc = ZEND_NUM_ARGS();
    zend_get_parameters_array_ex(argc,argv);
    if (argc == 1) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agraph_t, 0) < 0)? 0:1;
        }
        if (_v) {
            return _wrap_ok__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
        }
    }
    if (argc == 1) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agnode_t, 0) < 0)? 0:1;
        }
        if (_v) {
            return _wrap_ok__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
        }
    }
    if (argc == 1) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agedge_t, 0) < 0)? 0:1;
        }
        if (_v) {
            return _wrap_ok__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU);
        }
    }
    if (argc == 1) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agsym_t, 0) < 0)? 0:1;
        }
        if (_v) {
            return _wrap_ok__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU);
        }
    }
    
    /*No matching function for overloaded 'ok'*/
    
}


ZEND_NAMED_FUNCTION(_wrap_firstsubg) {
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agraph_t *result;
    zval **args[1];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 1) || (zend_get_parameters_array_ex(1, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agraph_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of firstsubg. Expected SWIGTYPE_p_Agraph_t");
        }
    }
    result = (Agraph_t *)firstsubg(arg1);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agraph_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_nextsubg) {
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agraph_t *arg2 = (Agraph_t *) 0 ;
    Agraph_t *result;
    zval **args[2];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 2) || (zend_get_parameters_array_ex(2, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agraph_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nextsubg. Expected SWIGTYPE_p_Agraph_t");
        }
    }
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_Agraph_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of nextsubg. Expected SWIGTYPE_p_Agraph_t");
        }
    }
    result = (Agraph_t *)nextsubg(arg1,arg2);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agraph_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_firstsupg) {
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agraph_t *result;
    zval **args[1];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 1) || (zend_get_parameters_array_ex(1, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agraph_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of firstsupg. Expected SWIGTYPE_p_Agraph_t");
        }
    }
    result = (Agraph_t *)firstsupg(arg1);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agraph_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_nextsupg) {
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agraph_t *arg2 = (Agraph_t *) 0 ;
    Agraph_t *result;
    zval **args[2];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 2) || (zend_get_parameters_array_ex(2, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agraph_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nextsupg. Expected SWIGTYPE_p_Agraph_t");
        }
    }
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_Agraph_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of nextsupg. Expected SWIGTYPE_p_Agraph_t");
        }
    }
    result = (Agraph_t *)nextsupg(arg1,arg2);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agraph_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_firstedge__SWIG_0) {
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agedge_t *result;
    zval **args[1];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 1) || (zend_get_parameters_array_ex(1, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agraph_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of firstedge. Expected SWIGTYPE_p_Agraph_t");
        }
    }
    result = (Agedge_t *)firstedge(arg1);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agedge_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_nextedge__SWIG_0) {
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agedge_t *arg2 = (Agedge_t *) 0 ;
    Agedge_t *result;
    zval **args[2];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 2) || (zend_get_parameters_array_ex(2, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agraph_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nextedge. Expected SWIGTYPE_p_Agraph_t");
        }
    }
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_Agedge_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of nextedge. Expected SWIGTYPE_p_Agedge_t");
        }
    }
    result = (Agedge_t *)nextedge(arg1,arg2);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agedge_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_firstout__SWIG_0) {
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agedge_t *result;
    zval **args[1];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 1) || (zend_get_parameters_array_ex(1, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agraph_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of firstout. Expected SWIGTYPE_p_Agraph_t");
        }
    }
    result = (Agedge_t *)firstout(arg1);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agedge_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_nextout__SWIG_0) {
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agedge_t *arg2 = (Agedge_t *) 0 ;
    Agedge_t *result;
    zval **args[2];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 2) || (zend_get_parameters_array_ex(2, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agraph_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nextout. Expected SWIGTYPE_p_Agraph_t");
        }
    }
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_Agedge_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of nextout. Expected SWIGTYPE_p_Agedge_t");
        }
    }
    result = (Agedge_t *)nextout(arg1,arg2);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agedge_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_firstedge__SWIG_1) {
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agedge_t *result;
    zval **args[1];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 1) || (zend_get_parameters_array_ex(1, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agnode_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of firstedge. Expected SWIGTYPE_p_Agnode_t");
        }
    }
    result = (Agedge_t *)firstedge(arg1);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agedge_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_firstedge) {
    int argc;
    zval **argv[1];
    int ii;
    
    argc = ZEND_NUM_ARGS();
    zend_get_parameters_array_ex(argc,argv);
    if (argc == 1) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agraph_t, 0) < 0)? 0:1;
        }
        if (_v) {
            return _wrap_firstedge__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
        }
    }
    if (argc == 1) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agnode_t, 0) < 0)? 0:1;
        }
        if (_v) {
            return _wrap_firstedge__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
        }
    }
    
    /*No matching function for overloaded 'firstedge'*/
    
}


ZEND_NAMED_FUNCTION(_wrap_nextedge__SWIG_1) {
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agedge_t *arg2 = (Agedge_t *) 0 ;
    Agedge_t *result;
    zval **args[2];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 2) || (zend_get_parameters_array_ex(2, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agnode_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nextedge. Expected SWIGTYPE_p_Agnode_t");
        }
    }
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_Agedge_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of nextedge. Expected SWIGTYPE_p_Agedge_t");
        }
    }
    result = (Agedge_t *)nextedge(arg1,arg2);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agedge_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_nextedge) {
    int argc;
    zval **argv[2];
    int ii;
    
    argc = ZEND_NUM_ARGS();
    zend_get_parameters_array_ex(argc,argv);
    if (argc == 2) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agraph_t, 0) < 0)? 0:1;
        }
        if (_v) {
            {
                /* typecheck SWIGTYPE * */
                void *tmp;
                _v = (SWIG_ConvertPtr( *argv[1], (void**)&tmp, SWIGTYPE_p_Agedge_t, 0) < 0)? 0:1;
            }
            if (_v) {
                return _wrap_nextedge__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agnode_t, 0) < 0)? 0:1;
        }
        if (_v) {
            {
                /* typecheck SWIGTYPE * */
                void *tmp;
                _v = (SWIG_ConvertPtr( *argv[1], (void**)&tmp, SWIGTYPE_p_Agedge_t, 0) < 0)? 0:1;
            }
            if (_v) {
                return _wrap_nextedge__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
            }
        }
    }
    
    /*No matching function for overloaded 'nextedge'*/
    
}


ZEND_NAMED_FUNCTION(_wrap_firstout__SWIG_1) {
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agedge_t *result;
    zval **args[1];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 1) || (zend_get_parameters_array_ex(1, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agnode_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of firstout. Expected SWIGTYPE_p_Agnode_t");
        }
    }
    result = (Agedge_t *)firstout(arg1);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agedge_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_firstout) {
    int argc;
    zval **argv[1];
    int ii;
    
    argc = ZEND_NUM_ARGS();
    zend_get_parameters_array_ex(argc,argv);
    if (argc == 1) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agraph_t, 0) < 0)? 0:1;
        }
        if (_v) {
            return _wrap_firstout__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
        }
    }
    if (argc == 1) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agnode_t, 0) < 0)? 0:1;
        }
        if (_v) {
            return _wrap_firstout__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
        }
    }
    
    /*No matching function for overloaded 'firstout'*/
    
}


ZEND_NAMED_FUNCTION(_wrap_nextout__SWIG_1) {
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agedge_t *arg2 = (Agedge_t *) 0 ;
    Agedge_t *result;
    zval **args[2];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 2) || (zend_get_parameters_array_ex(2, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agnode_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nextout. Expected SWIGTYPE_p_Agnode_t");
        }
    }
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_Agedge_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of nextout. Expected SWIGTYPE_p_Agedge_t");
        }
    }
    result = (Agedge_t *)nextout(arg1,arg2);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agedge_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_nextout) {
    int argc;
    zval **argv[2];
    int ii;
    
    argc = ZEND_NUM_ARGS();
    zend_get_parameters_array_ex(argc,argv);
    if (argc == 2) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agraph_t, 0) < 0)? 0:1;
        }
        if (_v) {
            {
                /* typecheck SWIGTYPE * */
                void *tmp;
                _v = (SWIG_ConvertPtr( *argv[1], (void**)&tmp, SWIGTYPE_p_Agedge_t, 0) < 0)? 0:1;
            }
            if (_v) {
                return _wrap_nextout__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agnode_t, 0) < 0)? 0:1;
        }
        if (_v) {
            {
                /* typecheck SWIGTYPE * */
                void *tmp;
                _v = (SWIG_ConvertPtr( *argv[1], (void**)&tmp, SWIGTYPE_p_Agedge_t, 0) < 0)? 0:1;
            }
            if (_v) {
                return _wrap_nextout__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
            }
        }
    }
    
    /*No matching function for overloaded 'nextout'*/
    
}


ZEND_NAMED_FUNCTION(_wrap_firsthead) {
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agnode_t *result;
    zval **args[1];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 1) || (zend_get_parameters_array_ex(1, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agnode_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of firsthead. Expected SWIGTYPE_p_Agnode_t");
        }
    }
    result = (Agnode_t *)firsthead(arg1);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agnode_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_nexthead) {
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agnode_t *arg2 = (Agnode_t *) 0 ;
    Agnode_t *result;
    zval **args[2];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 2) || (zend_get_parameters_array_ex(2, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agnode_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nexthead. Expected SWIGTYPE_p_Agnode_t");
        }
    }
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_Agnode_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of nexthead. Expected SWIGTYPE_p_Agnode_t");
        }
    }
    result = (Agnode_t *)nexthead(arg1,arg2);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agnode_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_firstin__SWIG_0) {
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agedge_t *result;
    zval **args[1];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 1) || (zend_get_parameters_array_ex(1, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agraph_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of firstin. Expected SWIGTYPE_p_Agraph_t");
        }
    }
    result = (Agedge_t *)firstin(arg1);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agedge_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_nextin__SWIG_0) {
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agedge_t *arg2 = (Agedge_t *) 0 ;
    Agedge_t *result;
    zval **args[2];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 2) || (zend_get_parameters_array_ex(2, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agnode_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nextin. Expected SWIGTYPE_p_Agnode_t");
        }
    }
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_Agedge_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of nextin. Expected SWIGTYPE_p_Agedge_t");
        }
    }
    result = (Agedge_t *)nextin(arg1,arg2);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agedge_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_firstin__SWIG_1) {
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agedge_t *result;
    zval **args[1];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 1) || (zend_get_parameters_array_ex(1, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agnode_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of firstin. Expected SWIGTYPE_p_Agnode_t");
        }
    }
    result = (Agedge_t *)firstin(arg1);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agedge_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_firstin) {
    int argc;
    zval **argv[1];
    int ii;
    
    argc = ZEND_NUM_ARGS();
    zend_get_parameters_array_ex(argc,argv);
    if (argc == 1) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agraph_t, 0) < 0)? 0:1;
        }
        if (_v) {
            return _wrap_firstin__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
        }
    }
    if (argc == 1) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agnode_t, 0) < 0)? 0:1;
        }
        if (_v) {
            return _wrap_firstin__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
        }
    }
    
    /*No matching function for overloaded 'firstin'*/
    
}


ZEND_NAMED_FUNCTION(_wrap_nextin__SWIG_1) {
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agedge_t *arg2 = (Agedge_t *) 0 ;
    Agedge_t *result;
    zval **args[2];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 2) || (zend_get_parameters_array_ex(2, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agraph_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nextin. Expected SWIGTYPE_p_Agraph_t");
        }
    }
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_Agedge_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of nextin. Expected SWIGTYPE_p_Agedge_t");
        }
    }
    result = (Agedge_t *)nextin(arg1,arg2);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agedge_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_nextin) {
    int argc;
    zval **argv[2];
    int ii;
    
    argc = ZEND_NUM_ARGS();
    zend_get_parameters_array_ex(argc,argv);
    if (argc == 2) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agnode_t, 0) < 0)? 0:1;
        }
        if (_v) {
            {
                /* typecheck SWIGTYPE * */
                void *tmp;
                _v = (SWIG_ConvertPtr( *argv[1], (void**)&tmp, SWIGTYPE_p_Agedge_t, 0) < 0)? 0:1;
            }
            if (_v) {
                return _wrap_nextin__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agraph_t, 0) < 0)? 0:1;
        }
        if (_v) {
            {
                /* typecheck SWIGTYPE * */
                void *tmp;
                _v = (SWIG_ConvertPtr( *argv[1], (void**)&tmp, SWIGTYPE_p_Agedge_t, 0) < 0)? 0:1;
            }
            if (_v) {
                return _wrap_nextin__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
            }
        }
    }
    
    /*No matching function for overloaded 'nextin'*/
    
}


ZEND_NAMED_FUNCTION(_wrap_firsttail) {
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agnode_t *result;
    zval **args[1];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 1) || (zend_get_parameters_array_ex(1, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agnode_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of firsttail. Expected SWIGTYPE_p_Agnode_t");
        }
    }
    result = (Agnode_t *)firsttail(arg1);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agnode_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_nexttail) {
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agnode_t *arg2 = (Agnode_t *) 0 ;
    Agnode_t *result;
    zval **args[2];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 2) || (zend_get_parameters_array_ex(2, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agnode_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nexttail. Expected SWIGTYPE_p_Agnode_t");
        }
    }
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_Agnode_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of nexttail. Expected SWIGTYPE_p_Agnode_t");
        }
    }
    result = (Agnode_t *)nexttail(arg1,arg2);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agnode_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_firstnode__SWIG_0) {
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agnode_t *result;
    zval **args[1];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 1) || (zend_get_parameters_array_ex(1, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agraph_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of firstnode. Expected SWIGTYPE_p_Agraph_t");
        }
    }
    result = (Agnode_t *)firstnode(arg1);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agnode_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_nextnode__SWIG_0) {
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agnode_t *arg2 = (Agnode_t *) 0 ;
    Agnode_t *result;
    zval **args[2];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 2) || (zend_get_parameters_array_ex(2, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agraph_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nextnode. Expected SWIGTYPE_p_Agraph_t");
        }
    }
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_Agnode_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of nextnode. Expected SWIGTYPE_p_Agnode_t");
        }
    }
    result = (Agnode_t *)nextnode(arg1,arg2);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agnode_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_firstnode__SWIG_1) {
    Agedge_t *arg1 = (Agedge_t *) 0 ;
    Agnode_t *result;
    zval **args[1];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 1) || (zend_get_parameters_array_ex(1, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agedge_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of firstnode. Expected SWIGTYPE_p_Agedge_t");
        }
    }
    result = (Agnode_t *)firstnode(arg1);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agnode_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_firstnode) {
    int argc;
    zval **argv[1];
    int ii;
    
    argc = ZEND_NUM_ARGS();
    zend_get_parameters_array_ex(argc,argv);
    if (argc == 1) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agraph_t, 0) < 0)? 0:1;
        }
        if (_v) {
            return _wrap_firstnode__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
        }
    }
    if (argc == 1) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agedge_t, 0) < 0)? 0:1;
        }
        if (_v) {
            return _wrap_firstnode__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
        }
    }
    
    /*No matching function for overloaded 'firstnode'*/
    
}


ZEND_NAMED_FUNCTION(_wrap_nextnode__SWIG_1) {
    Agedge_t *arg1 = (Agedge_t *) 0 ;
    Agnode_t *arg2 = (Agnode_t *) 0 ;
    Agnode_t *result;
    zval **args[2];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 2) || (zend_get_parameters_array_ex(2, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agedge_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nextnode. Expected SWIGTYPE_p_Agedge_t");
        }
    }
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_Agnode_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of nextnode. Expected SWIGTYPE_p_Agnode_t");
        }
    }
    result = (Agnode_t *)nextnode(arg1,arg2);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agnode_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_nextnode) {
    int argc;
    zval **argv[2];
    int ii;
    
    argc = ZEND_NUM_ARGS();
    zend_get_parameters_array_ex(argc,argv);
    if (argc == 2) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agraph_t, 0) < 0)? 0:1;
        }
        if (_v) {
            {
                /* typecheck SWIGTYPE * */
                void *tmp;
                _v = (SWIG_ConvertPtr( *argv[1], (void**)&tmp, SWIGTYPE_p_Agnode_t, 0) < 0)? 0:1;
            }
            if (_v) {
                return _wrap_nextnode__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agedge_t, 0) < 0)? 0:1;
        }
        if (_v) {
            {
                /* typecheck SWIGTYPE * */
                void *tmp;
                _v = (SWIG_ConvertPtr( *argv[1], (void**)&tmp, SWIGTYPE_p_Agnode_t, 0) < 0)? 0:1;
            }
            if (_v) {
                return _wrap_nextnode__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
            }
        }
    }
    
    /*No matching function for overloaded 'nextnode'*/
    
}


ZEND_NAMED_FUNCTION(_wrap_firstattr__SWIG_0) {
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agsym_t *result;
    zval **args[1];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 1) || (zend_get_parameters_array_ex(1, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agraph_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of firstattr. Expected SWIGTYPE_p_Agraph_t");
        }
    }
    result = (Agsym_t *)firstattr(arg1);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agsym_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_nextattr__SWIG_0) {
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    Agsym_t *arg2 = (Agsym_t *) 0 ;
    Agsym_t *result;
    zval **args[2];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 2) || (zend_get_parameters_array_ex(2, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agraph_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nextattr. Expected SWIGTYPE_p_Agraph_t");
        }
    }
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_Agsym_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of nextattr. Expected SWIGTYPE_p_Agsym_t");
        }
    }
    result = (Agsym_t *)nextattr(arg1,arg2);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agsym_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_firstattr__SWIG_1) {
    Agedge_t *arg1 = (Agedge_t *) 0 ;
    Agsym_t *result;
    zval **args[1];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 1) || (zend_get_parameters_array_ex(1, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agedge_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of firstattr. Expected SWIGTYPE_p_Agedge_t");
        }
    }
    result = (Agsym_t *)firstattr(arg1);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agsym_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_nextattr__SWIG_1) {
    Agedge_t *arg1 = (Agedge_t *) 0 ;
    Agsym_t *arg2 = (Agsym_t *) 0 ;
    Agsym_t *result;
    zval **args[2];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 2) || (zend_get_parameters_array_ex(2, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agedge_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nextattr. Expected SWIGTYPE_p_Agedge_t");
        }
    }
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_Agsym_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of nextattr. Expected SWIGTYPE_p_Agsym_t");
        }
    }
    result = (Agsym_t *)nextattr(arg1,arg2);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agsym_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_firstattr__SWIG_2) {
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agsym_t *result;
    zval **args[1];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 1) || (zend_get_parameters_array_ex(1, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agnode_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of firstattr. Expected SWIGTYPE_p_Agnode_t");
        }
    }
    result = (Agsym_t *)firstattr(arg1);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agsym_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_firstattr) {
    int argc;
    zval **argv[1];
    int ii;
    
    argc = ZEND_NUM_ARGS();
    zend_get_parameters_array_ex(argc,argv);
    if (argc == 1) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agraph_t, 0) < 0)? 0:1;
        }
        if (_v) {
            return _wrap_firstattr__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
        }
    }
    if (argc == 1) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agedge_t, 0) < 0)? 0:1;
        }
        if (_v) {
            return _wrap_firstattr__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
        }
    }
    if (argc == 1) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agnode_t, 0) < 0)? 0:1;
        }
        if (_v) {
            return _wrap_firstattr__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU);
        }
    }
    
    /*No matching function for overloaded 'firstattr'*/
    
}


ZEND_NAMED_FUNCTION(_wrap_nextattr__SWIG_2) {
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    Agsym_t *arg2 = (Agsym_t *) 0 ;
    Agsym_t *result;
    zval **args[2];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 2) || (zend_get_parameters_array_ex(2, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agnode_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nextattr. Expected SWIGTYPE_p_Agnode_t");
        }
    }
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_Agsym_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of nextattr. Expected SWIGTYPE_p_Agsym_t");
        }
    }
    result = (Agsym_t *)nextattr(arg1,arg2);
    
    {
        SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Agsym_t, 0);
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_nextattr) {
    int argc;
    zval **argv[2];
    int ii;
    
    argc = ZEND_NUM_ARGS();
    zend_get_parameters_array_ex(argc,argv);
    if (argc == 2) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agraph_t, 0) < 0)? 0:1;
        }
        if (_v) {
            {
                /* typecheck SWIGTYPE * */
                void *tmp;
                _v = (SWIG_ConvertPtr( *argv[1], (void**)&tmp, SWIGTYPE_p_Agsym_t, 0) < 0)? 0:1;
            }
            if (_v) {
                return _wrap_nextattr__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agedge_t, 0) < 0)? 0:1;
        }
        if (_v) {
            {
                /* typecheck SWIGTYPE * */
                void *tmp;
                _v = (SWIG_ConvertPtr( *argv[1], (void**)&tmp, SWIGTYPE_p_Agsym_t, 0) < 0)? 0:1;
            }
            if (_v) {
                return _wrap_nextattr__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agnode_t, 0) < 0)? 0:1;
        }
        if (_v) {
            {
                /* typecheck SWIGTYPE * */
                void *tmp;
                _v = (SWIG_ConvertPtr( *argv[1], (void**)&tmp, SWIGTYPE_p_Agsym_t, 0) < 0)? 0:1;
            }
            if (_v) {
                return _wrap_nextattr__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU);
            }
        }
    }
    
    /*No matching function for overloaded 'nextattr'*/
    
}


ZEND_NAMED_FUNCTION(_wrap_rm__SWIG_0) {
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    zval **args[1];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 1) || (zend_get_parameters_array_ex(1, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agraph_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of rm. Expected SWIGTYPE_p_Agraph_t");
        }
    }
    rm(arg1);
    
    
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_rm__SWIG_1) {
    Agnode_t *arg1 = (Agnode_t *) 0 ;
    zval **args[1];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 1) || (zend_get_parameters_array_ex(1, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agnode_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of rm. Expected SWIGTYPE_p_Agnode_t");
        }
    }
    rm(arg1);
    
    
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_rm__SWIG_2) {
    Agedge_t *arg1 = (Agedge_t *) 0 ;
    zval **args[1];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 1) || (zend_get_parameters_array_ex(1, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agedge_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of rm. Expected SWIGTYPE_p_Agedge_t");
        }
    }
    rm(arg1);
    
    
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_rm) {
    int argc;
    zval **argv[1];
    int ii;
    
    argc = ZEND_NUM_ARGS();
    zend_get_parameters_array_ex(argc,argv);
    if (argc == 1) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agraph_t, 0) < 0)? 0:1;
        }
        if (_v) {
            return _wrap_rm__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
        }
    }
    if (argc == 1) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agnode_t, 0) < 0)? 0:1;
        }
        if (_v) {
            return _wrap_rm__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
        }
    }
    if (argc == 1) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agedge_t, 0) < 0)? 0:1;
        }
        if (_v) {
            return _wrap_rm__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU);
        }
    }
    
    /*No matching function for overloaded 'rm'*/
    
}


ZEND_NAMED_FUNCTION(_wrap_layout) {
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    char *arg2 = (char *) 0 ;
    zval **args[2];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 2) || (zend_get_parameters_array_ex(2, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agraph_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of layout. Expected SWIGTYPE_p_Agraph_t");
        }
    }
    {
        /*@/home/ellson/FIX/Linux.i686/share/swig/1.3.26/php4/utils.i,23,CONVERT_STRING_IN@*/
        convert_to_string_ex(args[1]);
        arg2 = (char *) Z_STRVAL_PP(args[1]);
        /*@@*/;
    }
    layout(arg1,arg2);
    
    
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_render__SWIG_0) {
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    zval **args[1];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 1) || (zend_get_parameters_array_ex(1, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agraph_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of render. Expected SWIGTYPE_p_Agraph_t");
        }
    }
    render(arg1);
    
    
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_render__SWIG_1) {
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    char *arg2 = (char *) 0 ;
    zval **args[2];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 2) || (zend_get_parameters_array_ex(2, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agraph_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of render. Expected SWIGTYPE_p_Agraph_t");
        }
    }
    {
        /*@/home/ellson/FIX/Linux.i686/share/swig/1.3.26/php4/utils.i,23,CONVERT_STRING_IN@*/
        convert_to_string_ex(args[1]);
        arg2 = (char *) Z_STRVAL_PP(args[1]);
        /*@@*/;
    }
    render(arg1,arg2);
    
    
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_render__SWIG_2) {
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    zval **args[3];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 3) || (zend_get_parameters_array_ex(3, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agraph_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of render. Expected SWIGTYPE_p_Agraph_t");
        }
    }
    {
        /*@/home/ellson/FIX/Linux.i686/share/swig/1.3.26/php4/utils.i,23,CONVERT_STRING_IN@*/
        convert_to_string_ex(args[1]);
        arg2 = (char *) Z_STRVAL_PP(args[1]);
        /*@@*/;
    }
    {
        /*@/home/ellson/FIX/Linux.i686/share/swig/1.3.26/php4/utils.i,23,CONVERT_STRING_IN@*/
        convert_to_string_ex(args[2]);
        arg3 = (char *) Z_STRVAL_PP(args[2]);
        /*@@*/;
    }
    render(arg1,arg2,arg3);
    
    
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_render__SWIG_3) {
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    char *arg2 = (char *) 0 ;
    FILE *arg3 = (FILE *) 0 ;
    zval **args[3];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 3) || (zend_get_parameters_array_ex(3, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agraph_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of render. Expected SWIGTYPE_p_Agraph_t");
        }
    }
    {
        /*@/home/ellson/FIX/Linux.i686/share/swig/1.3.26/php4/utils.i,23,CONVERT_STRING_IN@*/
        convert_to_string_ex(args[1]);
        arg2 = (char *) Z_STRVAL_PP(args[1]);
        /*@@*/;
    }
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_FILE, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of render. Expected SWIGTYPE_p_FILE");
        }
    }
    render(arg1,arg2,arg3);
    
    
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_render__SWIG_4) {
    Agraph_t *arg1 = (Agraph_t *) 0 ;
    char *arg2 = (char *) 0 ;
    void **arg3 = (void **) 0 ;
    void *ptr3 ;
    int force3 ;
    zval **args[3];
    
    SWIG_ResetError();
    if(((ZEND_NUM_ARGS() )!= 3) || (zend_get_parameters_array_ex(3, args)!= SUCCESS)) {
        WRONG_PARAM_COUNT;
    }
    
    {
        /* typemap(in) SWIGTYPE * */
        if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Agraph_t, 0) < 0) {
            SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of render. Expected SWIGTYPE_p_Agraph_t");
        }
    }
    {
        /*@/home/ellson/FIX/Linux.i686/share/swig/1.3.26/php4/utils.i,23,CONVERT_STRING_IN@*/
        convert_to_string_ex(args[1]);
        arg2 = (char *) Z_STRVAL_PP(args[1]);
        /*@@*/;
    }
    {
        /* If they pass NULL by reference, make it into a void*
             This bit should go in arginit if arginit support init-ing scripting args */
        if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_p_void, 0) < 0) {
            /* So... we didn't get a ref or ptr, but we'll accept NULL by reference */
            if ((*args[2])->type==IS_NULL && PZVAL_IS_REF(*args[2])) {
                ptr3=new void *;
                
                
                
                arg3=&ptr3;
                /* have to passback arg$arg too */
                force3=1;
            } else {
                /* wasn't a pre/ref/thing, OR anything like an int thing */
                force3=0;
                SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of render. Expected SWIGTYPE_p_p_void");
            }
        } else force3=0;
    }
    render(arg1,arg2,arg3);
    
    
    {
        if (force3) {
            SWIG_SetPointerZval( *args[2], (void*) ptr3, SWIGTYPE_p_void, 1);
        }
    }
    return;
    fail:
    zend_error(ErrorCode(),ErrorMsg());
}


ZEND_NAMED_FUNCTION(_wrap_render) {
    int argc;
    zval **argv[3];
    int ii;
    
    argc = ZEND_NUM_ARGS();
    zend_get_parameters_array_ex(argc,argv);
    if (argc == 1) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agraph_t, 0) < 0)? 0:1;
        }
        if (_v) {
            return _wrap_render__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU);
        }
    }
    if (argc == 2) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agraph_t, 0) < 0)? 0:1;
        }
        if (_v) {
            _v = (Z_TYPE_PP(argv[1]) == IS_LONG ||
            Z_TYPE_PP(argv[1]) == IS_DOUBLE ||
            Z_TYPE_PP(argv[1]) == IS_STRING) ? 1 : 0; 
            if (_v) {
                return _wrap_render__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agraph_t, 0) < 0)? 0:1;
        }
        if (_v) {
            _v = (Z_TYPE_PP(argv[1]) == IS_LONG ||
            Z_TYPE_PP(argv[1]) == IS_DOUBLE ||
            Z_TYPE_PP(argv[1]) == IS_STRING) ? 1 : 0; 
            if (_v) {
                {
                    /* typecheck SWIGTYPE * */
                    void *tmp;
                    _v = (SWIG_ConvertPtr( *argv[2], (void**)&tmp, SWIGTYPE_p_FILE, 0) < 0)? 0:1;
                }
                if (_v) {
                    return _wrap_render__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agraph_t, 0) < 0)? 0:1;
        }
        if (_v) {
            _v = (Z_TYPE_PP(argv[1]) == IS_LONG ||
            Z_TYPE_PP(argv[1]) == IS_DOUBLE ||
            Z_TYPE_PP(argv[1]) == IS_STRING) ? 1 : 0; 
            if (_v) {
                {
                    /* typecheck SWIGTYPE * */
                    void *tmp;
                    _v = (SWIG_ConvertPtr( *argv[2], (void**)&tmp, SWIGTYPE_p_p_void, 0) < 0)? 0:1;
                }
                if (_v) {
                    return _wrap_render__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            /* typecheck SWIGTYPE * */
            void *tmp;
            _v = (SWIG_ConvertPtr( *argv[0], (void**)&tmp, SWIGTYPE_p_Agraph_t, 0) < 0)? 0:1;
        }
        if (_v) {
            _v = (Z_TYPE_PP(argv[1]) == IS_LONG ||
            Z_TYPE_PP(argv[1]) == IS_DOUBLE ||
            Z_TYPE_PP(argv[1]) == IS_STRING) ? 1 : 0; 
            if (_v) {
                _v = (Z_TYPE_PP(argv[2]) == IS_LONG ||
                Z_TYPE_PP(argv[2]) == IS_DOUBLE ||
                Z_TYPE_PP(argv[2]) == IS_STRING) ? 1 : 0; 
                if (_v) {
                    return _wrap_render__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU);
                }
            }
        }
    }
    
    /*No matching function for overloaded 'render'*/
    
}


/* NEW Destructor style */
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_FILE) {
  /* bah! No destructor for this simple type!! */
}
/* NEW Destructor style */
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_Agedge_t) {
  /* bah! No destructor for this simple type!! */
}
/* NEW Destructor style */
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_Agsym_t) {
  /* bah! No destructor for this simple type!! */
}
/* NEW Destructor style */
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_Agraph_t) {
  /* bah! No destructor for this simple type!! */
}
/* NEW Destructor style */
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_Agnode_t) {
  /* bah! No destructor for this simple type!! */
}
/* NEW Destructor style */
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_p_void) {
  /* bah! No destructor for this simple type!! */
}
/* NEW Destructor style */
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_void) {
  /* bah! No destructor for this simple type!! */
}
/* end wrapper section */
/* init section */
#ifdef __cplusplus
extern "C" {
#endif
ZEND_GET_MODULE(gv)
#ifdef __cplusplus
}
#endif

#define SWIG_php_minit PHP_MINIT_FUNCTION(gv)
/*************************************************************************
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.

 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop though that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.

 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
**/

#ifdef __cplusplus
extern "C" {
#endif

SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  swig_type_info *type, *ret;
  swig_cast_info *cast;
  size_t i;
  swig_module_info *module_head;
  static int init_run = 0;

  clientdata = clientdata;

  if (init_run) return;
  init_run = 1;

  /* Initialize the swig_module */
  swig_module.type_initial = swig_type_initial;
  swig_module.cast_initial = swig_cast_initial;

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (module_head) {
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  } else {
    /* This is the first module loaded */
    swig_module.next = &swig_module;
    SWIG_SetModule(clientdata, &swig_module);
  }
		 
  /* Now work on filling in swig_module.types */
  for (i = 0; i < swig_module.size; ++i) {
    type = 0;

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
      if (swig_module.type_initial[i]->clientdata) type->clientdata = swig_module.type_initial[i]->clientdata;
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
      }
      if (ret && type == swig_module.type_initial[i]) {
        cast->type = ret;
        ret = 0;
      }
      
      if (!ret) {
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }

      cast++;
    }

    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
}
#endif


  SWIG_php_minit {
    SWIG_InitializeModule(0);

/* oinit subsection */
ZEND_INIT_MODULE_GLOBALS(gv, gv_init_globals, gv_destroy_globals);

/* Register resource destructors for pointer types */
le_swig__p_FILE=zend_register_list_destructors_ex(_wrap_destroy_p_FILE,NULL,(char *)(SWIGTYPE_p_FILE->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_FILE,&le_swig__p_FILE);
le_swig__p_Agedge_t=zend_register_list_destructors_ex(_wrap_destroy_p_Agedge_t,NULL,(char *)(SWIGTYPE_p_Agedge_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_Agedge_t,&le_swig__p_Agedge_t);
le_swig__p_Agsym_t=zend_register_list_destructors_ex(_wrap_destroy_p_Agsym_t,NULL,(char *)(SWIGTYPE_p_Agsym_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_Agsym_t,&le_swig__p_Agsym_t);
le_swig__p_Agraph_t=zend_register_list_destructors_ex(_wrap_destroy_p_Agraph_t,NULL,(char *)(SWIGTYPE_p_Agraph_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_Agraph_t,&le_swig__p_Agraph_t);
le_swig__p_Agnode_t=zend_register_list_destructors_ex(_wrap_destroy_p_Agnode_t,NULL,(char *)(SWIGTYPE_p_Agnode_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_Agnode_t,&le_swig__p_Agnode_t);
le_swig__p_p_void=zend_register_list_destructors_ex(_wrap_destroy_p_p_void,NULL,(char *)(SWIGTYPE_p_p_void->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_p_void,&le_swig__p_p_void);
le_swig__p_void=zend_register_list_destructors_ex(_wrap_destroy_p_void,NULL,(char *)(SWIGTYPE_p_void->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_void,&le_swig__p_void);
CG(active_class_entry) = NULL;
/* end oinit subsection */

    return SUCCESS;
}
PHP_RINIT_FUNCTION(gv)
{
/* rinit section */

/* cinit subsection */
/* end cinit subsection */

/* vinit subsection */
/* end vinit subsection */

    return SUCCESS;
}
PHP_MSHUTDOWN_FUNCTION(gv)
{
/* shutdown section */

    return SUCCESS;
}
PHP_RSHUTDOWN_FUNCTION(gv)
{
/* rshutdown section */

    return SUCCESS;
}
PHP_MINFO_FUNCTION(gv)
{
}
/* end init section */
